package webice.beans;

import java.util.*;
import java.net.*;
import java.io.*;
import edu.stanford.slac.ssrl.authentication.utility.AuthGatewayBean;

/**
 * API for sending/receiving request to/from the Impersonation server
 */
public class Imperson
{
	/**
	 * Impersonation host
	 */
	private String host = "";

	/**
	 * Impersonation port
	 */
	private int port = 0;

	/**
	 * User
	 */
	private String user = "";

	/**
	 * SMB session id
	 */
	private String sessionId = "";
	
	private AuthGatewayBean auth = null;

	/**
	 * Constructor
	 */
	public Imperson(AuthGatewayBean auth, String h, int p)
	{
		this.auth = auth;
		user = auth.getUserID();
		sessionId = auth.getSessionID();
		host = h;
		port = p;
	}

	/**
	 * Returns impersonation host
	 */
	public String getHost()
	{
		return host;
	}

	/**
	 * Sets impersonation host
	 */
/*	public void setHost(String s)
	{
		host = s;
	}*/

	/**
	 * Returns impersonation port
	 */
	public int getPort()
	{
		return port;
	}

	/**
	 * Sets impersonation port
	 */
/*	public void setPort(int s)
	{
		port = s;
	}*/

	/**
	 * Returns impersonation user
	 */
	public String getUser()
	{
		return user;
	}

	/**
	 * Sets impersonation user
	 */
/*	public void setUser(String s)
	{
		user = s;
	}*/

	/**
	 * Returns impersonation SMB session id
	 */
	public String getSessionId()
	{
		return sessionId;
	}

	/**
	 * Sets impersonation SMB session id
	 */
/*	public void setSessionId(String s)
	{
		sessionId = s;
	}*/

	/**
	 * Read a remote file.
	 * @return Content of the file
	 * @file File path. Must be accessible by this
	 * user from the spcified host.
	 * @exception Exception Thrown if there is
	 * a problem with the HTTP connect to the
	 * impersonation server.
	 */
	public String readFile(String file)
			throws Exception
	{
		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {
		
		// Read the log file generated by the
		// spot finder program
		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/readFile?impFilePath=" + file
					+ "&impUser=" + user
					+ "&impSessionID=" + oneTimeSession;


		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");

		int response = con.getResponseCode();
		if (response != 200) {
			if (response == 551) {
				throw new NullClientException("readFile failed for file "
						+ file + ": "
						+ String.valueOf(response) + " "
						+ con.getResponseMessage());
			} else {
				throw new Exception("readFile failed: "
						+ String.valueOf(response) + " "
						+ con.getResponseMessage()
						+ " (for " + urlStr + ")\n");
			}
		}

		BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
		char buf[] = new char[5000];
		int num = 0;
		StringBuffer strBuf = new StringBuffer();
		while ((num=reader.read(buf, 0, 5000)) >= 0) {
			if (num > 0)
				strBuf.append(buf, 0, num);
		}
		buf = null;

		reader.close();
		con.disconnect();
		con = null;

		return strBuf.toString();
		
		} catch (Exception e) {
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}
	}

	/**
	 * List files and directories under 'dir' directory.
	 * @dir Directory
	 * @filter Regular expression file filter
	 * @dirs Returned sub directories for 'dir'
	 * @files Returned files in 'dir' directory
	 */
	public void listDirectory(String dir,
						String filter,
						TreeMap dirs,
						TreeMap files)
		throws Exception
	{
		// Do not include symbolic link dirs
		listDirectory(dir, filter, dirs, files, false);
	}
	
	public void listDirectory(String dir,
						String filter,
						TreeMap dirs,
						TreeMap files,
						boolean includeSymlinks)
		throws Exception
	{
		HttpURLConnection con = null;
		BufferedReader reader = null;

		try {

		// Clear subdirs
		if (files != null)
			files.clear();

		if (dirs != null)
			dirs.clear();

		String oneTimeSession = getOneTimeSession(host);

		// Retrieve sub dirs
		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/listDirectory?impUser=" + user
					+ "&impSessionID=" + oneTimeSession
					+ "&impDirectory=" + dir;

		if ((filter != null) && (filter.length() > 0)) {
			urlStr += "&impFileFilter=" + filter;
		}


		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");

		int response = con.getResponseCode();
		if (response != 200) {
			if (response == 551) {
				throw new NullClientException("listDirectory Failed for dir "
						+ dir + ": "
						+ String.valueOf(response) + " "
						+ con.getResponseMessage());
			} else {
				throw new Exception("listDirectory failed: impserver returns "
						+ String.valueOf(response) + " " + con.getResponseMessage()
						+ " (for " + urlStr + ")");
			}
		}

		reader = new BufferedReader(new InputStreamReader(con.getInputStream()));

		int count = 0;
		String line = null;
		boolean firstLine = true;
		while ((line=reader.readLine()) != null) {

			if (firstLine) {
				firstLine = false;
				if (line.equals("200 OK"))
					continue;
			}


			FileInfo info = new FileInfo(line);

			if (info.type.indexOf("dir") == 0) {
				if (dirs != null)
					dirs.put(info.name, info);
			} else if (includeSymlinks && (info.type.indexOf("symbolic") == 0)) {
				if (dirs != null)
					dirs.put(info.name, info);
			} else {
				if (files != null)
					files.put(info.name, info);
			}

			// Trucate big directory
			++count;
			if (count >= 1000)
				break;
		}

		} catch (Exception e) {
			throw e;
		} finally {
			if (reader != null)
				reader.close();
			if (con != null)
				con.disconnect();
		}


	}


	/**
	 * Saves the string in a remote file via the impersonation server.
	 * Assume that the content type is plain text.
	 */
	public void saveFile(String fname,
						String content)
		throws Exception
	{
		saveFile(fname, content, "text/plain");
	}


	/**
	 * Saves the string in a remote file via the impersonation server.
	 */
	public void saveFile(String fname,
						String content,
						String contentType)
		throws Exception
	{
		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {
		
		String urlString = "http://" + host + ":" + String.valueOf(port)
							+ "/writeFile?"
							+ "impUser=" + user
							+ "&impSessionID=" + oneTimeSession
							+ "&impFilePath=" + fname
							+ "&impFileMode=0755";

		URL url = new URL(urlString);
		con = (HttpURLConnection)url.openConnection();

		con.setDoOutput(true);
		con.setRequestMethod("POST");
		con.setRequestProperty("Content-Length", String.valueOf(content.length()));
		con.setRequestProperty("Content-Type", contentType);

		OutputStreamWriter writer = new OutputStreamWriter(con.getOutputStream());
		writer.write(content, 0, content.length());
		writer.flush();

		writer.close();

		int response = con.getResponseCode();
		if (response != 200) {
			if (response == 551) {
				throw new NullClientException("saveFile Failed for file "
							+ fname + ": "
							+ String.valueOf(response) + " "
							+ con.getResponseMessage());
			} else {
				throw new Exception("Failed to write file " + fname + ": impserver returns "
							+ String.valueOf(response) + " " + con.getResponseMessage()
							+ " (for " + urlString + ")");
			}
		}
		
				
		} catch (Exception e) {
			WebiceLogger.error(e.getMessage(), e);
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}

	}


	/**
	 * Check if dir exists
	 */
	public boolean dirExists(String file)
		throws Exception
	{
		return fileExists(file);
	}


	/**
	 * Check if file exists
	 */
	public boolean fileExists(String file)
		throws Exception
	{
		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {

		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/getFileStatus?impFilePath=" + file
					+ "&impUser=" + user
					+ "&impSessionID=" + oneTimeSession;



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");

		int response = con.getResponseCode();

		if (response == 551) {
			throw new NullClientException("Authentication failed in fileExists for file "
						+ file + ": "
						+ String.valueOf(response) + " "
						+ con.getResponseMessage());
		} else if (response != 200) {
			return false;
		}

		return true;
		
		} catch (Exception e) {
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}

	}

	/**
	 * Get file or dir status
	 */
	public Hashtable getFileStatus(String file)
		throws Exception
	{
		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {
		
		Hashtable ret = new Hashtable();
		ret.put("impFileExists", "false");

		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/getFileStatus?impFilePath=" + file
					+ "&impUser=" + user
					+ "&impSessionID=" + oneTimeSession;



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");

		int response = con.getResponseCode();

		if (response == 551) {
			throw new NullClientException("Authentication failed in fileExists for file "
						+ file + ": "
						+ String.valueOf(response) + " "
						+ con.getResponseMessage());
		} else if (response == 558) {
			// File does not exist
			return ret;
		} else if (response != 200) {
			throw new Exception("Authentication failed in fileExists for file "
						+ file + ": "
						+ String.valueOf(response) + " "
						+ con.getResponseMessage());
		}

		
		ret.put("impFileExists", "true");
		if (con.getHeaderField("impFilePath") != null)
			ret.put("impFilePath", con.getHeaderField("impFilePath"));
		if (con.getHeaderField("impFileType") != null)
			ret.put("impFileType", con.getHeaderField("impFileType"));
		if (con.getHeaderField("impFileMode") != null)
			ret.put("impFileMode", con.getHeaderField("impFileMode"));
		if (con.getHeaderField("impFileInode") != null)
			ret.put("impFileInode", con.getHeaderField("impFileInode"));
		if (con.getHeaderField("impFileDev") != null)
			ret.put("impFileDev", con.getHeaderField("impFileDev"));
		if (con.getHeaderField("impFileRdev") != null)
			ret.put("impFileRdev", con.getHeaderField("impFileRdev"));
		if (con.getHeaderField("impFileNlink") != null)
			ret.put("impFileNlink", con.getHeaderField("impFileNlink"));
		if (con.getHeaderField("impFileUid") != null)
			ret.put("impFileUid", con.getHeaderField("impFileUid"));
		if (con.getHeaderField("impFileGid") != null)
			ret.put("impFileGid", con.getHeaderField("impFileGid"));
		if (con.getHeaderField("impFileSize") != null)
			ret.put("impFileSize", con.getHeaderField("impFileSize"));
		if (con.getHeaderField("impFileAtime") != null)
			ret.put("impFileAtime", con.getHeaderField("impFileAtime"));
		if (con.getHeaderField("impFileMtime") != null)
			ret.put("impFileMtime", con.getHeaderField("impFileMtime"));
		if (con.getHeaderField("impFileCtime") != null)
			ret.put("impFileCtime", con.getHeaderField("impFileCtime"));
		if (con.getHeaderField("impFileBlkSize") != null)
			ret.put("impFileBlkSize", con.getHeaderField("impFileBlkSize"));
		if (con.getHeaderField("impFileBlocks") != null)
			ret.put("impFileBlocks", con.getHeaderField("impFileBlocks"));
		if (con.getHeaderField("impFilePathReal") != null)
			ret.put("impFilePathReal", con.getHeaderField("impFilePathReal"));
		
		return ret;
				
		
		} catch (Exception e) {
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}

	}

	/**
	 * Creates a directory and its parents (if parents do not exist).
	 */
	public void createDirectory(String dir)
		throws Exception
	{
		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {

		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/createDirectory?"
					+ "impUser=" + user
					+ "&impSessionID=" + oneTimeSession
					+ "&impDirectory=" + dir
					+ "&impFileMode=0755"
					+ "&impCreateParents=true";



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");

		int response = con.getResponseCode();
		if (response != 200) {
			if (response == 551) {
				throw new NullClientException("createDirectory failed for dir "
							+ dir + ": "
							+ String.valueOf(response) + " "
							+ con.getResponseMessage());
			} else {
				throw new Exception("createDirectory failed: " + dir
							+ ": imperson server returns "
							+ String.valueOf(response) + " " + con.getResponseMessage()
							+ " (for " + urlStr + ")");
			}
		}

		con.disconnect();
		con = null;
		
		} catch (Exception e) {
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}

	}

	/**
	 * Create a symbolic link.
	 * ln -s real_dir new_symlink_dir
	 */
	public void createSymLink(String src, String dest)
		throws Exception
	{
		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {

		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/runScript?"
					+ "impUser=" + user
					+ "&impSessionID=" + oneTimeSession
					+ "&impCommandLine=ln%20-s%20" + src + "%20" + dest
					+ "&impShell=/bin/sh";



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");
		int response = con.getResponseCode();
		if (response != 200) {
			if (response == 551) {
				throw new NullClientException("createSymLink failed for dest file "
							+ dest + " src file " + src + ": "
							+ String.valueOf(response) + " "
							+ con.getResponseMessage());
			} else if (response != 200) {
				throw new Exception("createSymLink failed: dest file " + dest
							+ " src file " + src + ": imperson server returns "
							+ String.valueOf(response) + " " + con.getResponseMessage()
							+ " (for " + urlStr + ")");
			}
		}

		con.disconnect();
		con = null;

		} catch (Exception e) {
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}
	}

	/**
	 * Deletes a directory
	 */
	public void deleteDirectory(String dir)
		throws Exception
	{
		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {

		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/deleteDirectory?"
					+ "impUser=" + user
					+ "&impSessionID=" + oneTimeSession
					+ "&impDirectory=" + dir
					+ "&impDeleteChildren=true";



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");

		int response = con.getResponseCode();
		if (response != 200) {
			if (response == 551) {
				throw new NullClientException("deleteDirectory failed for dir "
							+ dir + ": "
							+ String.valueOf(response) + " "
							+ con.getResponseMessage());
			} else if (response != 200) {
				throw new Exception("deleteDirectory failed: " + dir
							+ ": imperson server returns "
							+ String.valueOf(response) + " " + con.getResponseMessage()
							+ " (for " + urlStr + ")");
			}
		}

		con.disconnect();
		con = null;

		} catch (Exception e) {
//			System.out.println("Caught exception in Imperson.deleteDirectory: " + e.getMessage());
//			e.printStackTrace();
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}
	}

	/**
	 * Deletes files in a given directory.
	 */
	public void deleteFiles(String dir, String filter)
		throws Exception
	{
		HttpURLConnection con = null;
		BufferedReader reader = null;
		String oneTimeSession = getOneTimeSession(host);
		try {
//		if ((dir.indexOf(ServerConfig.getUserRootDir(user)) != 0) &&
//			(dir.indexOf("/home/" + user) != 0))
//				throw new Exception("User " + user
//				+ " is does not have permission to delete files in "
//				+ dir);

		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/runScript?"
					+ "impUser=" + user
					+ "&impSessionID=" + oneTimeSession
					+ "&impCommandLine=rm%20-rf%20" + dir + "/" + filter
					+ "&impShell=/bin/sh";



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");
		int response = con.getResponseCode();
		if (response != 200) {
			if (response == 551) {
				throw new NullClientException("deleteFiles failed for dir "
							+ dir + ": "
							+ String.valueOf(response) + " "
							+ con.getResponseMessage());
			} else if (response != 200) {
				throw new Exception("deleteFiles failed: " + dir
							+ ": imperson server returns "
							+ String.valueOf(response) + " " + con.getResponseMessage()
							+ " (for " + urlStr + ")");
			}
		}

		reader = new BufferedReader(new InputStreamReader(con.getInputStream()));

		int count = 0;
		String line = null;
		boolean firstLine = true;
		while ((line=reader.readLine()) != null) {
			if (line.contains("Permission denied"))
				throw new Exception("deleteFiles failed: " + line);
		}

		con.disconnect();
		con = null;

		} catch (Exception e) {
			throw e;
		} finally {
			if (reader != null)
				reader.close();
			if (con != null)
				con.disconnect();
			con = null;
		}
	}

	/**
	 * Deletes a file
	 */
	public void deleteFile(String file)
		throws Exception
	{
		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {

		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/deleteFile?"
					+ "impUser=" + user
					+ "&impSessionID=" + oneTimeSession
					+ "&impFilePath=" + file;



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");
		int response = con.getResponseCode();
		if (response != 200) {
			if (response == 551) {
				throw new NullClientException("deleteFile failed for "
							+ file + ": "
							+ String.valueOf(response) + " "
							+ con.getResponseMessage());
			} else if (response != 200) {
				throw new Exception("deleteFile failed: " + file
							+ ": imperson server returns "
							+ String.valueOf(response) + " " + con.getResponseMessage()
							+ " (for " + urlStr + ")");
			}
		}

		con.disconnect();
		con = null;

		} catch (Exception e) {
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}
	}

	/**
	 * 
	  a file
	 */
	public void copyFile(String from, String to)
		throws Exception
	{

		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {
		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/copyFile?"
					+ "impUser=" + user
					+ "&impSessionID=" + oneTimeSession
					+ "&impOldFilePath=" + from
					+ "&impNewFilePath=" + to
					+ "&impFileMode=0755";



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");

		int response = con.getResponseCode();
		if (response != 200) {
			throw new Exception("copyFile failed to copy from " + from
			 			+ " to " + to
						+ ": imperson server returns "
						+ String.valueOf(response) + " " + con.getResponseMessage()
						+ " (for " + urlStr + ")");
		}
		con.disconnect();
		con = null;

		} catch (Exception e) {
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}
	}

	/**
	 * Rename a file
	 */
	public void renameFile(String from, String to)
		throws Exception
	{

		HttpURLConnection con = null;
		String oneTimeSession = getOneTimeSession(host);
		try {
		String urlStr = "http://" + host + ":" + String.valueOf(port)
					+ "/renameFile?"
					+ "impUser=" + user
					+ "&impSessionID=" + oneTimeSession
					+ "&impOldFilePath=" + from
					+ "&impNewFilePath=" + to;



		URL url = new URL(urlStr);

		con = (HttpURLConnection)url.openConnection();

		con.setRequestMethod("GET");

		int response = con.getResponseCode();
		if (response != 200) {
			throw new Exception("renameFile failed to rename from " + from
			 			+ " to " + to
						+ ": imperson server returns "
						+ String.valueOf(response) + " " + con.getResponseMessage()
						+ " (for " + urlStr + ")");
		}
		con.disconnect();
		con = null;

		} catch (Exception e) {
			throw e;
		} finally {
			if (con != null)
				con.disconnect();
			con = null;
		}
	}
	
	/**
	 * mode:
	 * 0: do not use one-time session
	 * 1: use one-time session for non-localhost
	 * 2: always use one-time session
	 */
	public String getOneTimeSession(String aHost)
		throws Exception
	{
		int mode = ServerConfig.getOneTimeSessionMode();
		switch (mode) {
			case 0:
				return sessionId;
			case 1:
				if (!aHost.equals("localhost"))
					return createOneTimeSession();
				else
					return sessionId;
			case 2:
				return createOneTimeSession();
		}
		
		return sessionId;
	}
	
	/**
	 */
    /**
     * Generate a one-time session from an existing session.
     */
    public String getOneTimeSession1()
    	throws Exception
    {	
	boolean sessionValid = false;
	String sessionCreation = "";
	String sessionLastAccessed = "";
	String userID = "";
	String sessionID = "";
	String sessionMethod = "";
	boolean oneTimeSession = false;
	boolean updateSessionOK = false;
	String updateError = "";
		      
        // Build URL
	String authHost = ServerConfig.getAuthHost();
	int authPort = ServerConfig.getAuthPort();
	
        String myURL =  ServerConfig.getAuthServletHost() + "/gateway/servlet/GetOneTimeSession?SMBSessionID=";
        myURL = myURL.concat(sessionId);
        myURL = myURL.concat("&AppName=" + ServerConfig.getAuthAppName());
        myURL = myURL.concat("&ValidBeamlines=True");
	
	WebiceLogger.info("getOneTimeSession: URL = " + myURL);
	
        // query the URL
        try {
            URL newUrl = new URL(myURL);
            HttpURLConnection urlConn = (HttpURLConnection) newUrl.openConnection();
            int response = urlConn.getResponseCode();
            if (response != 200)
                throw new Exception("Auth server returned an error for GetOneTimeSession request: " 
				+ response + " " + urlConn.getResponseMessage());

            String sessionKey = urlConn.getHeaderField("Auth.SessionKey");
            if (sessionKey == null)
	    	sessionKey = "";

            // Get the rest of the headers
            Hashtable ht = new Hashtable();
            Object hdrs[] = urlConn.getHeaderFields().keySet().toArray();
            for (int i=0; i<hdrs.length; i++) {
		String hdr_key = (String) hdrs[i];
//		WebiceLogger.info("getOneTimeSession: header key=" + hdr_key
//				 + " value=" + urlConn.getHeaderField(hdr_key));
		if (hdr_key != null && hdr_key.startsWith("Auth.")) {
			String hdr_val = urlConn.getHeaderField(hdr_key);
			if (hdr_key.equals("Auth.SessionCreation")) {
				sessionCreation = hdr_val;
	                } else if (hdr_key.equals("Auth.SessionAccessed")) {
    	            		sessionLastAccessed = hdr_val;
        	        } else if (hdr_key.equals("Auth.UserID")) {
            	    		userID = hdr_val;
			} else if (hdr_key.equals("Auth.SessionValid") && hdr_val != null) {
				sessionValid = hdr_val.equals("TRUE");
			} else if (hdr_key.equals("Auth.SessionKey")) {
				// do nothing
			} else if (hdr_key.equals("Auth." + sessionKey)) {
				sessionID = hdr_val;
			} else if (hdr_key.equals("Auth.Method")) {
				sessionMethod = hdr_val;
			} else if (hdr_key.equals("Auth.OneTimeSession") && (hdr_val != null) 
				&& hdr_val.equalsIgnoreCase("TRUE")) {
				oneTimeSession = true;
			} else {
                		// do nothing
	            }
		}
            }
            updateSessionOK = true;
            updateError = "";
	    
//	    } // if sessionID.length() > 0
	    
        } catch (MalformedURLException e) { 
        	updateError = "MalformedURLException " + e.getMessage();
        } catch (IOException e) {
        	updateError = "IOException " + e.getMessage();
        } catch (Exception e) {
        	updateError = "Exception " + e.getMessage();
        }
        
	WebiceLogger.info("getOneTimeSession: one-time session = " + sessionID + " for user " + user);
	return sessionID;    
    }
	
	/**
	 * Ask auth server to create a one-time session from 
	 * the existing normal session.
	 */
	private String createOneTimeSession()
		throws Exception
	{
		AuthGatewayBean newSess = auth.createOneTimeSession(true);
		WebiceLogger.info("createOneTimeSession: new session = " + newSess.getSessionID());
		if (newSess.isSessionValid()) {
			WebiceLogger.info("getOneTimeSession returning a new one-time session " 
					+ newSess.getSessionID());
			return newSess.getSessionID();
		}
			
		throw new Exception("Failed to get a one-time session: " + newSess.getUpdateError());		
	}
}

