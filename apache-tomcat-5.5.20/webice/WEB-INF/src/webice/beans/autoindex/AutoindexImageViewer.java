/**
 * Javabean for SMB resources
 */
package webice.beans.autoindex;

import webice.beans.*;
import webice.beans.image.*;
import java.net.*;
import java.io.*;
import java.util.*;
import java.text.*;

/** ScreeningImageViewer
 * @class ImageViewer
 * Bean class that represents an image viewer. Holds parameters for setting
 * up a display for the image.
 */
public class AutoindexImageViewer extends ImageViewer
{
	AutoindexRun controller = null;
	
	/**
	 * Constructor
	 */
	public AutoindexImageViewer(Client c, AutoindexRun p)
		throws Exception
	{
		this.client = c;
		this.viewerName = "autoindex";
		this.controller = p;
		
		// do not share current image setting with other viewers.
//		client.getProperties().setProperty(getViewerName() + ".useGlabalImageDir", "no");
		client.getProperties().setProperty(getViewerName() + ".showSpots", "yes");
		client.getProperties().setProperty(getViewerName() + ".autoAnalyzeImage", "yes");
		init();
	}
	
	/**
	 * Get file name of the jpeg file
	 * for the crystal snapshot.
	 */
	public String getCrystalJpegUrl()
	{
		return "";
	}


	/**
	 * Get log file generated by spot finder
	 * for the current image
	 */
	public String getSpotLogFile()
	{

		return "";
	}

	/**
	 * Work dir for spotfinder
	 */
	public String getSpotDir()
	{
		if (controller.getRunController().getSetupData().getVersion() > 1.0)
			return controller.getWorkDir() + "/LABELIT";
		else
			return controller.getWorkDir();
		
	}

	/**
	 * Can we enable "Last Image" button"
	 */
	public boolean lastImageCollectedEnabled()
	{
		return false;

	}
	
	public boolean analyzeImageEnabled()
	{
		return false;
	}

	public boolean fileOpenEnabled()
	{
		return false;
	}
				
	protected void findSpots(boolean forced)
	{
	}
	
	protected String loadSpotInfo()
		throws Exception
	{
		return "";
	}
		
	public String getImageFrame()
	{
		return "imgFrame";
	}
	
	public String getImageParentFrame()
	{
		return "imgFrame";
	}
	
	public String getImageGrandParentFrame()
	{
		return "imgFrame";
	}

}


