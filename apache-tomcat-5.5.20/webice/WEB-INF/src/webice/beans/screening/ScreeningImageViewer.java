/**
 * Javabean for SMB resources
 */
package webice.beans.screening;

import webice.beans.*;
import webice.beans.image.*;
import java.net.*;
import java.io.*;
import java.util.*;
import java.text.*;

/** ScreeningImageViewer
 * @class ImageViewer
 * Bean class that represents an image viewer. Holds parameters for setting
 * up a display for the image.
 */
public class ScreeningImageViewer extends ImageViewer
{
	ImageViewerController controller = null;

	public static String TAB_AUTOINDEX = "autoindex";
	public static String TAB_DETAILS = "details";
	public static String TAB_SUMMARY = "summary";
	
	private boolean predictionFileExists = false;

	/**
	 * Constructor
	 */
	public ScreeningImageViewer(Client c, ImageViewerController p)
		throws Exception
	{
		this.client = c;
		this.viewerName = "screening";
		this.controller = p;

		init();
	}

	/**
	 * Get file name of image generated by spot finder
	 * for the current image
	 */
	public String getSpotFile()
	{
		return controller.getSpotFile();
	}

	public String getPredictionFile()
	{
		if (!predictionFileExists)
			return "";
		return controller.getPredictionFile();
	}

	/**
	 * Get file name of the jpeg file
	 * for the crystal snapshot.
	 */
	public String getCrystalJpegUrl()
	{
		try {

		String jpeg = controller.getCrystalJpegFile();

		String url = "servlet/loader/readJpegFile?impFilePath=" + jpeg
					+ "&impUser=" + client.getUser()
					+ "&impSessionID=" + client.getSessionId();

		return url;

		} catch (Exception e) {
			WebiceLogger.error("Error in getCrystalCrystalJpegUrl: listDirectory failed because "
					+ e.getMessage());
			return "";
		}
	}


	/**
	 * Get log file generated by spot finder
	 * for the current image
	 */
	public String getSpotLogFile()
	{

		return controller.getSpotLogFile();
	}

	/**
	 * Work dir for spotfinder
	 */
	public String getSpotDir()
	{
		return controller.getSpotDir();
	}
	

	/**
	 */
	public void setImageFile(String s)
		throws Exception
	{
		String curTab = getInfoTab();

		super.setImageFile(s);

		// Restore tab
		setInfoTab(curTab);


		// Expect the spot file to be there
		findSpots();
		
		predictionFileExists = controller.predictionFileExists();		
		
	}

	/**
	 */
	protected void findSpots()
	{
		try {

			boolean stale = true;

			// See if spot file and log file exist and are newer than the
			// orginal image file
			Hashtable spotFileStatus = getFileStatus(getSpotFile());
			if (spotFileStatus == null) {
				String oldMsg = getSpotInfo();
				setSpotInfo("Cannot find spotfinder output file (" + getSpotFile() + "): " + oldMsg);
				return;
			}


			Hashtable imageFileStatus = getFileStatus(getImageFile());

			// If we can't get file status of the image
			// it is possible that the image file no longer exists
			// or this user has no permission to read the image file
			// (even though this user maybe able to see 
			// the image via the image server, if the user is staff).
			// In this case, display the spotfinder log file anyway without checking
			// whether the log file is staled or not.
			if (imageFileStatus == null) {
//				String oldMsg = getSpotInfo();
//				setSpotInfo("Cannot find image file " + getImageFile() + ": " + oldMsg);
//				return;
				stale = false;
			} else {

				String tmp1 = (String)spotFileStatus.get("impFileMtime");
				String tmp2 = (String)imageFileStatus.get("impFileMtime");

				SimpleDateFormat formatter = new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy");

				if (formatter.parse(tmp1).after(formatter.parse(tmp2))) {
					stale = false;
				}
			
			}


			if (!stale) {
				if (getSpotInfo().length() == 0) {
					loadSpotInfo();
				}
				return;
			}

			setSpotInfo("");


		} catch (Exception e) {
			setSpotInfo("findSpots failed: " + e.getMessage() + "\n");
			WebiceLogger.error(getViewerName() + " findSpots: error " + e.getMessage(), e);
		}

	}

	/**
	 * Can we enable "Last Image" button"
	 */
	public boolean lastImageCollectedEnabled()
	{
		// Client must be connected to the beamline
		if (!client.isConnectedToBeamline())
			return false;

		// The screening must be running
/*		if (!client.isScreening())
			return false;*/
			
		// The sil being screened must be the same
		// as the sil we are viewing in webice
		String screeningSilId = client.getScreeningSilId();

		// No sil is being screened.
		if ((screeningSilId == null) || (screeningSilId.length() == 0))
			return false;

		String silId = controller.getSilId();

		// We are not viewing any sil.
		if ((silId == null) || (silId.length() == 0))
			return false;

		// The one we are viewing must be the same as
		// the one being screened.
		if (!screeningSilId.equals(silId))
			return false;

		return true;

	}

	public String getImageFrame()
	{
		return "imgFrame";
	}
	
	public String getImageParentFrame()
	{
		return "imageViewerFrame";
	}
	
	public String getImageGrandParentFrame()
	{
		return "mainFrame";
	}

}


