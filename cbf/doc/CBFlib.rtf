{\rtf1\mac\ansicpg10000\uc1 \deff12\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}
{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier{\*\falt Courier New};}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}
{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York{\*\falt Times New Roman};}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}
{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}
{\f20\froman\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt ?l?r ??_fc};}{\f21\fnil\fcharset129\fprq1{\*\panose 02030600000101010101}Batang{\*\falt \'c2\'93oUAA};}
{\f22\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}SimSun{\*\falt ??\'e7\'db??};}{\f23\fnil\fcharset136\fprq2{\*\panose 02010601000101010101}PMingLiU{\*\falt !Ps2OcuAe};}
{\f24\fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt ?l?r ?S?V?b?N};}{\f25\fmodern\fcharset129\fprq1{\*\panose 020b0600000101010101}Dotum{\*\falt \'e7\'90i\'e7\'8f\'e7_\'e7\'8f?o};}
{\f26\fmodern\fcharset134\fprq1{\*\panose 02010600030101010101}SimHei{\*\falt o\'e7\'db2\'e7\'db??};}{\f27\fmodern\fcharset136\fprq1{\*\panose 02010609000101010101}MingLiU{\*\falt 2OcuAe};}
{\f28\froman\fcharset128\fprq1{\*\panose 02020609040305080305}Mincho{\*\falt ??_fc};}{\f29\froman\fcharset129\fprq1{\*\panose 020b0600000101010101}Gulim{\*\falt \'a2\'ac\'c2\'cf\'e7\'dbu\'e7\'8f\'e7_\'c2\'93\'e7\'e8};}
{\f30\froman\fcharset222\fprq2{\*\panose 02020603050405020304}Angsana New;}{\f31\froman\fcharset222\fprq2{\*\panose 020b0304020202020204}Cordia New;}{\f32\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Mangal;}
{\f33\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Latha;}{\f34\froman\fcharset256\fprq2{\*\panose 010a0502050306030303}Sylfaen;}{\f35\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Vrinda;}
{\f36\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Raavi;}{\f37\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Shruti;}{\f38\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Sendnya;}
{\f39\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Gautami;}{\f40\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Tunga;}{\f41\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Estrangella Edessa;}
{\f42\froman\fcharset256\fprq2{\*\panose 00000000000000000000}Arial Unicode MS;}{\f43\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f44\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}
{\f45\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Dingbats;}{\f46\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}N Helvetica Narrow;}{\f47\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}
{\f48\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Chancery;}{\f49\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}New Century Schlbk;}{\f50\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}LockFont;}
{\f51\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Mishawaka Bold;}{\f52\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Mishawaka;}{\f53\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}
{\f54\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f55\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f56\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}
{\f57\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f58\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f59\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}
{\f60\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f61\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f62\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Bernhard Modern Roman;}
{\f63\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Myriad Roman;}{\f64\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Myriad Bold;}{\f65\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Myriad Italic;}
{\f66\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Myriad BoldItalic;}{\f67\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f68\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}
{\f69\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Tekton Bold;}{\f70\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f71\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}
{\f72\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Klang MT;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Script MT Bold;}{\f74\fnil\fcharset256\fprq2{\*\panose 02010601060101010103}Old English Text MT;}
{\f75\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}New Berolina MT;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Bodoni MT Ultra Bold;}{\f77\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Arial MT Condensed Light;}
{\f78\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Paisley ICG 01;}{\f79\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Paisley ICG 01 Alt;}{\f80\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Paisley ICG 02;}
{\f81\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Paisley ICG 02 Alt;}{\f82\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f83\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}UltraCondensedSansTwo;}
{\f84\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Decotura ICG;}{\f85\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Decotura ICG Inline;}{\f86\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Boca Raton ICG;}
{\f87\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Boca Raton ICG Solid;}{\f88\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Fajita ICG Mild;}{\f89\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Fajita ICG Picante;}
{\f90\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Wonton ICG;}{\f91\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Tekton;}{\f92\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}NuptialScript;}
{\f93\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Trajan Bold;}{\f94\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Trajan;}{\f95\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Copperplate33bc;}
{\f96\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Copperplate31ab;}{\f97\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f98\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}UltraCondensedSansOne;}
{\f99\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Chilada ICG Uno;}{\f100\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Chilada ICG Dos;}{\f101\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Chilada ICG Tres;}
{\f102\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Chilada ICG Cuatro;}{\f103\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Litterbox ICG;}{\f104\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Whimsy ICG;}
{\f105\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Whimsy ICG Bold;}{\f106\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Whimsy ICG Heavy;}{\f107\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Franklin Gothic No.2;}
{\f108\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Franklin Gothic Condensed;}{\f109\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}AGaramond;}{\f110\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}AGaramond Italic;}
{\f111\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}AGaramond BoldItalic;}{\f112\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}AGaramond Bold;}{\f113\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}VAG Rounded Thin;}
{\f114\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}VAG Rounded Light;}{\f115\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}VAG Rounded Bold;}{\f116\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}VAG Rounded Black;}
{\f117\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}OCRA;}{\f118\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f119\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}BI Prestige Elite BoldSlanted;}
{\f120\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}B Prestige Elite Bold;}{\f121\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}I Prestige Elite Slanted;}{\f122\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Prestige Elite;}
{\f123\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Park Avenue;}{\f124\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Goudy;}{\f125\fnil\fcharset256\fprq2{\*\panose 020b0806030204020203}Gill Sans Condensed Bold;}
{\f126\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f127\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Alleycat ICG;}{\f128\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Alleycat ICG Bold;}
{\f129\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Saturday Sans ICG;}{\f130\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Saturday Sans ICG Bold;}{\f131\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}
{\f132\fnil\fcharset256\fprq2 VT100;}{\f133\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}TTYFont;}{\f134\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}{\f135\fmodern\fcharset256\fprq1{\*\panose 020b0609040504020204}Lucida Console;}
{\f136\fswiss\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f137\froman\fcharset256\fprq2{\*\panose 02040502050505030304}Palatino Linotype;}{\f138\fswiss\fcharset256\fprq2{\*\panose 020b0604020202020204}Microsoft Sans Serif;}
{\f139\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f140\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f141\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}
{\f142\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f143\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f144\fswiss\fcharset256\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}
{\f145\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Outlook;}{\f146\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f147\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}
{\f148\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f149\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif (Vietnames;}{\f150\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Times New Roman CE;}
{\f151\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Times New Roman Cyr;}{\f152\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Times New Roman Greek;}{\f153\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Times New Roman Tur;}
{\f154\froman\fcharset177\fprq2{\*\panose 00000000000000000000}Times New Roman (Hebrew);}{\f155\froman\fcharset178\fprq2{\*\panose 00000000000000000000}Times New Roman (Arabic);}
{\f156\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Times New Roman Baltic;}{\f157\froman\fcharset163\fprq2{\*\panose 00000000000000000000}Times New Roman (Vietnamese);}{\f158\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Arial CE;}
{\f159\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Arial Cyr;}{\f160\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Arial Greek;}{\f161\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Arial Tur;}
{\f162\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Arial (Hebrew);}{\f163\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Arial (Arabic);}{\f164\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Arial Baltic;}
{\f165\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Arial (Vietnamese);}{\f166\fmodern\fcharset238\fprq1{\*\panose 00000000000000000000}Courier New CE;}{\f167\fmodern\fcharset204\fprq1{\*\panose 00000000000000000000}Courier New Cyr;}
{\f168\fmodern\fcharset161\fprq1{\*\panose 00000000000000000000}Courier New Greek;}{\f169\fmodern\fcharset162\fprq1{\*\panose 00000000000000000000}Courier New Tur;}{\f170\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Courier New (Hebrew);}
{\f171\fmodern\fcharset178\fprq1{\*\panose 00000000000000000000}Courier New (Arabic);}{\f172\fmodern\fcharset186\fprq1{\*\panose 00000000000000000000}Courier New Baltic;}
{\f173\fmodern\fcharset163\fprq1{\*\panose 00000000000000000000}Courier New (Vietnamese);}{\f174\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Helvetica CE;}{\f175\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Helvetica Cyr;}
{\f176\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Helvetica Greek;}{\f177\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Helvetica Tur;}{\f178\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Helvetica (Hebrew);}
{\f179\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Helvetica (Arabic);}{\f180\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Helvetica Baltic;}{\f181\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Helvetica (Vietnamese);}
{\f182\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Sylfaen Cyr;}{\f183\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Sylfaen Greek;}{\f184\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Tahoma CE;}
{\f185\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Tahoma Cyr;}{\f186\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Tahoma Greek;}{\f187\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Tahoma Tur;}
{\f188\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Tahoma (Hebrew);}{\f189\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Tahoma (Arabic);}{\f190\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Tahoma Baltic;}
{\f191\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Tahoma (Vietnamese);}{\f192\fswiss\fcharset222\fprq2{\*\panose 00000000000000000000}Tahoma (Thai);}{\f193\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Times CE;}
{\f194\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Times Cyr;}{\f195\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Times Greek;}{\f196\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Times Tur;}
{\f197\froman\fcharset177\fprq2{\*\panose 00000000000000000000}Times (Hebrew);}{\f198\froman\fcharset178\fprq2{\*\panose 00000000000000000000}Times (Arabic);}{\f199\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Times Baltic;}
{\f200\froman\fcharset163\fprq2{\*\panose 00000000000000000000}Times (Vietnamese);}{\f201\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Trebuchet MS CE;}{\f202\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Trebuchet MS Tur;}
{\f203\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Impact CE;}{\f204\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Impact Cyr;}{\f205\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Impact Greek;}
{\f206\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Impact Tur;}{\f207\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Impact Baltic;}{\f208\fscript\fcharset238\fprq2{\*\panose 00000000000000000000}Comic Sans MS CE;}
{\f209\fscript\fcharset204\fprq2{\*\panose 00000000000000000000}Comic Sans MS Cyr;}{\f210\fscript\fcharset161\fprq2{\*\panose 00000000000000000000}Comic Sans MS Greek;}{\f211\fscript\fcharset162\fprq2{\*\panose 00000000000000000000}Comic Sans MS Tur;}
{\f212\fscript\fcharset186\fprq2{\*\panose 00000000000000000000}Comic Sans MS Baltic;}{\f213\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Arial Black CE;}{\f214\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Arial Black Cyr;}
{\f215\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Arial Black Greek;}{\f216\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Arial Black Tur;}{\f217\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Arial Black Baltic;}
{\f218\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Verdana CE;}{\f219\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Verdana Cyr;}{\f220\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Verdana Greek;}
{\f221\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Verdana Tur;}{\f222\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Verdana Baltic;}{\f223\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Verdana (Vietnamese);}
{\f224\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Georgia CE;}{\f225\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Georgia Cyr;}{\f226\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Georgia Greek;}
{\f227\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Georgia Tur;}{\f228\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Georgia Baltic;}{\f229\fmodern\fcharset238\fprq1{\*\panose 00000000000000000000}Lucida Console CE;}
{\f230\fmodern\fcharset204\fprq1{\*\panose 00000000000000000000}Lucida Console Cyr;}{\f231\fmodern\fcharset161\fprq1{\*\panose 00000000000000000000}Lucida Console Greek;}{\f232\fmodern\fcharset162\fprq1{\*\panose 00000000000000000000}Lucida Console Tur;}
{\f233\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode CE;}{\f234\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode Cyr;}
{\f235\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode Greek;}{\f236\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode Tur;}
{\f237\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode (Hebrew);}{\f238\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Palatino Linotype CE;}
{\f239\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Palatino Linotype Cyr;}{\f240\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Palatino Linotype Greek;}
{\f241\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Palatino Linotype Tur;}{\f242\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Palatino Linotype Baltic;}
{\f243\froman\fcharset163\fprq2{\*\panose 00000000000000000000}Palatino Linotype (Vietnamese);}{\f244\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif CE;}
{\f245\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif Cyr;}{\f246\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif Greek;}
{\f247\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif Tur;}{\f248\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif (Hebrew);}
{\f249\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif (Arabic);}{\f250\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif Baltic;}
{\f251\fswiss\fcharset222\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif (Thai);}{\f252\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Arial Narrow CE;}{\f253\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Arial Narrow Cyr;}
{\f254\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Arial Narrow Greek;}{\f255\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Arial Narrow Tur;}{\f256\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Arial Narrow Baltic;}
{\f257\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Book Antiqua CE;}{\f258\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Book Antiqua Cyr;}{\f259\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Book Antiqua Greek;}
{\f260\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Book Antiqua Tur;}{\f261\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Book Antiqua Baltic;}{\f262\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Bookman Old Style CE;}
{\f263\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Bookman Old Style Cyr;}{\f264\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Bookman Old Style Greek;}
{\f265\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Bookman Old Style Tur;}{\f266\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Bookman Old Style Baltic;}
{\f267\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Century Gothic CE;}{\f268\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Century Gothic Cyr;}{\f269\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Century Gothic Greek;}
{\f270\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Century Gothic Tur;}{\f271\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Century Gothic Baltic;}{\f272\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Garamond CE;}
{\f273\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Garamond Cyr;}{\f274\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Garamond Greek;}{\f275\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Garamond Tur;}
{\f276\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Garamond Baltic;}{\f277\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Haettenschweiler CE;}{\f278\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Haettenschweiler Cyr;}
{\f279\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Haettenschweiler Greek;}{\f280\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Haettenschweiler Tur;}
{\f281\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Haettenschweiler Baltic;}{\f282\fscript\fcharset238\fprq2{\*\panose 00000000000000000000}Monotype Corsiva CE;}
{\f283\fscript\fcharset204\fprq2{\*\panose 00000000000000000000}Monotype Corsiva Cyr;}{\f284\fscript\fcharset161\fprq2{\*\panose 00000000000000000000}Monotype Corsiva Greek;}
{\f285\fscript\fcharset162\fprq2{\*\panose 00000000000000000000}Monotype Corsiva Tur;}{\f286\fscript\fcharset186\fprq2{\*\panose 00000000000000000000}Monotype Corsiva Baltic;}
}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}
{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}
{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier{\*\falt Courier New};}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}
{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}
{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York{\*\falt Times New Roman};}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}
{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}
{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}
{\f20\froman\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt ?l?r ??_fc};}{\f21\fnil\fcharset129\fprq1{\*\panose 02030600000101010101}Batang{\*\falt \'ac\'ecoUAA};}
{\f22\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}SimSun{\*\falt ??\'c1\'a4??};}{\f23\fnil\fcharset136\fprq2{\*\panose 02010601000101010101}PMingLiU{\*\falt !Ps2OcuAe};}
{\f24\fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt ?l?r ?S?V?b?N};}{\f25\fmodern\fcharset129\fprq1{\*\panose 020b0600000101010101}Dotum{\*\falt \'c1\'eai\'c1\'e8\'c1_\'c1\'e8?o};}
{\f26\fmodern\fcharset134\fprq1{\*\panose 02010600030101010101}SimHei{\*\falt o\'c1\'a42\'c1\'a4??};}{\f27\fmodern\fcharset136\fprq1{\*\panose 02010609000101010101}MingLiU{\*\falt 2OcuAe};}
{\f28\froman\fcharset128\fprq1{\*\panose 02020609040305080305}Mincho{\*\falt ??_fc};}{\f29\froman\fcharset129\fprq1{\*\panose 020b0600000101010101}Gulim{\*\falt \'a2\'a8\'ac\u339 \'cf\'c1\'a4u\'c1\'e8\'c1_\'ac\'ec\'c1\'cb};}
{\f30\froman\fcharset222\fprq2{\*\panose 02020603050405020304}Angsana New;}{\f31\froman\fcharset222\fprq2{\*\panose 020b0304020202020204}Cordia New;}{\f32\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Mangal;}
{\f33\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Latha;}{\f34\froman\fcharset256\fprq2{\*\panose 010a0502050306030303}Sylfaen;}{\f35\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Vrinda;}
{\f36\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Raavi;}{\f37\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Shruti;}{\f38\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Sendnya;}
{\f39\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Gautami;}{\f40\froman\fcharset77\fprq2{\*\panose 00000400000000000000}Tunga;}{\f41\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Estrangella Edessa;}
{\f42\froman\fcharset256\fprq2{\*\panose 00000000000000000000}Arial Unicode MS;}{\f43\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f44\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}
{\f45\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Dingbats;}{\f46\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}N Helvetica Narrow;}{\f47\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}
{\f48\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Chancery;}{\f49\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}New Century Schlbk;}{\f50\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}LockFont;}
{\f51\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Mishawaka Bold;}{\f52\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Mishawaka;}{\f53\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}
{\f54\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f55\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f56\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}
{\f57\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f58\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f59\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}
{\f60\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f61\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f62\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Bernhard Modern Roman;}
{\f63\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Myriad Roman;}{\f64\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Myriad Bold;}{\f65\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Myriad Italic;}
{\f66\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Myriad BoldItalic;}{\f67\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f68\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}
{\f69\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Tekton Bold;}{\f70\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f71\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}
{\f72\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Klang MT;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Script MT Bold;}{\f74\fnil\fcharset256\fprq2{\*\panose 02010601060101010103}Old English Text MT;}
{\f75\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}New Berolina MT;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Bodoni MT Ultra Bold;}{\f77\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Arial MT Condensed Light;}
{\f78\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Paisley ICG 01;}{\f79\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Paisley ICG 01 Alt;}{\f80\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Paisley ICG 02;}
{\f81\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Paisley ICG 02 Alt;}{\f82\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f83\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}UltraCondensedSansTwo;}
{\f84\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Decotura ICG;}{\f85\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Decotura ICG Inline;}{\f86\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Boca Raton ICG;}
{\f87\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Boca Raton ICG Solid;}{\f88\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Fajita ICG Mild;}{\f89\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Fajita ICG Picante;}
{\f90\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Wonton ICG;}{\f91\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Tekton;}{\f92\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}NuptialScript;}
{\f93\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Trajan Bold;}{\f94\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Trajan;}{\f95\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Copperplate33bc;}
{\f96\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Copperplate31ab;}{\f97\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f98\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}UltraCondensedSansOne;}
{\f99\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Chilada ICG Uno;}{\f100\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Chilada ICG Dos;}{\f101\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Chilada ICG Tres;}
{\f102\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Chilada ICG Cuatro;}{\f103\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Litterbox ICG;}{\f104\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Whimsy ICG;}
{\f105\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Whimsy ICG Bold;}{\f106\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Whimsy ICG Heavy;}{\f107\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Franklin Gothic No.2;}
{\f108\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Franklin Gothic Condensed;}{\f109\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}AGaramond;}{\f110\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}AGaramond Italic;}
{\f111\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}AGaramond BoldItalic;}{\f112\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}AGaramond Bold;}{\f113\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}VAG Rounded Thin;}
{\f114\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}VAG Rounded Light;}{\f115\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}VAG Rounded Bold;}{\f116\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}VAG Rounded Black;}
{\f117\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}OCRA;}{\f118\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f119\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}BI Prestige Elite BoldSlanted;}
{\f120\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}B Prestige Elite Bold;}{\f121\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}I Prestige Elite Slanted;}{\f122\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Prestige Elite;}
{\f123\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Park Avenue;}{\f124\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Goudy;}{\f125\fnil\fcharset256\fprq2{\*\panose 020b0806030204020203}Gill Sans Condensed Bold;}
{\f126\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f127\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Alleycat ICG;}{\f128\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Alleycat ICG Bold;}
{\f129\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Saturday Sans ICG;}{\f130\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Saturday Sans ICG Bold;}{\f131\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}
{\f132\fnil\fcharset256\fprq2 VT100;}{\f133\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}TTYFont;}{\f134\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}{\f135\fmodern\fcharset256\fprq1{\*\panose 020b0609040504020204}Lucida Console;}
{\f136\fswiss\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f137\froman\fcharset256\fprq2{\*\panose 02040502050505030304}Palatino Linotype;}{\f138\fswiss\fcharset256\fprq2{\*\panose 020b0604020202020204}Microsoft Sans Serif;}
{\f139\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f140\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f141\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}
{\f142\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f143\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f144\fswiss\fcharset256\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}
{\f145\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Outlook;}{\f146\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f147\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}
{\f148\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f149\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif (Vietnames;}{\f150\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Times New Roman CE;}
{\f151\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Times New Roman Cyr;}{\f152\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Times New Roman Greek;}{\f153\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Times New Roman Tur;}
{\f154\froman\fcharset177\fprq2{\*\panose 00000000000000000000}Times New Roman (Hebrew);}{\f155\froman\fcharset178\fprq2{\*\panose 00000000000000000000}Times New Roman (Arabic);}
{\f156\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Times New Roman Baltic;}{\f157\froman\fcharset163\fprq2{\*\panose 00000000000000000000}Times New Roman (Vietnamese);}{\f158\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Arial CE;}
{\f159\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Arial Cyr;}{\f160\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Arial Greek;}{\f161\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Arial Tur;}
{\f162\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Arial (Hebrew);}{\f163\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Arial (Arabic);}{\f164\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Arial Baltic;}
{\f165\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Arial (Vietnamese);}{\f166\fmodern\fcharset238\fprq1{\*\panose 00000000000000000000}Courier New CE;}{\f167\fmodern\fcharset204\fprq1{\*\panose 00000000000000000000}Courier New Cyr;}
{\f168\fmodern\fcharset161\fprq1{\*\panose 00000000000000000000}Courier New Greek;}{\f169\fmodern\fcharset162\fprq1{\*\panose 00000000000000000000}Courier New Tur;}{\f170\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Courier New (Hebrew);}
{\f171\fmodern\fcharset178\fprq1{\*\panose 00000000000000000000}Courier New (Arabic);}{\f172\fmodern\fcharset186\fprq1{\*\panose 00000000000000000000}Courier New Baltic;}
{\f173\fmodern\fcharset163\fprq1{\*\panose 00000000000000000000}Courier New (Vietnamese);}{\f174\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Helvetica CE;}{\f175\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Helvetica Cyr;}
{\f176\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Helvetica Greek;}{\f177\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Helvetica Tur;}{\f178\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Helvetica (Hebrew);}
{\f179\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Helvetica (Arabic);}{\f180\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Helvetica Baltic;}{\f181\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Helvetica (Vietnamese);}
{\f182\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Sylfaen Cyr;}{\f183\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Sylfaen Greek;}{\f184\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Tahoma CE;}
{\f185\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Tahoma Cyr;}{\f186\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Tahoma Greek;}{\f187\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Tahoma Tur;}
{\f188\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Tahoma (Hebrew);}{\f189\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Tahoma (Arabic);}{\f190\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Tahoma Baltic;}
{\f191\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Tahoma (Vietnamese);}{\f192\fswiss\fcharset222\fprq2{\*\panose 00000000000000000000}Tahoma (Thai);}{\f193\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Times CE;}
{\f194\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Times Cyr;}{\f195\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Times Greek;}{\f196\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Times Tur;}
{\f197\froman\fcharset177\fprq2{\*\panose 00000000000000000000}Times (Hebrew);}{\f198\froman\fcharset178\fprq2{\*\panose 00000000000000000000}Times (Arabic);}{\f199\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Times Baltic;}
{\f200\froman\fcharset163\fprq2{\*\panose 00000000000000000000}Times (Vietnamese);}{\f201\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Trebuchet MS CE;}{\f202\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Trebuchet MS Tur;}
{\f203\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Impact CE;}{\f204\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Impact Cyr;}{\f205\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Impact Greek;}
{\f206\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Impact Tur;}{\f207\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Impact Baltic;}{\f208\fscript\fcharset238\fprq2{\*\panose 00000000000000000000}Comic Sans MS CE;}
{\f209\fscript\fcharset204\fprq2{\*\panose 00000000000000000000}Comic Sans MS Cyr;}{\f210\fscript\fcharset161\fprq2{\*\panose 00000000000000000000}Comic Sans MS Greek;}{\f211\fscript\fcharset162\fprq2{\*\panose 00000000000000000000}Comic Sans MS Tur;}
{\f212\fscript\fcharset186\fprq2{\*\panose 00000000000000000000}Comic Sans MS Baltic;}{\f213\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Arial Black CE;}{\f214\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Arial Black Cyr;}
{\f215\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Arial Black Greek;}{\f216\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Arial Black Tur;}{\f217\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Arial Black Baltic;}
{\f218\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Verdana CE;}{\f219\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Verdana Cyr;}{\f220\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Verdana Greek;}
{\f221\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Verdana Tur;}{\f222\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Verdana Baltic;}{\f223\fswiss\fcharset163\fprq2{\*\panose 00000000000000000000}Verdana (Vietnamese);}
{\f224\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Georgia CE;}{\f225\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Georgia Cyr;}{\f226\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Georgia Greek;}
{\f227\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Georgia Tur;}{\f228\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Georgia Baltic;}{\f229\fmodern\fcharset238\fprq1{\*\panose 00000000000000000000}Lucida Console CE;}
{\f230\fmodern\fcharset204\fprq1{\*\panose 00000000000000000000}Lucida Console Cyr;}{\f231\fmodern\fcharset161\fprq1{\*\panose 00000000000000000000}Lucida Console Greek;}{\f232\fmodern\fcharset162\fprq1{\*\panose 00000000000000000000}Lucida Console Tur;}
{\f233\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode CE;}{\f234\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode Cyr;}
{\f235\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode Greek;}{\f236\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode Tur;}
{\f237\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Lucida Sans Unicode (Hebrew);}{\f238\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Palatino Linotype CE;}
{\f239\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Palatino Linotype Cyr;}{\f240\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Palatino Linotype Greek;}
{\f241\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Palatino Linotype Tur;}{\f242\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Palatino Linotype Baltic;}
{\f243\froman\fcharset163\fprq2{\*\panose 00000000000000000000}Palatino Linotype (Vietnamese);}{\f244\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif CE;}
{\f245\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif Cyr;}{\f246\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif Greek;}
{\f247\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif Tur;}{\f248\fswiss\fcharset177\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif (Hebrew);}
{\f249\fswiss\fcharset178\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif (Arabic);}{\f250\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif Baltic;}
{\f251\fswiss\fcharset222\fprq2{\*\panose 00000000000000000000}Microsoft Sans Serif (Thai);}{\f252\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Arial Narrow CE;}{\f253\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Arial Narrow Cyr;}
{\f254\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Arial Narrow Greek;}{\f255\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Arial Narrow Tur;}{\f256\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Arial Narrow Baltic;}
{\f257\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Book Antiqua CE;}{\f258\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Book Antiqua Cyr;}{\f259\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Book Antiqua Greek;}
{\f260\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Book Antiqua Tur;}{\f261\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Book Antiqua Baltic;}{\f262\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Bookman Old Style CE;}
{\f263\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Bookman Old Style Cyr;}{\f264\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Bookman Old Style Greek;}
{\f265\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Bookman Old Style Tur;}{\f266\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Bookman Old Style Baltic;}
{\f267\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Century Gothic CE;}{\f268\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Century Gothic Cyr;}{\f269\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Century Gothic Greek;}
{\f270\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Century Gothic Tur;}{\f271\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Century Gothic Baltic;}{\f272\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Garamond CE;}
{\f273\froman\fcharset204\fprq2{\*\panose 00000000000000000000}Garamond Cyr;}{\f274\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Garamond Greek;}{\f275\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Garamond Tur;}
{\f276\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Garamond Baltic;}{\f277\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Haettenschweiler CE;}{\f278\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Haettenschweiler Cyr;}
{\f279\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Haettenschweiler Greek;}{\f280\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Haettenschweiler Tur;}
{\f281\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Haettenschweiler Baltic;}{\f282\fscript\fcharset238\fprq2{\*\panose 00000000000000000000}Monotype Corsiva CE;}
{\f283\fscript\fcharset204\fprq2{\*\panose 00000000000000000000}Monotype Corsiva Cyr;}{\f284\fscript\fcharset161\fprq2{\*\panose 00000000000000000000}Monotype Corsiva Greek;}
{\f285\fscript\fcharset162\fprq2{\*\panose 00000000000000000000}Monotype Corsiva Tur;}{\f286\fscript\fcharset186\fprq2{\*\panose 00000000000000000000}Monotype Corsiva Baltic;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\adjustright \f12\fs20\cgrid \snext0 Normal;}{\s1\sb240\sa60\keepn\nowidctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning32\cgrid \sbasedon0 \snext0 heading 1;}{\*\cs10 
\additive Default Paragraph Font;}{\s15\nowidctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\fs20\cgrid \sbasedon0 \snext15 footer;}{\s16\nowidctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\fs20\cgrid \sbasedon0 \snext16 header;}}{\*\revtbl {Unknown;}}{\info{\title CBFlib}
{\subject An API for CBF/imgCIF}{\author Paul J. Ellis,Herbert J.  Bernstein}{\operator Herbert J. Bernstein}{\creatim\yr2002\mo11\dy7\hr9\min50}{\revtim\yr2002\mo11\dy7\hr9\min50}{\version2}{\edmins2}{\nofpages127}{\nofwords16684}{\nofchars95100}
{\*\company SSRL}{\nofcharsws116789}{\vern115}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\fracwidth\viewkind1\viewscale100 \fet0\sectd \sbknone\pgnlcrm\linex0\endnhere\titlepg\sectdefaultcl {\footer 
\pard\plain \s15\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\fs20\cgrid {\f4 CBFlib 0.7.2.3\tab \tab Page - \chpgn }{
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\adjustright \f12\fs20\cgrid {
{\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex68\picscaley66\piccropl0\piccropr0\piccropt0\piccropb0
\picw308\pich159\picwgoal6160\pichgoal3180\macpict\bliptag1505370863\blipupi72{\*\blipuid 59ba22efea4c38442473a01b6fd86019}1ce60000000000a00135001102ff0c00fffe000000470000004700000000000000a0013500000000001e0001000a0000000000a001350008000900130001aa55
aa55aa55aa5980040000000000080008000000000000000000480000004800000000000100010001000000000ce8ad480000000000000f47000000010000fcfc
f3f305050001ffffffffffff55000000aa00000055000000aa00000055000000aa00000055000000aa0000000071008e006600e8007d00ff006600f4006900f2
006700f0006b00ef006a00ec006d00ed006e00ea007000eb007200e8007300eb007600e9007700ed007900ec007900ef007c00f0007a00f2007d00f4007a00f5
007c00f8007900f8007900fb007700fb007600fe007400fc007200ff007000fc006e00fe006d00fb006a00fb006b00f9006800f8006900f6006600f400a100b6
00040001000100a100b600040001000400a100b600040001000100a100b6000400010004001a8080d5d5f4f4000800080009ffffffffffffffff0070008e0066
00e8007d00ff006600f4006900f2006700f0006b00ef006a00ec006d00ed006e00ea007000eb007200e8007300eb007600e9007700ed007900ec007900ef007c
00f0007a00f2007d00f4007a00f5007c00f8007900f8007900fb007700fb007600fe007400fc007200ff007000fc006e00fe006d00fb006a00fb006b00f90068
00f8006900f6006600f4001a0000000000000008000900130001aa55aa55aa55aa59800400000000000800080000000000000000004800000048000000000001
00010001000000000ce8ad480000000000000f48000000010000fcfcf3f305050001ffffffffffff880000002200000088000000220000008800000022000000
88000000220000000071008e005400cf007f00fb005400e5005900e2005600dd005c00dc005b00d6006100d7006200d2006700d5006a00cf006d00d4007200d1
007300d7007800d6007800dc007d00dd007a00e2007f00e5007a00e9007d00ee007800ef007800f4007300f3007200f9006d00f6006a00fb006700f6006200f9
006100f3005b00f4005c00ef005700ee005a00e9005400e500a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004
001a4141c0c0efef000800080009ffffffffffffffff0070008e005400cf007f00fb005400e5005900e2005600dd005c00dc005b00d6006100d7006200d20067
00d5006a00cf006d00d4007200d1007300d7007800d6007800dc007d00dd007a00e2007f00e5007a00e9007d00ee007800ef007800f4007300f3007200f9006d
00f6006a00fb006700f6006200f9006100f3005b00f4005c00ef005700ee005a00e9005400e5001a0000000000000008000900130001aa55aa55aa55aa598004
0000000000080008000000000000000000480000004800000000000100010001000000000ce8ad480000000000000f49000000010000fcfcf3f305050001ffff
ffffffff00000000110000000000000044000000000000001100000000000000440000000071008e002d00a2008000f5002d00cb003700c5003100bc003c00ba
003a00af004500b1004700a7005100ac005700a2005d00ac006600a6006900b1007300af007200ba007c00bc007700c5008000cb007700d1007d00da007200dd
007300e8006a00e5006700f1005e00eb005700f5005100ec004700f2004500e5003a00e8003c00dd003200db003700d2002d00cb00a100b600040001000100a1
00b600040001000400a100b600040001000100a100b6000400010004001a2121b5b5ecec000800080009ffffffffffffffff0070008e002d00a2008000f5002d
00cb003700c5003100bc003c00ba003a00af004500b1004700a7005100ac005700a2005d00ac006600a6006900b1007300af007200ba007c00bc007700c50080
00cb007700d1007d00da007200dd007300e8006a00e5006700f1005e00eb005700f5005100ec004700f2004500e5003a00e8003c00dd003200db003700d2002d
00cb001afcfcf3f30505000800090071008e00000045009e00e3000000950011008900070077001c00720019005f002c00610031004e00420058004f0045005c
0057006d004c007200610086005e0083007200970077008d0088009e0095008d00a0009900b2008400b6008600ca007300c7006e00dc005c00d0004f00e30043
00d1003200de002d00c7001900cb001c00b7000900b3001200a10000009500a100b600040001000100a100b600040001000400a100b600040001000100a100b6
000400010004001a0202ababeaea000800080070008e00000045009e00e3000000950011008900070077001c00720019005f002c00610031004e00420058004f
0045005c0057006d004c007200610086005e0083007200970077008d0088009e0095008d00a0009900b2008400b6008600ca007300c7006e00dc005c00d0004f
00e3004300d1003200de002d00c7001900cb001c00b7000900b3001200a100000095001a0000000000000008000900130001aa55aa55aa55aa59800400000000
00080008000000000000000000480000004800000000000100010001000000000ce8ad480000000000000f4a000000010000fcfcf3f305050001ffffffffffff
2200000088000000220000008800000022000000880000002200000088000000007100220034005b006b0076003f007600340065004e005b006b006500610076
003f007600a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004000800080009ffffffffffffffff007000220034
005b006b0076003f007600340065004e005b006b006500610076003f00760008000900130001aa55aa55aa55aa59800400000000000800080000000000000000
00480000004800000000000100010001000000000ce8ad480000000000000f4b000000010000fcfcf3f305050001ffffffffffff220000008800000022000000
880000002200000088000000220000008800000000710026002c0075007400b2002c0094004000750061007500740094006100b2003f00b2002c009400a100b6
00040001000100a100b600040001000400a100b600040001000100a100b6000400010004000800080009ffffffffffffffff00700026002c0075007400b2002c
0094004000750061007500740094006100b2003f00b2002c0094001afcfcf3f305050008000900710022003400b2006b00cd003f00b2003400c4004e00cd006b
00c4006100b2003f00b200a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004001a000000000000000800080070
0022003400b2006b00cd003f00b2003400c4004e00cd006b00c4006100b2003f00b20008000900130001aa55aa55aa55aa598004000000000008000800000000
0000000000480000004800000000000100010001000000000ce8ad480000000000000f4c000000010000fcfcf3f305050001ffffffffffff2200000088000000
2200000088000000220000008800000022000000880000000071002200190094004000c5002e009400190094002000b2003600c5004000b3002e009400a100b6
00040001000100a100b600040001000400a100b600040001000100a100b6000400010004000800080009ffffffffffffffff0070002200190094004000c5002e
009400190094002000b2003600c5004000b3002e00940008000900130001aa55aa55aa55aa598004000000000008000800000000000000000048000000480000
0000000100010001000000000ce8ad480000000000000f4d000000010000fcfcf3f305050001ffffffffffff55000000aa00000055000000aa00000055000000
aa00000055000000aa000000007100220019006400400095002e009500190095002000780036006400400076002e009500a100b600040001000100a100b60004
0001000400a100b600040001000100a100b6000400010004000800080009ffffffffffffffff007000220019006400400095002e009500190095002000780036
006400400076002e0095001afcfcf3f30505000800090071002200600093008700c40073009300870093008100b1006b00c4006000b20073009300a100b60004
0001000100a100b600040001000400a100b600040001000100a100b6000400010004001a000000000000000800080070002200600093008700c4007300930087
0093008100b1006b00c4006000b200730093001afcfcf3f3050500080009007100220060006300870094007300940087009400810077006b0063006000750073
009400a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004001a0000000000000008000800700022006000630087
0094007300940087009400810077006b00630060007500730094001afcfcf3f3050500310017002f0085009400a100b600040001000100a100b6000400010004
001a00000000d4d40038001affffffffffff003100290038003c004200a100b600040001000100a100b6000400010004001a00000000d4d40038001affffffff
ffff00310029004a003c005500a100b600040001000100a100b6000400010004001a00000000d4d40038001affffffffffff00310044004a0058005500a100b6
00040001000100a100b6000400010004001a00000000d4d40038001affffffffffff00310044005d0058006700a100b600040001000100a100b6000400010004
001a00000000d4d40038001affffffffffff00310060004a0073005500a100b600040001000100a100b6000400010004001a00000000d4d40038001affffffff
ffff00310060005d0073006700a100b600040001000100a100b6000400010004001a00000000d4d40038001affffffffffff00310044006f0058007900a100b6
00040001000100a100b6000400010004001a00000000d4d40038001affffffffffff0031006000780073008200a100b600040001000100a100b6000400010004
001a00000000d4d40038001a0000000000000008000900130001aa55aa55aa55aa59800400000000000800080000000000000000004800000048000000000001
00010001000000000ce8ad480000000000000f4e000000010000fcfcf3f305050001ffffffffffff55000000aa00000055000000aa00000055000000aa000000
55000000aa0000000071008e006500e8007c00ff006500f4006800f2006600f0006a00ef006900ec006c00ed006d00ea006f00eb007100e8007200eb007500e9
007600ed007800ec007800ef007b00f0007900f2007c00f4007900f5007b00f8007800f8007800fb007600fb007500fe007300fc007100ff006f00fc006d00fe
006c00fb006900fb006a00f9006700f8006800f6006500f400a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004
001a8080d5d5f4f4000800080009ffffffffffffffff0070008e006500e8007c00ff006500f4006800f2006600f0006a00ef006900ec006c00ed006d00ea006f
00eb007100e8007200eb007500e9007600ed007800ec007800ef007b00f0007900f2007c00f4007900f5007b00f8007800f8007800fb007600fb007500fe0073
00fc007100ff006f00fc006d00fe006c00fb006900fb006a00f9006700f8006800f6006500f4001a0000000000000008000900130001aa55aa55aa55aa598004
0000000000080008000000000000000000480000004800000000000100010001000000000ce8ad480000000000000f4f000000010000fcfcf3f305050001ffff
ffffffff88000000220000008800000022000000880000002200000088000000220000000071008e005400cf007f00fb005400e5005900e2005600dd005c00dc
005b00d6006100d7006200d2006700d5006a00cf006d00d4007200d1007300d7007800d6007800dc007d00dd007a00e2007f00e5007a00e9007d00ee007800ef
007800f4007300f3007200f9006d00f6006a00fb006700f6006200f9006100f3005b00f4005c00ef005700ee005a00e9005400e500a100b600040001000100a1
00b600040001000400a100b600040001000100a100b6000400010004001a4141c0c0efef000800080009ffffffffffffffff0070008e005400cf007f00fb0054
00e5005900e2005600dd005c00dc005b00d6006100d7006200d2006700d5006a00cf006d00d4007200d1007300d7007800d6007800dc007d00dd007a00e2007f
00e5007a00e9007d00ee007800ef007800f4007300f3007200f9006d00f6006a00fb006700f6006200f9006100f3005b00f4005c00ef005700ee005a00e90054
00e5001a0000000000000008000900130001aa55aa55aa55aa598004000000000008000800000000000000000048000000480000000000010001000100000000
0ce8ad480000000000000f50000000010000fcfcf3f305050001ffffffffffff0000000011000000000000004400000000000000110000000000000044000000
0071008e002d00a2008000f5002d00cb003700c5003100bc003c00ba003a00af004500b1004700a7005100ac005700a2005d00ac006600a6006900b1007300af
007200ba007c00bc007700c5008000cb007700d1007d00da007200dd007300e8006a00e5006700f1005e00eb005700f5005100ec004700f2004500e5003a00e8
003c00dd003200db003700d2002d00cb00a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004001a2121b5b5ecec
000800080009ffffffffffffffff0070008e002d00a2008000f5002d00cb003700c5003100bc003c00ba003a00af004500b1004700a7005100ac005700a2005d
00ac006600a6006900b1007300af007200ba007c00bc007700c5008000cb007700d1007d00da007200dd007300e8006a00e5006700f1005e00eb005700f50051
00ec004700f2004500e5003a00e8003c00dd003200db003700d2002d00cb001afcfcf3f30505000800090071008e00000045009e00e300000095001100890007
0077001c00720019005f002c00610031004e00420058004f0045005c0057006d004c007200610086005e0083007200970077008d0088009e0095008d00a00099
00b2008400b6008600ca007300c7006e00dc005c00d0004f00e3004300d1003200de002d00c7001900cb001c00b7000900b3001200a10000009500a100b60004
0001000100a100b600040001000400a100b600040001000100a100b6000400010004001a0202ababeaea000800080070008e00000045009e00e3000000950011
008900070077001c00720019005f002c00610031004e00420058004f0045005c0057006d004c007200610086005e0083007200970077008d0088009e0095008d
00a0009900b2008400b6008600ca007300c7006e00dc005c00d0004f00e3004300d1003200de002d00c7001900cb001c00b7000900b3001200a100000095001a
0000000000000008000900130001aa55aa55aa55aa5980040000000000080008000000000000000000480000004800000000000100010001000000000ce8ad48
0000000000000f51000000010000fcfcf3f305050001ffffffffffff220000008800000022000000880000002200000088000000220000008800000000710022
0034005b006b0076003f007600340065004e005b006b006500610076003f007600a100b600040001000100a100b600040001000400a100b600040001000100a1
00b6000400010004000800080009ffffffffffffffff007000220034005b006b0076003f007600340065004e005b006b006500610076003f0076000800090013
0001aa55aa55aa55aa5980040000000000080008000000000000000000480000004800000000000100010001000000000ce8ad480000000000000f5200000001
0000fcfcf3f305050001ffffffffffff220000008800000022000000880000002200000088000000220000008800000000710026002b0075007300b2002b0094
003f00750060007500730094006000b2003e00b2002b009400a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004
000800080009ffffffffffffffff00700026002b0075007300b2002b0094003f00750060007500730094006000b2003e00b2002b0094001afcfcf3f305050008
000900710022003300b2006a00cd003e00b2003300c4004d00cd006a00c4006000b2003e00b200a100b600040001000100a100b600040001000400a100b60004
0001000100a100b6000400010004001a0000000000000008000800700022003300b2006a00cd003e00b2003300c4004d00cd006a00c4006000b2003e00b20008
000900130001aa55aa55aa55aa5980040000000000080008000000000000000000480000004800000000000100010001000000000ce8ad480000000000000f53
000000010000fcfcf3f305050001ffffffffffff22000000880000002200000088000000220000008800000022000000880000000071002200180093003f00c4
002d009300180093001f00b1003500c4003f00b2002d009300a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004
000800080009ffffffffffffffff0070002200180093003f00c4002d009300180093001f00b1003500c4003f00b2002d00930008000900130001aa55aa55aa55
aa5980040000000000080008000000000000000000480000004800000000000100010001000000000ce8ad480000000000000f54000000010000fcfcf3f30505
0001ffffffffffff55000000aa00000055000000aa00000055000000aa00000055000000aa0000000071002200180064003f0095002d009500180095001f0078
00350064003f0076002d009500a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004000800080009ffffffffffff
ffff0070002200180064003f0095002d009500180095001f007800350064003f0076002d0095001afcfcf3f305050008000900710022005f0093008600c40072
009300860093008000b1006a00c4005f00b20072009300a100b600040001000100a100b600040001000400a100b600040001000100a100b6000400010004001a
0000000000000008000800700022005f0093008600c40072009300860093008000b1006a00c4005f00b200720093001afcfcf3f305050008000900710022005f
006300860094007200940086009400800077006a0063005f00750072009400a100b600040001000100a100b600040001000400a100b600040001000100a100b6
000400010004001a0000000000000008000800700022005f006300860094007200940086009400800077006a0063005f007500720094001afcfcf3f305050031
0016002f0084009400a100b600040001000100a100b6000400010004001a00000000d4d40038001affffffffffff003100280038003b004200a100b600040001
000100a100b6000400010004001a00000000d4d40038001affffffffffff00310028004a003b005500a100b600040001000100a100b6000400010004001a0000
0000d4d40038001affffffffffff00310043004a0057005500a100b600040001000100a100b6000400010004001a00000000d4d40038001affffffffffff0031
0043005d0057006700a100b600040001000100a100b6000400010004001a00000000d4d40038001affffffffffff0031005f004a0072005500a100b600040001
000100a100b6000400010004001a00000000d4d40038001affffffffffff0031005f005d0072006700a100b600040001000100a100b6000400010004001a0000
0000d4d40038001affffffffffff00310043006f0057007900a100b600040001000100a100b6000400010004001a00000000d4d40038001affffffffffff0031
005f00780072008200a100b600040001000100a100b6000400010004001a00000000d4d40038001afcfcf3f30505002c000c00150948656c7665746963610003
001500040100000d005d002e000400000000002b06730143002943014200002943014600002939016c0000291a01690000291a016200001adddd080806060028006f00010143002943014200002943014600002939016c0000291a01690000291a01620000ff}}{\f4 
\par 
\par }{\b\f4 An API for CBF/imgCIF
\par Crystallographic Binary Files with ASCII Support
\par }{\f4 
\par Version 0.7.3
\par 2 October 2002
\par 
\par 
\par 
\par by
\par 
\par }{\b\f4\fs28 Paul J. Ellis}{\f4 
\par Stanford Synchrotron Radiation Laboratory
\par ellis@ssrl.slac.stanford.edu 
\par 
\par and
\par 
\par }{\b\f4\fs28 Herbert J. Bernstein}{\f4 
\par Bernstein + Sons
\par yaya@bernstein-plus-sons.com 
\par }\pard \widctlpar\adjustright {\f4 
\par 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 Before using this software, please read the following notices for important disclaimers and the IUCr Policy on the Use of the Crystallographic Information File (CIF) and for other important information. 
\par 
\par 
\par 
\par }\pard \qc\widctlpar\adjustright {\b\f4 CBFlib Notices}{\f4 
\par }\pard \widctlpar\adjustright {\f4 
\par The following notice applies to this work as a whole and to the works included within it: 
\par 
\par \tab Creative e
ndeavors depend on the lively exchange of ideas. There are laws and customs which establish rights and responsibilities for authors and the users of what authors create. This notice is not intended to prevent you from using the software and documents in t
h
is package, but to ensure that there are no misunderstandings about terms and conditions of such use.   Please read the following notice carefully. If you do not understand any portion of this notice, please seek appropriate professional legal advice befo
r
e making use of the software and documents included in this software package. In addition to whatever other steps you may be obliged to take to respect the intellectual property rights of the various parties involved, if you do make use of the software an
d documents in this package, please give credit where credit is due by citing this package, its authors and the URL or other source from which you obtained it, or equivalent primary references in the literature with the same authors. 
\par 
\par \tab Some of the software and documents included within this software package are the intellectual property of various parties, and placement in this package does not in any way imply that any such rights have in any way been waived or diminished. 
\par 
\par \tab With respect to any software or documents for which a copyright exists, }{\b\f4 ALL RIGHTS ARE RESERVED TO THE OWNERS OF SUCH COPYRIGHT. }{\f4 
\par 
\par \tab Even though the authors of the various documents and software found here have made a good faith effort to ensure that the documents are correct and that t
he software performs according to its documentation, and we would greatly appreciate hearing of any problems you may encounter, the programs and documents any files created by the programs are provided **AS IS** without any warranty as to correctness, mer
chantability or fitness for any particular or general use.   }{\b\f4 
THE RESPONSIBILITY FOR ANY ADVERSE CONSEQUENCES FROM THE USE OF PROGRAMS OR DOCUMENTS OR ANY FILE OR FILES CREATED BY USE OF THE PROGRAMS OR DOCUMENTS LIES SOLELY WITH THE USERS OF THE PROGRAMS OR
 DOCUMENTS OR FILE OR FILES AND NOT WITH AUTHORS OF THE PROGRAMS OR DOCUMENTS.}{\f4  
\par 
\par 
\par }\pard \qc\widctlpar\adjustright {\f4 \page }{\b\f4 The IUCr Policy for the Protection and the Promotion of the STAR File and CIF Standards for Exchanging and Archiving Electronic Data. }{\f4 
\par }\pard \widctlpar\adjustright {\f4\fs18 
\par }{\b\f4 Overview:  }{\f4 The Crystallographic Infor
mation File (CIF)[1] is a standard for information interchange promulgated by the International Union of Crystallography (IUCr). CIF (Hall, Allen & Brown, 1991) is the recommended method for submitting publications to Acta Crystallographica Section C and 
r
eports of crystal structure determinations to other sections of Acta Crystallographica and many other journals. The syntax of a CIF is a subset of the more general STAR File[2] format. The CIF and STAR File approaches are used increasingly in the structur
al sciences for data exchange and archiving, and are having a significant influence on these activities in other fields. }{\f4\fs14 
\par 
\par }{\b\f4 Statement of intent:  }{\f4 The IUCr's interest in the STAR File is as a general data interchange standard for science, and its interest in 
the CIF, a conformant derivative of the STAR File, is as a concise data exchange and archival standard for crystallography and structural science. }{\f4\fs14 
\par 
\par }{\b\f4 Protection of the standards}{\f4 :  To protect the STAR File and the CIF as standards for interchanging and archiving electronic data, the IUCr, on behalf of the scientific community, }{\f4\fs14 
\par 
\par }{\f4 \tab \bullet  holds the copyrights on the standards themselves, }{\f4\fs14 
\par 
\par }{\f4 \tab \bullet  owns the associated trademarks and service marks, and }{\f4\fs14 
\par 
\par }{\f4 \tab \bullet  holds a patent on the STAR File. }{\f4\fs14 
\par 
\par }{\f4 These intellectual property rights relate solely to the interchange formats, not to the data contained therein, nor to the software used in the generation, access or manipulation of the data. }{\f4\fs14 
\par 
\par }{\b\f4 Promotion of the standards}{\f4 :  The sole requirement that the IUCr, in its protective role, imposes on software purporting to process STAR File or CIF data is that the following conditions be met prior to sale or distribution. }{\f4\fs14 
\par 
\par }\pard \li700\widctlpar\adjustright {\f4 \bullet  Software claiming to read files written to either the STAR File or the CIF standard must b
e able to extract the pertinent data from a file conformant to the STAR File syntax, or the CIF syntax, respectively. }{\f4\fs14 
\par 
\par }{\f4 \bullet  Software claiming to write files in either the STAR File, or the CIF, standard must produce files that are conformant to the STAR File syntax, or the CIF syntax, respectively. }{\f4\fs14 
\par 
\par }{\f4 \bullet  Software claiming to read definitions from a specific data dictionary approved by the IUCr must be able to extract any pertinent definition which is conformant to the dictionary definition language (DDL)[3] associated with that dictionary. 
}{\f4\fs14 
\par }\pard \widctlpar\adjustright {\f4\fs14 
\par }{\f4 The IUCr, through its Committee on CIF Standards, will assist any developer to verify that software meets these conformance conditions. }{\f4\fs14 
\par 
\par }{\b\f4 Glossary of terms }{\f4\fs14 
\par 
\par }{\f4 [1] CIF:  is a data file conformant to the file syntax defined at http://www.iucr.org/iucr-top/cif/spec/index.html }{\f4\fs14 
\par 
\par }{\f4 [2] STAR File:  is a data file conformant to the file syntax defined at http://www.iucr.org/iucr-top/cif/spec/star/index.html }{\f4\fs14 
\par 
\par }{\f4 [3] DDL:  is a language used in a data dictionary to define data items in ter
ms of "attributes". Dictionaries currently approved by the IUCr, and the DDL versions used to construct these dictionaries, are listed at http://www.iucr.org/iucr-top/cif/spec/ddl/index.html }{\f4\fs14 
\par 
\par }{\b\f4 Last modified: }{\f4 30 September 2000 
\par IUCr Policy Copyright (C) 2000 International Union of Crystallography 
\par }\pard \qc\widctlpar\adjustright {\b\f4\fs18 \page }{\b\f4 CBFlib V0.1 Notice}{\f4 
\par }\pard \widctlpar\adjustright {\f4 
\par The following Diclaimer Notice applies to CBFlib V0.1, from which this version is derived. 
\par 
\par \tab The items furnished he
rewith were developed under the sponsorship of the U.S. Government. Neither the U.S., nor the U.S. D.O.E., nor the Leland Stanford Junior University, nor their employees, makes any warranty, express or implied, or assumes any liability or responsibility f
o
r accuracy,  completeness or usefulness of any information, apparatus, product or process disclosed, or represents that its use will not infringe privately-owned rights. Mention of any product, its manufacturer, or suppliers shall not, nor is it intended 
to, imply approval, disapproval, or fitness for any particular use. The U.S. and the University at all times retain the right to use and disseminate the furnished items for any purpose whatsoever.
\par 
\par Notice 91 02 01
\par 
\par 
\par 
\par 
\par }\pard \qc\widctlpar\adjustright {\b\f4 CIFPARSE Notice}{\f4 
\par }\pard \widctlpar\adjustright {\f4 
\par Portions of this softw
are are loosely based on the CIFPARSE software package from the NDB at Rutgers University (see http://ndbserver.rutgers.edu/NDB/mmcif/software). CIFPARSE is part of the NDBQUERY application, a program component of the Nucleic Acid Database Project [ H. M.
 
Berman, W. K. Olson, D. L. Beveridge, J. K. Westbrook, A. Gelbin, T. Demeny, S. H. Shieh, A. R. Srinivasan, and B. Schneider. (1992). The Nucleic Acid Database: A Comprehensive Relational Database of Three-Dimensional Structures of Nucleic Acids. Biophys 
J., 63, 751-759.], whose cooperation is gratefully acknowledged, especially in the form of design concepts created by J. Westbrook. 
\par 
\par Please be aware of the following notice in the CIFPARSE API: 
\par 
\par        This software is provided }{\b\f4 WITHOUT WARRANTY OF MERCHAN
TABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR ANY OTHER WARRANTY, EXPRESS OR IMPLIED. RUTGERS MAKE NO REPRESENTATION OR WARRANTY THAT THE SOFTWARE WILL NOT INFRINGE ANY PATENT, COPYRIGHT OR OTHER PROPRIETARY RIGHT.}{\f4  
\par 
\par 
\par }\pard \qc\widctlpar\adjustright {\f4 \page }{\b\f4 MPACK Notice}{\f4 
\par }\pard \widctlpar\adjustright {\f4 
\par Portions of this library are adapted from the "mpack/munpack version 1.5" routines, written by John G. Myers.  Mpack and munpack are utilities for encoding and decoding (respectively) binary files in MIME (Multipurpose
\par Internet Mail Extensions) format mail messages. The mpack software used is (C) Copyright 1993,1994 by Carnegie Mellon University, All Rights Reserved, and is subject to the following notice: 
\par 
\par        Permission to use, copy, modify, distribute, and sell this software and its documentation for any purpose is hereb
y granted without fee, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of Carnegie Mellon University not be used in advertis
i
ng or publicity pertaining to distribution of the software without specific, written prior permission. Carnegie Mellon University makes no representations about the suitability of this software for any purpose. It is provided "as is" without express or im
plied warranty.   }{\b\f4 
CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUE
NTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,  DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.}{\f4  
\par 
\par 
\par }\pard \qc\widctlpar\adjustright {\b\f4 MD5 Notice}{\f4 
\par }\pard \widctlpar\adjustright {\f4 
\par The following notice applies to the message digest software in md5.h and md5.c which are optionally used by this library. To that extent, this library is a work "derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm". 
\par 
\par The software in md5.h and md5.c is Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All rights reserved, and is subject to the following notice: 
\par 
\par        License to copy and use this software is granted provided that it is identified as the "RSA
 Data Security, Inc. MD5 Message-Digest Algorithm" in all material mentioning or referencing this software or this function.   License is also granted to make and use derivative works provided that such works are identified as "derived from the RSA Data S
e
curity, Inc. MD5 Message-Digest Algorithm" in all material mentioning or referencing the derived work.   RSA Data Security, Inc. makes no representations concerning either the merchantability of this software or the suitability of this software for any pa
rticular purpose. It is provided "as is" without express or implied warranty of any kind.   These notices must be retained in any copies of any part of this documentation and/or software. 
\par 
\par }\pard \qc\widctlpar\adjustright {\b\f4 \page Version History}{\f4 
\par }\pard \widctlpar\adjustright {\f4 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx1000\clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx2953\clvertalt\cltxlrtb \cellx8353\pard \widctlpar\intbl\adjustright {\b\f4 Version \cell Date\cell By\cell Description\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx784\clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx2953\clvertalt\cltxlrtb \cellx8353\pard \widctlpar\intbl\adjustright {\f4 0.1\cell Apr. 1998\cell PJE
\cell This was the first CBFlib release. It supported binary CBF files using binary strings. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 0.2\cell Aug. 1998\cell HJB\cell 
This release added ascii imgCIF support using MIME-encoded binary sections, added the option of MIME headers for the binary strings was well. MIME code adapted from mpack 1.5. Added hooks needed for 
\par DDL1-style names without categories. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 0.3\cell Sep. 1998\cell PJE\cell 
This release cleaned up the changes made for version 0.2, allowing multi-threaded use of the code, and removing dependence on the mpack package. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 0.4\cell 
Nov. 1998\cell HJB\cell 
This release merged much of the message digest code into the general file reading and writing to reduce the number of passes. More consistency checking between the MIME header and the binary header was introduced. The size in the MIME hea
der was adjusted to agree with the version 0.2 documentation. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 0.5\cell Dec. 1998\cell PJE\cell 
This release greatly increased the speed of processing by allowing for deferred digest evaluation. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 0.6\cell Jan. 1999\cell HJB\cell 
This release removed the redundant information (binary 
id, size, compression id) from a binary header when there is a MIME header, removed the unused repeat argument, and made the memory allocation for buffering and tables with many rows sensitive to the current memory allocation already used. \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 0.6.1\cell Feb. 2001\cell HP (per HJB)\cell This release fixed a memory leak due to misallocation by size of cbf_handle instead of cbf_handle_struct \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 0.7\cell Mar. 2001\cell PJE\cell This release added high-level instructions based on the imgCIF dictionary version 1.1. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row 
}\pard \widctlpar\intbl\adjustright {\f4 0.7.1\cell Mar. 2001\cell PJE\cell The high-level functions were revised to permit future expansion to files with multiple images. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 0.7.2\cell Apr. 2001\cell HJB\cell Fixup for latest dictionary and to make documentation current\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 0.7.2.1\cell May 2001\cell PJE
\cell This release corrected an if nesting error in the prior mod to cbf_cimple.c.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx784\clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx2953
\clvertalt\cltxlrtb \cellx8353\pard \widctlpar\intbl\adjustright {\f4 0.7.3\cell Oct. 2002\cell PJE\cell 
This release modified cbf_simple.c to reorder image data on read so that the indices are always increasing in memory (this behavior was undefined previously).\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\b\f4 
\par 
\par 
\par 
\par }\pard \qc\widctlpar\adjustright {\b\f4 Known Problems}{\f4 
\par }\pard \widctlpar\adjustright {\f4 
\par This version does not have support for byte-offset or predictor compression. Code is needed to support array sub-sections.  
\par 
\par }{\b\f4 \page }{\b\f4\fs28 Foreword}{\f4 
\par 
\par 
\par In order to work with CBFlib, you need the source code, in the form of a \ldblquote gzipped\rdblquote 
 tar, CBFlib.tar.gz. Uncompress this file. Place it in an otherwise empty directory, and unpack it with tar. You will also need Paul Ellis's sample MAR345 image, example.mar2300, as sample data. This file can also be found at http://biosg1.slac.stanford.e
du/biosg1-users/ellis/Public/. Place that file in the top level directory (one level up from the source code).   Adjust the definition of CC in Makefile to point to your C compiler, and then 
\par 
\par }\pard \li720\widctlpar\adjustright {\b\f4 make all 
\par make tests 
\par }\pard \widctlpar\adjustright {\f4 
\par This release has been tested on an SGI under IRIX 6.4 and on a PowerPC under Linux-ppc 2.1.24. 
\par 
\par We have included examples of CBF/imgCIF files produced by CBFlib, an updated version of John Westbrook's DDL2-compliant CBF Extensions Dictionary, and of Andy Hammersley's CBF definition, updated to become a DRAFT CBF/ImgCIF DEFINITION. 
\par 
\par This is just a proposal. Please be careful about basing any code on this until and unless there has been a general agreement. 
\par \sect }\sectd \sbkodd\pgnlcrm\linex0\endnhere\sectdefaultcl {\footer \pard\plain \s15\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\fs20\cgrid {\f4 CBFlib 0.7.2.3\tab \tab Page - \chpgn 
\par }}\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard \qc\widctlpar\adjustright {\b\f4\fs28 Contents}{\f4 
\par }\pard \widctlpar\adjustright {\f4 
\par }\pard \widctlpar\tx1080\tqr\tx7560\adjustright {\f4 1. Introduction \tab 1
\par 
\par 2. Function descriptions \tab 3
\par 
\par \tab 2.1 General description 
\par \tab 2.1.1 CBF handles 
\par }{\b\f4 \tab }{\f4 2.1.2 CBF goniometer handles
\par }{\b\f4 \tab }{\f4 2.1.3 CBF detector handles
\par \tab 2.1.4 Return values
\par 
\par \tab 2.2 Reading and writing files containing binary sections 
\par \tab 2.2.1 Reading binary sections 
\par \tab 2.2.2 Writing binary sections 
\par \tab 2.2.3 Summary of reading and writing files containing binary sections 
\par 
\par \tab 2.3 Low-level function prototypes \tab 7
\par 
\par \tab 2.3.1 }{\b\f4 cbf_make_handle}{\f4  
\par \tab 2.3.2 }{\b\f4 cbf_free_handle}{\f4  
\par \tab 2.3.3 }{\b\f4 cbf_read_file}{\f4  
\par \tab 2.3.4 }{\b\f4 cbf_write_file}{\f4  
\par \tab 2.3.5 }{\b\f4 cbf_new_datablock}{\f4  
\par \tab 2.3.6 }{\b\f4 cbf_force_new_datablock}{\f4  
\par \tab 2.3.7 }{\b\f4 cbf_new_category}{\f4  
\par \tab 2.3.8 }{\b\f4 cbf_force_new_category}{\f4  
\par \tab 2.3.9 }{\b\f4 cbf_new_column}{\f4  
\par \tab 2.3.10 }{\b\f4 cbf_new_row}{\f4  
\par \tab 2.3.11 }{\b\f4 cbf_insert_row}{\f4  
\par \tab 2.3.12 }{\b\f4 cbf_delete_row}{\f4  
\par \tab 2.3.13 }{\b\f4 cbf_set_datablockname}{\f4  
\par \tab 2.3.14 }{\b\f4 cbf_reset_datablocks}{\f4  
\par \tab 2.3.15 }{\b\f4 cbf_reset_datablock}{\f4  
\par \tab 2.3.16 }{\b\f4 cbf_reset_category}{\f4  
\par \tab 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4  
\par \tab 2.3.18 }{\b\f4 cbf_remove_category}{\f4  
\par \tab 2.3.19 }{\b\f4 cbf_remove_column}{\f4  
\par \tab 2.3.20 }{\b\f4 cbf_remove_row}{\f4  
\par \tab 2.3.21 }{\b\f4 cbf_rewind_datablock}{\f4  
\par \tab 2.3.22 }{\b\f4 cbf_rewind_category}{\f4  
\par \tab 2.3.23 }{\b\f4 cbf_rewind_column}{\f4  
\par \tab 2.3.24 }{\b\f4 cbf_rewind_row}{\f4  
\par \tab 2.3.25 }{\b\f4 cbf_next_datablock}{\f4  
\par \tab 2.3.26 }{\b\f4 cbf_next_category}{\f4  
\par \tab 2.3.27 }{\b\f4 cbf_next_column}{\f4  
\par \tab 2.3.28 }{\b\f4 cbf_next_row}{\f4  
\par \tab 2.3.29 }{\b\f4 cbf_find_datablock}{\f4  
\par \tab 2.3.30 }{\b\f4 cbf_find_category}{\f4  
\par \tab 2.3.31 }{\b\f4 cbf_find_column}{\f4  
\par \tab 2.3.32 }{\b\f4 cbf_find_row}{\f4  
\par \tab 2.3.33 }{\b\f4 cbf_find_nextrow}{\f4  
\par \tab 2.3.34 }{\b\f4 cbf_count_datablocks}{\f4  
\par \tab 2.3.35 }{\b\f4 cbf_count_categories}{\f4  
\par \tab 2.3.36 }{\b\f4 cbf_count_columns}{\f4  
\par \tab 2.3.37 }{\b\f4 cbf_count_rows}{\f4  
\par \tab 2.3.38 }{\b\f4 cbf_select_datablock}{\f4  
\par \tab 2.3.39 }{\b\f4 cbf_select_category}{\f4  
\par \tab 2.3.40 }{\b\f4 cbf_select_column}{\f4  
\par \tab 2.3.41 }{\b\f4 cbf_select_row}{\f4  
\par \tab 2.3.42 }{\b\f4 cbf_datablock_name}{\f4  
\par \tab 2.3.43 }{\b\f4 cbf_category_name}{\f4  
\par \tab 2.3.44 }{\b\f4 cbf_column_name}{\f4  
\par \tab 2.3.45 }{\b\f4 cbf_row_number}{\f4  
\par \tab 2.3.46 }{\b\f4 cbf_get_value}{\f4  
\par \tab 2.3.47 }{\b\f4 cbf_set_value}{\f4  
\par \tab 2.3.48 }{\b\f4 cbf_get_integervalue}{\f4  
\par \tab 2.3.49 }{\b\f4 cbf_set_integervalue}{\f4  
\par \tab 2.3.50 }{\b\f4 cbf_get_doublevalue}{\f4  
\par \tab 2.3.51 }{\b\f4 cbf_set_doublevalue}{\f4  
\par \tab 2.3.52 }{\b\f4 cbf_get_integerarrayparameters}{\f4  
\par \tab 2.3.53 }{\b\f4 cbf_get_integerarray}{\f4  
\par \tab 2.3.54 }{\b\f4 cbf_set_integerarray}{\f4  
\par \tab 2.3.55 }{\b\f4 cbf_failnez}{\f4  
\par \tab 2.3.56 }{\b\f4 cbf_onfailnez}{\f4  
\par 
\par \tab 2.4 High-level function prototypes (new for version 0.7)\tab 64
\par 
\par \tab 2.4.1 }{\b\f4 cbf_read_template}{\f4 
\par \tab 2.4.2 }{\b\f4 cbf_get_diffrn_id}{\f4 
\par \tab 2.4.3 }{\b\f4 cbf_set_diffrn_id}{\f4 
\par \tab 2.4.4 }{\b\f4 cbf_get_crystal_id}{\f4 
\par \tab 2.4.5 }{\b\f4 cbf_set_crystal_id}{\f4 
\par \tab 2.4.6 }{\b\f4 cbf_get_wavelength}{\f4 
\par \tab 2.4.7 }{\b\f4 cbf_set_wavelength}{\f4 
\par \tab 2.4.8 }{\b\f4 cbf_get_polarization}{\f4 
\par \tab 2.4.9 }{\b\f4 cbf_set_polarization}{\f4 
\par \tab 2.4.10 }{\b\f4 cbf_get_divergence}{\f4 
\par \tab 2.4.11 }{\b\f4 cbf_set_divergence}{\f4 
\par \tab 2.4.12 }{\b\f4 cbf_count_elements}{\f4 
\par \tab 2.4.13 }{\b\f4 cbf_get_element_id}{\f4 
\par \tab 2.4.14 }{\b\f4 cbf_get_gain}{\f4 
\par \tab 2.4.15 }{\b\f4 cbf_set_gain}{\f4 
\par \tab 2.4.16 }{\b\f4 cbf_get_overload}{\f4 
\par \tab 2.4.17 }{\b\f4 cbf_set_overload}{\f4 
\par \tab 2.4.18 }{\b\f4 cbf_get_integration_time}{\f4 
\par \tab 2.4.19 }{\b\f4 cbf_set_integration_time}{\f4 
\par \tab 2.4.20 }{\b\f4 cbf_get_time}{\f4 
\par \tab 2.4.21 }{\b\f4 cbf_set_time}{\f4 
\par \tab 2.4.22 }{\b\f4 cbf_get_date}{\f4 
\par \tab 2.4.23 }{\b\f4 cbf_set_date}{\f4 
\par \tab 2.4.24 }{\b\f4 cbf_set_current_time}{\f4 
\par \tab 2.4.25 }{\b\f4 cbf_get_image_size}{\f4 
\par \tab 2.4.26 }{\b\f4 cbf_get_image}{\f4 
\par \tab 2.4.27 }{\b\f4 cbf_set_image}{\f4 
\par \tab 2.4.28 }{\b\f4 cbf_get_axis_setting}{\f4 
\par \tab 2.4.29 }{\b\f4 cbf_set_axis_setting}{\f4 
\par \tab 2.4.30 }{\b\f4 cbf_construct_goniometer}{\f4 
\par \tab 2.4.31 }{\b\f4 cbf_free_goniometer}{\f4 
\par \tab 2.4.32 }{\b\f4 cbf_get_rotation_axis}{\f4 
\par \tab 2.4.33 }{\b\f4 cbf_get_rotation_range}{\f4 
\par \tab 2.4.34 }{\b\f4 cbf_rotate_vector}{\f4 
\par \tab 2.4.35 }{\b\f4 cbf_get_reciprocal}{\f4 
\par \tab 2.4.36 }{\b\f4 cbf_construct_detector}{\f4 
\par \tab 2.4.37 }{\b\f4 cbf_free_detector}{\f4 
\par \tab 2.4.38 }{\b\f4 cbf_get_beam_center}{\f4 
\par \tab 2.4.39 }{\b\f4 cbf_get_detector_distance}{\f4 
\par \tab 2.4.40 }{\b\f4 cbf_get_detector_normal}{\f4 
\par \tab 2.4.41 }{\b\f4 cbf_get_pixel_coordinates}{\f4 
\par \tab 2.4.42 }{\b\f4 cbf_get_pixel_normal}{\f4 
\par \tab 2.4.43 }{\b\f4 cbf_get_pixel_area}{\f4 
\par 
\par 
\par 3. File format \tab 107
\par 
\par \tab 3.1 General description 
\par 
\par \tab 3.2 Format of the binary sections 
\par \tab 3.2.1 Format of imgCIF binary sections 
\par \tab 3.2.2 Format of CBF binary sections 
\par 
\par \tab 3.3 Compression schemes 
\par \tab 3.3.1 Canonical-code compression 
\par \tab 3.3.2 CCP4-style compression 
\par 
\par 4. Installation \tab 113
\par 
\par 5. Example programs \tab 115
\par }\pard \widctlpar\adjustright {\f4 
\par 
\par \sect }\sectd \sbkodd\pgnrestart\linex0\endnhere\sectdefaultcl \pard\plain \s1\sb240\sa60\keepn\nowidctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning32\cgrid {\f0\fs28 1. Introduction
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par 
\par CBFlib is a library of ANSI-C functions providing a simple mechanism for accessing Crystallographic Binary Files (CB
F files) and Image-supporting CIF (imgCIF) files. The CBFlib API is loosely based on the CIFPARSE API for mmCIF files. Like CIFPARSE, CBFlib does not perform any semantic integrity checks and simply provides functions to create, read, modify and write CBF
 binary data files and imgCIF ASCII data files. 
\par 
\par 
\par \sect }\sectd \sbkodd\linex0\endnhere\sectdefaultcl \pard\plain \s1\sb240\sa60\keepn\nowidctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning32\cgrid {\f0\fs28 2. Function descriptions
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }{\b\f4 2.1 General description}{\f4 
\par 
\par Almost all of the CBFlib functions receive a value of type cbf_handle (a CBF handle) as the first argument.   Several of
 the high-level CBFlib functions dealing with geometry receive a value of type cbf_goniometer (a handle for a CBF goniometer object) or cbf_detector (a handle for a CBF detector object).
\par 
\par All functions return an integer equal to 0 for success or an error code for failure.
\par 
\par 
\par }{\b\f4 2.1.1 CBF handles}{\f4 
\par 
\par CBFlib permits a program to use multiple CBF objects simultaneously. To identify the CBF object on which a function will operate, CBFlib uses a value of type cbf_handle. 
\par 
\par Most functions in the library expect a value of type cbf_handle as the first argument. 
\par 
\par The function }{\b\f4 cbf_make_handle}{\f4  creates and initializes a new CBF handle. 
\par 
\par The function }{\b\f4 cbf_free_handle}{\f4  destroys a handle and frees all memory associated with the corresponding CBF object.
\par 
\par 
\par }{\b\f4 2.1.2 CBF goniometer handles}{\f4 
\par 
\par To represent the goniometer used to orient a sample, CBFlib uses a value of type cbf_goniometer. 
\par 
\par A goniometer object is created and initialized from a CBF object using the function }{\b\f4 cbf_construct_goniometer}{\f4 . 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 The function }{\b\f4 cbf_free_goniometer}{\f4  destroys a goniometer handle and frees all memory associated with the corresponding object.
\par 
\par 
\par }{\b\f4 2.1.3 CBF detector handles}{\f4 
\par 
\par To represent a detector surface mounted on a positioning system, CBFlib uses a value of type cbf_detector. 
\par 
\par A goniometer object is created and initialized from a CBF object using the function }{\b\f4 cbf_construct_detector}{\f4 . 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 The function }{\b\f4 cbf_free_detector}{\f4  destroys a detector handle and frees all memory associated with the corresponding object.
\par 
\par 
\par }{\b\f4 2.1.4 Return values
\par }{\f4 
\par All of the CBFlib functions return 0 on success and an error code on failure. The error codes are: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2970\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_FORMAT\cell The file format is invalid \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2970\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_ALLOC\cell Memory allocation failed \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_ARGUMENT
\cell Invalid function argument \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_ASCII\cell The value is ASCII (not binary) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~CBF_BINARY\cell The value is binary (not ASCII) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_BITCOUNT\cell 
The expected number of bits does  not match the actual number written \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_ENDOFDATA\cell The end of the data was reached before the end of the array \cell 
}\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_FILECLOSE\cell File close error \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_FILEOPEN\cell 
File open error \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_FILEREAD\cell File read error \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~
CBF_FILESEEK\cell File seek error \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_FILETELL\cell File tell error \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\f4 \~\~CBF_FILEWRITE\cell File write error \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_IDENTICAL\cell A data block with the new name already exists \cell }\pard \widctlpar\intbl\adjustright {\f4 
\row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_NOTFOUND\cell The data block, category, column or row does not exist \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_OVERFLOW\cell 
The number read cannot fit into the destination argument. The destination has been set to the nearest value. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~CBF_UNDEFINED\cell 
The requested number is not defined (e.g. 0/0; new for version 0.7). \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2970\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~
CBF_NOTIMPLEMENTED\cell The requested functionality is not yet implemented (New for version 0.7). \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par If more than one error has occurred, the error code is the logical OR of the individual error codes.
\par 
\par 2.2 Reading and writing files containing binary sections
\par 
\par 2.2.1 Reading binary sections
\par 
\par 
\par The current version of CBFlib only decompresses a binary section from disk when requested by the program. 
\par 
\par When a file containing one or more binary sections is read, CBFlib saves the file pointer
 and the position of the binary section within the file and then jumps past the binary section. When the program attempts to access the binary data, CBFlib sets the file position back to the start  of the binary section and then reads the data. 
\par 
\par For this scheme to work: 
\par 
\par 1. The file must be a random-access file opened in binary mode (fopen ( ," rb")).
\par 2. The program must not close the file. CBFlib will close the file using fclose ( ) when it is no longer needed. 
\par 
\par At present, this also means that a program cant read a file and then write back to the same file. This restriction will be eliminated in a future version. 
\par 
\par When reading an imgCIF vs a CBF, the difference is detected automatically. 
\par 
\par 
\par }{\b\f4 2.2.2 Writing binary sections
\par }{\f4 
\par When a program passes CBFlib a binary value, the data is compressed to a temporary file. If the CBF object is subsequently written to a file, the data is simply copied from the temporary file to the output file. 
\par 
\par The output file can be of any type. If the program indicates to 
CBFlib that the file is a random-access and readable, CBFlib will conserve disk space by closing the temporary file and using the output file as the location at which the binary value is stored. 
\par 
\par For this option to work: 
\par 
\par 1. The file must be a random-access file opened in binary update mode (fopen ( , "w+b")).
\par 2. The program must not close the file. CBFlib will close the file using fclose ( ) when it is no longer needed. 
\par 
\par If this option is not used: 
\par 
\par 1. CBFlib will continue using the temporary file.
\par 2. CBFlib will not close the file. This is the responsibility of the main program. 
\par 
\par }{\b\f4 2.2.3 Summary of reading and writing files containing binary sections
\par }{\f4 
\par 1. Open disk files to read using the mode "rb". 
\par 2. If possible, open disk files to write using the mode "w+b" and tell CBFlib that it can use the file as a buffer.
\par 3. Do not close any files read by CBFlib or written by CBFlib with buffering turned on.
\par 4. Do not attempt to read from a file, then write to the same file.
\par }{\b\f4 \sect }\sectd \sbkodd\linex0\endnhere\sectdefaultcl \pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 2.3 Low-level function prototypes
\par }{\f4 
\par 2.3.1 }{\b\f4 cbf_make_handle}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_make_handle}{\f4  (cbf_handle *}{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_make_handle}{\f4  creates and initializes a new internal CBF object. All other CBFlib functions operating on this object receive the CBF handle as the first argument. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell Pointer to a CBF handle. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright 
{\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.2 }{\b\f4 cbf_free_handle}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.2 }{\b\f4 cbf_free_handle}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_free_handle}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_free_handle}{\f4  destroys the CBF object specified by the }{\i\f4 handle}{\f4  and frees all associated memory. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle to free. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.1 }{\b\f4 cbf_make_handle}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.3 }{\b\f4 cbf_read_file}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  }{\f4\fs14 
\par 
\par }{\f4 #include "cbf.h"
\par 
\par int }{\b\f4 cbf_read_file}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , FILE *}{\i\f4 file}{\f4 , int }{\i\f4 headers}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  }{\f4\fs14 
\par 
\par }{\b\f4 cbf_read_file}{\f4  reads the CBF or CIF file }{\i\f4 file}{\f4  into the CBF object specified by }{\i\f4 handle}{\f4 . 
\par 
\par }{\i\f4 headers}{\f4  controls the interprestation of binary section headers of imgCIF files. 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 MSG_DIGEST:\cell 
Instructs CBFlib to check that the digest of the binary section matches any header value. If the digests do not match, the call will return CBF_FORMAT. This evaluation and comparison is delayed (a "lazy" evaluation) to ensure maximal processing efficiency
. If an immediately evaluation is required, see MSG_DIGESTNOW, below. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 
MSG_DIGESTNOW:\cell Instructs CBFlib to check that the digest of the binary section matches any header value.  If the digests do not match, the call will return CBF_FORMAT. This evaluation a
nd comparison is performed during initial parsing of the section to ensure timely error reporting at the expense of processing efficiency. If a more efficient delayed ("lazy") evaluation is required, see MSG_DIGESTNOW, below. \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 MSG_NODIGEST: \cell Do not check the digest (default). \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par CBFlib defers reading binary sections as long as possible. In the current version of CBFlib, this means that: 
\par 
\par 1. The }{\i\f4 file}{\f4  must be a random-access file opened in binary mode (fopen ( , "rb")).
\par 2. The program must not close the }{\i\f4 file}{\f4 . CBFlib will close the }{\i\f4 file}{\f4  using  fclose ( ) when it is no longer needed. 
\par 
\par These restrictions may change in a future release. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4\fs14 
\par }\pard \widctlpar\tx2160\adjustright {\f4\fs14 \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 file}{\f4 \cell Pointer to a file descriptor.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb 
\cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 headers}{\f4 \cell Controls interprestation of binary section headers. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  }{\f4\fs14 
\par 
\par }{\f4 Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  }{\f4\fs14 
\par 
\par }{\f4 2.3.4 }{\b\f4 cbf_write_file}{\f4 
\par \page 
\par 2.3.4 }{\b\f4 cbf_write_file}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par }\pard \fi-720\li720\widctlpar\adjustright {\f4 int }{\b\f4 cbf_write_file}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , FILE *}{\i\f4 file}{\f4 , int }{\i\f4 readable}{\f4 , int  }{\i\f4 ciforcbf}{\f4 , int }{\i\f4 headers}{\f4 , int }{\i\f4 encoding}{\f4 ); 

\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_write_file}{\f4  writes the CBF object specified by }{\i\f4 handle}{\f4  into the file }{\i\f4 file}{\f4 . 
\par 
\par Unlike }{\b\f4 cbf_read_file}{\f4 , the }{\i\f4 file}{\f4  does not have to be random-access. 
\par 
\par If the }{\i\f4 file}{\f4  is random-access and readable, }{\i\f4 readable}{\f4  can be set to non-0 to indicate to CBFlib that the }{\i\f4 file}{\f4  can be used as a buffer to conserve disk space. If the }{\i\f4 file}{\f4 
 is not random-access or not readable, }{\i\f4 readable}{\f4  must be 0. 
\par 
\par If }{\i\f4 readable}{\f4  is non-0, CBFlib will close the }{\i\f4 file}{\f4  when it is no longer required otherwise this is the responsibility of the program. 
\par 
\par }{\i\f4 ciforcbf}{\f4  selects the format in which the binary sections are written: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CIF\cell Write an imgCIF file. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBF\cell Write a CBF file (default). }{\i\f4 headers}{\f4  selects the type of header used in  CBF binary sectio
ns and selects whether message digests are generated. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par The value of }{\i\f4 headers}{\f4  can be a logical OR of any of: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 MIME_HEADERS\cell Use MIME-type headers (default). \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd 
\trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 MIME_NOHEADERS\cell Use a simple ASCII headers. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 MSG_DIGEST\cell Generate message digests for binary data validation. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard 
\widctlpar\intbl\adjustright {\f4 MSG_NODIGEST\cell Do not generate message digests (default). \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\i\f4 encoding}{\f4  selects the type of encoding used for binary sections and the type of line-termination in imgCIF files. The value can be a logical OR of any of: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 ENC_BASE64\cell Use BASE64 encoding (default). \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 ENC_QP\cell Use QUOTED-PRINTABLE encoding. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 ENC_BASE8\cell 
Use BASE8 (octal) encoding. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 ENC_BASE10\cell Use BASE10 (decimal) encoding. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 ENC_BASE16\cell Use BASE16 (hexadecimal) encoding. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 ENC_FORWARD\cell For BASE8, BASE10 or BASE16 encoding, m
ap bytes to words forward (1234) (default on little-endian machines). \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 ENC_BACKWARD\cell Map bytes to words backward (4321) (default on big-endian machines). 
\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 ENC_CRTERM\cell Terminate lines with CR. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440
\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 ENC_LFTERM\cell Terminate lines with LF (default). \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }\pard \keep\keepn\widctlpar\adjustright {\b\f4 ARGUMENTS}{\f4 
\par }\pard \fi-1080\li1080\keep\keepn\widctlpar\adjustright {\f4 \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \keep\keepn\widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \keep\keepn\widctlpar\intbl\adjustright {\i\f4 file}{\f4 \cell Pointer to a file descriptor.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\keep\keepn\widctlpar\intbl\adjustright {\i\f4 readable}{\f4 \cell If non-0: this file is random-access and readable and can be used as a buffer. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \keep\keepn\widctlpar\intbl\adjustright {\i\f4 
ciforcbf}{\f4 \cell Selects the format in which the binary sections are written (CIF/CBF). \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \keep\keepn\widctlpar\intbl\adjustright {\i\f4 headers}{\f4 \cell Selects the type of 
header in CBF binary sections and message digest  generation. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \keep\keepn\widctlpar\intbl\adjustright {\i\f4 
encoding}{\f4 \cell Selects the type of encoding used for binary sections and the type of line-termination in imgCIF files. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.3 }{\b\f4 cbf_read_file}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_new_datablock}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 datablockname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_new_datablock}{\f4  creates a new data block with name }{\i\f4 datablockname}{\f4  and makes it the current data block. 
\par 
\par If a data block with this name already exists, the existing data block becomes the current data block. 
\par 
\par }{\b\f4 ARGUMENTS\line }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 datablockname}{\f4 \cell The name of the new data block. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.6 }{\b\f4 cbf_force_new_datablock}{\f4 
\par 2.3.7 }{\b\f4 cbf_new_category}{\f4 
\par 2.3.8 }{\b\f4 cbf_force_new_category}{\f4 
\par 2.3.9 }{\b\f4 cbf_new_column}{\f4 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 2.3.12 }{\b\f4 cbf_set_datablockname}{\f4 
\par 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.6 }{\b\f4 cbf_force_new_data_block}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par }\pard \fi-720\li720\widctlpar\adjustright {\f4 int }{\b\f4 cbf_force_new_datablock}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 datablockname}{\f4 ); 
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_force_new_datablock}{\f4  creates a new data block with name }{\i\f4 datablockname}{\f4  and makes it the current data block. Duplicate data block names are allowed. 
\par 
\par Even if a data block with this name already exists, a new data block is created and becomes the current data block. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 datablockname}{\f4 \cell The name of the new data block. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 2.3.7 }{\b\f4 cbf_new_category}{\f4 
\par 2.3.8 }{\b\f4 cbf_force_new_category}{\f4 
\par 2.3.9 }{\b\f4 cbf_new_column}{\f4 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 2.3.12 }{\b\f4 cbf_set_datablockname}{\f4 
\par 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.7 }{\b\f4 cbf_new_category}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_new_category}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 categoryname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_new_category}{\f4  creates a new category in the current data block with name }{\i\f4 categoryname}{\f4  and makes it the current category. 
\par 
\par If a category with this name already exists, the existing category becomes the current category. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 categoryname}{\f4 \cell The name of the new category. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 2.3.6 }{\b\f4 cbf_force_new_datablock}{\f4 
\par 2.3.8 }{\b\f4 cbf_force_new_category}{\f4 
\par 2.3.9 }{\b\f4 cbf_new_column}{\f4 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.8 }{\b\f4 cbf_force_new_category}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_force_new_category}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 categoryname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_force_new_category}{\f4  creates a new category in the current data block with name }{\i\f4 categoryname}{\f4  and makes it the current category. Duplicate category names are allowed. 
\par 
\par Even if a category with this name already exists, a new category of the same name is created and becomes the current category. The allows for the creation of unlooped tag/value lists drawn from the same category. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 categoryname}{\f4 \cell The name of the new category. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 2.3.6 }{\b\f4 cbf_force_new_datablock}{\f4 
\par 2.3.7 }{\b\f4 cbf_new_category}{\f4 
\par 2.3.9 }{\b\f4 cbf_new_column}{\f4 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.9 }{\b\f4 cbf_new_column}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_new_column}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 columnname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_new_column}{\f4  creates a new column in the current category with name }{\i\f4 columnname}{\f4  and makes it the current column. 
\par 
\par If a column with this name already exists, the existing column becomes the current category. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 columnname}{\f4 \cell The name of the new column.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 2.3.6 }{\b\f4 cbf_force_new_datablock}{\f4 
\par 2.3.7 }{\b\f4 cbf_new_category}{\f4 
\par 2.3.8 }{\b\f4 cbf_force_new_category}{\f4 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 2.3.19 }{\b\f4 cbf_remove_column}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_new_row}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_new_row}{\f4  adds a new row to the current category and makes it the current row. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 2.3.6 }{\b\f4 cbf_force_new_datablock}{\f4 
\par 2.3.7 }{\b\f4 cbf_new_category}{\f4 
\par 2.3.8 }{\b\f4 cbf_force_new_category}{\f4 
\par 2.3.9 }{\b\f4 cbf_new_column}{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 2.3.12 }{\b\f4 cbf_delete_row}{\f4 
\par 2.3.20 }{\b\f4 cbf_remove_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_insert_row}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 rownumber}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_insert_row}{\f4  adds a new row to the current category. The new row is inserted as row }{\i\f4 rownumber}{\f4  and existing rows starting from }{\i\f4 rownumber}{\f4  are moved up by 1. The new row becomes the current row. 
\par 
\par If the category has fewer than }{\i\f4 rownumber}{\f4  rows, the function returns CBF_NOTFOUND. 
\par 
\par The row numbers start from 0. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 rownumber}{\f4 \cell The row number of the new row.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 2.3.6 }{\b\f4 cbf_force_new_datablock}{\f4 
\par 2.3.7 }{\b\f4 cbf_new_category}{\f4 
\par 2.3.8 }{\b\f4 cbf_force_new_category}{\f4 
\par 2.3.9 }{\b\f4 cbf_new_column}{\f4 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 2.3.12 }{\b\f4 cbf_delete_row}{\f4 
\par 2.3.20 }{\b\f4 cbf_remove_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.12 }{\b\f4 cbf_delete_row}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_delete_row}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 rownumber}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_delete_row}{\f4  deletes a row from the current category. Rows starting from }{\i\f4 rownumber}{\f4  +1 are moved down by 1. If the current row was higher than }{\i\f4 rownumber}{\f4 , or if the current row is the last row, it will also 
move down by 1. 
\par 
\par The row numbers start from 0. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 rownumber}{\f4 \cell The number of the row to delete.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 2.3.19 }{\b\f4 cbf_remove_column}{\f4 
\par 2.3.20 }{\b\f4 cbf_remove_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.13 }{\b\f4 cbf_set_datablockname}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_set_datablockname}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 datablockname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_datablockname}{\f4  changes the name of the current data block to }{\i\f4 datablockname}{\f4 . 
\par 
\par If a data block with this name already exists (comparison is case-insensitive), the function returns CBF_IDENTICAL. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 datablockname}{\f4 \cell The new data block name.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 2.3.14 }{\b\f4 cbf_reset_datablocks}{\f4 
\par 2.3.15 }{\b\f4 cbf_reset_datablock}{\f4 
\par 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4 
\par 2.3.42 }{\b\f4 cbf_datablock_name}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.14 }{\b\f4 cbf_reset_datablocks}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_reset_datablocks}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_reset_datablocks}{\f4  deletes all categories from all data blocks. 
\par 
\par The current data block does not change. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.15 }{\b\f4 cbf_reset_datablock}{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.15 }{\b\f4 cbf_reset_datablock}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_reset_datablock}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_reset_datablock}{\f4  deletes all categories from the current data block. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.14 }{\b\f4 cbf_reset_datablocks}{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.16 }{\b\f4 cbf_reset_category}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_reset_category}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_reset_category}{\f4  deletes all columns and rows from current category. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.16 }{\b\f4 cbf_reset_category}{\f4 
\par 2.3.19 }{\b\f4 cbf_remove_column}{\f4 
\par 2.3.20 }{\b\f4 cbf_remove_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_remove_datablock}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_remove_datablock}{\f4  deletes the current data block. 
\par 
\par The current data block becomes undefined. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.5 }{\b\f4 cbf_new_datablock}{\f4 
\par 2.3.6 }{\b\f4 cbf_force_new_datablock}{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 2.3.19 }{\b\f4 cbf_remove_column}{\f4 
\par 2.3.20 }{\b\f4 cbf_remove_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_remove_category}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_remove_category}{\f4  deletes the current category. 
\par 
\par The current category becomes undefined. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.7 }{\b\f4 cbf_new_category}{\f4 
\par 2.3.8 }{\b\f4 cbf_force_new_category}{\f4 
\par 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4 
\par 2.3.19 }{\b\f4 cbf_remove_column}{\f4 
\par 2.3.20 }{\b\f4 cbf_remove_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.19 }{\b\f4 cbf_remove_column}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_remove_column}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_remove_column}{\f4  deletes the current column. 
\par 
\par The current column becomes undefined. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~\~
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.9 }{\b\f4 cbf_new_column}{\f4 
\par 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 2.3.20 }{\b\f4 cbf_remove_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.20 }{\b\f4 cbf_remove_row}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_remove_row}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_remove_row}{\f4  deletes the current row in the current category. 
\par 
\par If the current row was the last row, it will move down by 1, otherwise, it will remain the same. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.10 }{\b\f4 cbf_new_row}{\f4 
\par 2.3.11 }{\b\f4 cbf_insert_row}{\f4 
\par 2.3.17 }{\b\f4 cbf_remove_datablock}{\f4 
\par 2.3.18 }{\b\f4 cbf_remove_category}{\f4 
\par 2.3.19 }{\b\f4 cbf_remove_column}{\f4 
\par 2.3.12 }{\b\f4 cbf_delete_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.21 }{\b\f4 cbf_rewind_datablock}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_rewind_datablock}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_rewind_datablock}{\f4  makes the first data block the current data block. 
\par 
\par If there are no data blocks, the function returns CBF_NOTFOUND. 
\par 
\par The current category becomes undefined. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.22 }{\b\f4 cbf_rewind_category}{\f4 
\par 2.3.19 }{\b\f4 cbf_rewind_column}{\f4 
\par 2.3.24 }{\b\f4 cbf_rewind_row}{\f4 
\par 2.3.25 }{\b\f4 cbf_next_datablock}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.22 }{\b\f4 cbf_rewind_category}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_rewind_category}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_rewind_category}{\f4  makes the first category in the current data block the current category. 
\par 
\par If there are no categories, the function returns CBF_NOTFOUND. 
\par 
\par The current column and row become undefined. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.21 }{\b\f4 cbf_rewind_datablock}{\f4 
\par 2.3.19 }{\b\f4 cbf_rewind_column}{\f4 
\par 2.3.24 }{\b\f4 cbf_rewind_row}{\f4 
\par 2.3.26 }{\b\f4 cbf_next_category}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.23 }{\b\f4 cbf_rewind_column}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_rewind_column}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_rewind_column}{\f4  makes the first column in the current category the current column. 
\par 
\par If there are no columns, the function returns CBF_NOTFOUND. 
\par 
\par The current row is not affected. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.21 }{\b\f4 cbf_rewind_datablock}{\f4 
\par 2.3.22 }{\b\f4 cbf_rewind_category}{\f4 
\par 2.3.24 }{\b\f4 cbf_rewind_row}{\f4 
\par 2.3.27 }{\b\f4 cbf_next_column}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.24 }{\b\f4 cbf_rewind_row}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_rewind_row}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_rewind_row}{\f4  makes the first row in the current category the current row. 
\par 
\par If there are no rows, the function returns CBF_NOTFOUND. 
\par 
\par The current column is not affected. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.21 }{\b\f4 cbf_rewind_datablock}{\f4 
\par 2.3.22 }{\b\f4 cbf_rewind_category}{\f4 
\par 2.3.19 }{\b\f4 cbf_rewind_column}{\f4 
\par 2.3.28 }{\b\f4 cbf_next_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.25 }{\b\f4 cbf_next_datablock}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_next_datablock}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_next_datablock}{\f4  makes the data block following the current data block the current data block. 
\par 
\par If there are no more data blocks, the function returns CBF_NOTFOUND. 
\par 
\par The current category becomes undefined. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.21 }{\b\f4 cbf_rewind_datablock}{\f4 
\par 2.3.26 }{\b\f4 cbf_next_category}{\f4 
\par 2.3.27 }{\b\f4 cbf_next_column}{\f4 
\par 2.3.28 }{\b\f4 cbf_next_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.26 }{\b\f4 cbf_next_category}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_next_category}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_next_category}{\f4  makes the category following the current category in the current data block the current category. 
\par 
\par If there are no more categories, the function returns CBF_NOTFOUND. 
\par 
\par The current column and row become undefined. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.22 }{\b\f4 cbf_rewind_category}{\f4 
\par 2.3.25 }{\b\f4 cbf_next_datablock}{\f4 
\par 2.3.27 }{\b\f4 cbf_next_column}{\f4 
\par 2.3.27 }{\b\f4 cbf_next_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.27 }{\b\f4 cbf_next_column}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_next_column}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_next_column}{\f4  makes the column following the current column in the current category the current column. 
\par 
\par If there are no more columns, the function returns CBF_NOTFOUND. 
\par 
\par The current row is not affected. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.19 }{\b\f4 cbf_rewind_column}{\f4 
\par 2.3.25 }{\b\f4 cbf_next_datablock}{\f4 
\par 2.3.26 }{\b\f4 cbf_next_category}{\f4 
\par 2.3.28 }{\b\f4 cbf_next_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.28 }{\b\f4 cbf_next_row}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_next_row}{\f4  (cbf_handle }{\i\f4 handle}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_next_row}{\f4  makes the row following the current row in the current category the current row. 
\par 
\par If there are no more rows, the function returns CBF_NOTFOUND. 
\par 
\par The current column is not affected. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.24 }{\b\f4 cbf_rewind_row}{\f4 
\par 2.3.25 }{\b\f4 cbf_next_datablock}{\f4 
\par 2.3.26 }{\b\f4 cbf_next_category}{\f4 
\par 2.3.27 }{\b\f4 cbf_next_column}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.29 }{\b\f4 cbf_find_datablock}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_find_datablock}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 datablockname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_find_datablock}{\f4  makes the data block with name }{\i\f4 datablockname}{\f4  the current data block. 
\par 
\par The comparison is case-insensitive. 
\par 
\par If the data block does not exist, the function returns CBF_NOTFOUND. 
\par 
\par The current category becomes undefined. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 datablockname}{\f4 \cell The name of the data block to find.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.21 }{\b\f4 cbf_rewind_datablock}{\f4 
\par 2.3.25 }{\b\f4 cbf_next_datablock}{\f4 
\par 2.3.30 }{\b\f4 cbf_find_category}{\f4 
\par 2.3.31 }{\b\f4 cbf_find_column}{\f4 
\par 2.3.32 }{\b\f4 cbf_find_row}{\f4 
\par 2.3.42 }{\b\f4 cbf_datablock_name}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.30 }{\b\f4 cbf_find_category}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_find_category}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 categoryname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_find_category}{\f4  makes the category in the current data block with name 
\par }{\i\f4 categoryname}{\f4  the current category. 
\par 
\par The comparison is case-insensitive. 
\par 
\par If the category does not exist, the function returns CBF_NOTFOUND. 
\par 
\par The current column and row become undefined. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 categoryname}{\f4 \cell The name of the category to find.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.22 }{\b\f4 cbf_rewind_category}{\f4 
\par 2.3.26 }{\b\f4 cbf_next_category}{\f4 
\par 2.3.29 }{\b\f4 cbf_find_datablock}{\f4 
\par 2.3.31 }{\b\f4 cbf_find_column}{\f4 
\par 2.3.32 }{\b\f4 cbf_find_row}{\f4 
\par 2.3.43 }{\b\f4 cbf_category_name}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.31 }{\b\f4 cbf_find_column}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_find_column}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 columnname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_find_column}{\f4  makes the columns in the current category with name }{\i\f4 columnname}{\f4  the current column. 
\par 
\par The comparison is case-insensitive. 
\par 
\par If the column does not exist, the function returns CBF_NOTFOUND. 
\par 
\par The current row is not affected. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 columnname}{\f4 \cell The name of column to find.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.19 }{\b\f4 cbf_rewind_column}{\f4 
\par 2.3.27 }{\b\f4 cbf_next_column}{\f4 
\par 2.3.29 }{\b\f4 cbf_find_datablock}{\f4 
\par 2.3.30 }{\b\f4 cbf_find_category}{\f4 
\par 2.3.32 }{\b\f4 cbf_find_row}{\f4 
\par 2.3.44 }{\b\f4 cbf_column_name}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.32 }{\b\f4 cbf_find_row}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_find_row}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 value}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_find_row}{\f4  makes the first row in the current column with value }{\i\f4 value}{\f4  the current row. 
\par 
\par The comparison is case-sensitive. 
\par 
\par If a matching row does not exist, the function returns CBF_NOTFOUND. 
\par 
\par The current column is not affected. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 value}{\f4 \cell The value of the row to find.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.24 }{\b\f4 cbf_rewind_row}{\f4 
\par 2.3.28 }{\b\f4 cbf_next_row}{\f4 
\par 2.3.29 }{\b\f4 cbf_find_datablock}{\f4 
\par 2.3.30 }{\b\f4 cbf_find_category}{\f4 
\par 2.3.31 }{\b\f4 cbf_find_column}{\f4 
\par 2.3.33 }{\b\f4 cbf_find_nextrow}{\f4 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 
\par 
\par 
\par \page 
\par 2.3.33 }{\b\f4 cbf_find_nextrow}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_find_nextrow}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 value}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_find_nextrow}{\f4  makes the makes the next row in the current column with value }{\i\f4 value}{\f4  the current row. The search starts from the row following the last row found with }{\b\f4 cbf_find_row}{\f4  or }{\b\f4 cbf_find_nextrow}{\f4 
, or from the current row if the current row was defined using any other function. 
\par 
\par The comparison is case-sensitive. 
\par 
\par If no more matching rows exist, the function returns CBF_NOTFOUND. 
\par 
\par The current column is not affected. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 value}{\f4 \cell the value to search for.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.24 }{\b\f4 cbf_rewind_row}{\f4 
\par 2.3.28 }{\b\f4 cbf_next_row}{\f4 
\par 2.3.29 }{\b\f4 cbf_find_datablock}{\f4 
\par 2.3.30 }{\b\f4 cbf_find_category}{\f4 
\par 2.3.31 }{\b\f4 cbf_find_column}{\f4 
\par 2.3.32 }{\b\f4 cbf_find_row}{\f4 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.34 }{\b\f4 cbf_count_datablocks}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_count_datablocks}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int *}{\i\f4 datablocks}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_count_datablocks}{\f4  puts the number of data blocks in *}{\i\f4 datablocks}{\f4  . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 datablocks}{\f4 \cell Pointer to the destination data block count.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 

\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.35 }{\b\f4 cbf_count_categories}{\f4 
\par 2.3.36 }{\b\f4 cbf_count_columns}{\f4 
\par 2.3.37 }{\b\f4 cbf_count_rows}{\f4 
\par 2.3.38 }{\b\f4 cbf_select_datablock}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.35 }{\b\f4 cbf_count_categories}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_count_categories}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int *}{\i\f4 categories}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_count_categories}{\f4  puts the number of categories in the current data block in *}{\i\f4 categories}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~\~}{\i\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 categories}{\f4 \cell Pointer to the destination category count.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 

\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.34 }{\b\f4 cbf_count_datablocks}{\f4 
\par 2.3.36 }{\b\f4 cbf_count_columns}{\f4 
\par 2.3.37 }{\b\f4 cbf_count_rows}{\f4 
\par 2.3.39 }{\b\f4 cbf_select_category}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.36 }{\b\f4 cbf_count_columns}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_count_columns}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int *}{\i\f4 columns}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_count_columns}{\f4  puts the number of columns in the current category in 
\par *}{\i\f4 columns}{\f4 .
\par  
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 columns}{\f4 \cell Pointer to the destination column count.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.34 }{\b\f4 cbf_count_datablocks}{\f4 
\par 2.3.35 }{\b\f4 cbf_count_categories}{\f4 
\par 2.3.37 }{\b\f4 cbf_count_rows}{\f4 
\par 2.3.40 }{\b\f4 cbf_select_column}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.37 }{\b\f4 cbf_count_rows}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_count_rows}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int *}{\i\f4 rows}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_count_rows}{\f4  puts the number of rows in the current category in *}{\i\f4 rows}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 rows}{\f4 \cell Pointer to the destination row count.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.34 }{\b\f4 cbf_count_datablocks}{\f4 
\par 2.3.35 }{\b\f4 cbf_count_categories}{\f4 
\par 2.3.36 }{\b\f4 cbf_count_columns}{\f4 
\par 2.3.41 }{\b\f4 cbf_select_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.38 }{\b\f4 cbf_select_datablock}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_select_datablock}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 datablock}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_select_datablock}{\f4  selects data block number }{\i\f4 datablock}{\f4  as the current data block. 
\par 
\par The first data block is number 0. 
\par 
\par If the data block does not exist, the function returns CBF_NOTFOUND. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 datablock}{\f4 \cell Number of the data block to select.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.34 }{\b\f4 cbf_count_datablocks}{\f4 
\par 2.3.39 }{\b\f4 cbf_select_category}{\f4 
\par 2.3.40 }{\b\f4 cbf_select_column}{\f4 
\par 2.3.41 }{\b\f4 cbf_select_row}{\f4  
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.39 }{\b\f4 cbf_select_category}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_select_category}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 category}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_select_category}{\f4  selects category number }{\i\f4 category}{\f4  in the current data block as the current category. 
\par 
\par The first category is number 0. 
\par 
\par The current column and row become undefined. 
\par 
\par If the category does not exist, the function returns CBF_NOTFOUND. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 category}{\f4 \cell Number of the category to select.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.35 }{\b\f4 cbf_count_categories}{\f4 
\par 2.3.38 }{\b\f4 cbf_select_datablock}{\f4 
\par 2.3.40 }{\b\f4 cbf_select_column}{\f4 
\par 2.3.41 }{\b\f4 cbf_select_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.40 }{\b\f4 cbf_select_column}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_select_column}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 column}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_select_column}{\f4  selects column number }{\i\f4 column}{\f4  in the current category as the current column. 
\par 
\par The first column is number 0. 
\par 
\par The current row is not affected 
\par 
\par If the column does not exist, the function returns CBF_NOTFOUND. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 column}{\f4 \cell Number of the column to select.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.36 }{\b\f4 cbf_count_columns}{\f4 
\par 2.3.38 }{\b\f4 cbf_select_datablock}{\f4 
\par 2.3.39 }{\b\f4 cbf_select_category}{\f4 
\par 2.3.41 }{\b\f4 cbf_select_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.41 }{\b\f4 cbf_select_row}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_select_row}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 row}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_select_row}{\f4  selects row number }{\i\f4 row}{\f4  in the current category as the current row. 
\par 
\par The first row is number 0. 
\par 
\par The current column is not affected 
\par 
\par If the row does not exist, the function returns CBF_NOTFOUND. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 row}{\f4 \cell Number of the row to select.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.37 }{\b\f4 cbf_count_rows}{\f4 
\par 2.3.38 }{\b\f4 cbf_select_datablock}{\f4 
\par 2.3.39 }{\b\f4 cbf_select_category}{\f4 
\par 2.3.40 }{\b\f4 cbf_select_column}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.42 }{\b\f4 cbf_datablock_name}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_datablock_name}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char **}{\i\f4 datablockname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_datablock_name}{\f4  sets *}{\i\f4 datablockname}{\f4  to point to the name of the current data block. 
\par 
\par The data block name will be valid as long as the data block exists and has not been renamed. 
\par 
\par The name must not be modified by the program in any way. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 datablockname}{\f4 \cell Pointer to the destination data block name pointer.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.29 }{\b\f4 cbf_find_datablock}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.43 }{\b\f4 cbf_category_name}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_category_name}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char **}{\i\f4 categoryname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_category_name}{\f4  sets *}{\i\f4 categoryname}{\f4  to point to the name of the current category of the current data block. 
\par 
\par The category name will be valid as long as the category exists. 
\par 
\par The name must not be modified by the program in any way. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 categoryname}{\f4 \cell Pointer to the destination category name pointer.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.30 }{\b\f4 cbf_find_category}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.44 }{\b\f4 cbf_column_name}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_column_name}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char **}{\i\f4 columnname}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_column_name}{\f4  sets *}{\i\f4 columnname}{\f4  to point to the name of the current column of the current category. 
\par 
\par The column name will be valid as long as the column exists. 
\par 
\par The name must not be modified by the program in any way. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 columnname}{\f4 \cell Pointer to the destination column name pointer.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {
\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.31 }{\b\f4 cbf_find_column}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.45 }{\b\f4 cbf_row_number}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_row_number}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int *}{\i\f4 row}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_row_number}{\f4  sets *}{\i\f4 row}{\f4  to the number of the current row of the current 
\par category. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 row}{\f4 \cell Pointer to the destination row number.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.41 }{\b\f4 cbf_select_row}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_get_value}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char **}{\i\f4 value}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_value}{\f4  sets *}{\i\f4 value}{\f4  to point to the ASCII value of the item at the current column and row. 
\par 
\par If the }{\i\f4 value}{\f4  is not ASCII, the function returns CBF_BINARY. 
\par 
\par The }{\i\f4 value}{\f4  will be valid as long as the item exists and has not been set to a new value. 
\par 
\par The }{\i\f4 value}{\f4  must not be modified by the program in any way. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 value}{\f4 \cell Pointer to the destination value pointer.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.47 }{\b\f4 cbf_set_value}{\f4 
\par 2.3.48 }{\b\f4 cbf_get_integervalue}{\f4 
\par 2.3.50 }{\b\f4 cbf_get_doublevalue}{\f4 
\par 2.3.52 }{\b\f4 cbf_get_integerarrayparameters}{\f4 
\par 2.3.53 }{\b\f4 cbf_get_integerarray}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.47 }{\b\f4 cbf_set_value}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_set_value}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 value}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_value}{\f4  sets the item at the current column and row to the ASCII value }{\i\f4 value}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 value}{\f4 \cell ASCII value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 2.3.49 }{\b\f4 cbf_set_integervalue}{\f4 
\par 2.3.51 }{\b\f4 cbf_set_doublevalue}{\f4 
\par 2.3.54 }{\b\f4 cbf_set_integerarray}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.48 }{\b\f4 cbf_get_integervalue}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_get_integervalue}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , int *}{\i\f4 number}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_integervalue}{\f4  sets *}{\i\f4 number}{\f4  to the value of the ASCII item at the current column and row interpreted as a decimal integer. 
\par 
\par If the value is not ASCII, the function returns CBF_BINARY. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell \~CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 number}{\f4 \cell pointer to the number.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 2.3.49 }{\b\f4 cbf_set_integervalue}{\f4 
\par 2.3.50 }{\b\f4 cbf_get_doublevalue}{\f4 
\par 2.3.52 }{\b\f4 cbf_get_integerarrayparameters}{\f4 
\par 2.3.53 }{\b\f4 cbf_get_integerarray}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.49 }{\b\f4 cbf_set_integervalue}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_set_integervalue}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , int }{\i\f4 number}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_integervalue}{\f4  sets the item at the current column and row to the integer value }{\i\f4 number}{\f4  written as a decimal ASCII string. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 number}{\f4 \cell Integer value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 2.3.47 }{\b\f4 cbf_set_value}{\f4 
\par 2.3.48 }{\b\f4 cbf_get_integervalue}{\f4 
\par 2.3.49 }{\b\f4 cbf_set_integervalue}{\f4 
\par 2.3.51 }{\b\f4 cbf_set_doublevalue}{\f4 
\par 2.3.54 }{\b\f4 cbf_set_integerarray}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.50 }{\b\f4 cbf_get_doublevalue}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_get_doublevalue}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , double *}{\i\f4 number}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_doublevalue}{\f4  sets *}{\i\f4 number}{\f4  to the value of the ASCII item at the current column and row interpreted as a decimal floating-point number. 
\par 
\par If the value is not ASCII, the function returns CBF_BINARY. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 number}{\f4 \cell Pointer to the destination number.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 2.3.48 }{\b\f4 cbf_get_integervalue}{\f4 
\par 2.3.51 }{\b\f4 cbf_set_doublevalue}{\f4 
\par 2.3.52 }{\b\f4 cbf_get_integerarrayparameters}{\f4 
\par 2.3.53 }{\b\f4 cbf_get_integerarray}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.51 }{\b\f4 cbf_set_doublevalue}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par int }{\b\f4 cbf_set_doublevalue}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 format}{\f4 , double }{\i\f4 number}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_doublevalue}{\f4  sets the item at the current column and row to the floating-point value }{\i\f4 number}{\f4  written as an ASCII string with the format specified by }{\i\f4 format}{\f4  as appropriate for the printf function. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 format}{\f4 \cell Format for the number.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440
\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 number}{\f4 \cell Floating-point value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 2.3.47 }{\b\f4 cbf_set_value}{\f4 
\par 2.3.49 }{\b\f4 cbf_set_integervalue}{\f4 
\par 2.3.50 }{\b\f4 cbf_get_doublevalue}{\f4 
\par 2.3.54 }{\b\f4 cbf_set_integerarray}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.52 }{\b\f4 cbf_get_integerarrayparameters}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf.h"
\par 
\par }\pard \fi-720\li720\widctlpar\adjustright {\f4 int }{\b\f4 cbf_get_integerarrayparameters}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int * }{\i\f4 compression}{\f4 , int *}{\i\f4 binary_id}{\f4 , size_t *}{\i\f4 elsize}{\f4 , int *}{\i\f4 elsigned}
{\f4 , int *}{\i\f4 elunsigned}{\f4 , size_t *}{\i\f4 elements}{\f4 , int *}{\i\f4 minelement}{\f4 , int *}{\i\f4 maxelement)}{\f4 ; 
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_integerarrayparameters}{\f4  sets *}{\i\f4 compression}{\f4 , *}{\i\f4 binary_id}{\f4 , *}{\i\f4 elsize}{\f4 , *}{\i\f4 elsigned}{\f4 , *}{\i\f4 elunsigned}{\f4 , *}{\i\f4 elements}{\f4 , *}{\i\f4 minelement}{\f4  and *}{\i\f4 maxelement}{
\f4  to values read from the binary value of the item at the current column and row.   This provides all the arguments needed for a subsequent call to }{\b\f4 cbf_set_integerarray}{\f4 , if a copy of the arry is to be made into another CIF or CBF. 
\par 
\par If the value is not binary, the function returns CBF_ASCII. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 compression}{\f4 \cell Compression method used.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elsize}{
\f4 \cell Size in bytes of each array element.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 binary_id}{\f4 \cell Pointer to the destination integer binary identifier.\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elsigned}{\f4 \cell Pointer to an integer. Set to 1 if the elements can be read as signed integers.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\i\f4 elunsigned}{\f4 \cell Pointer to an integer. Set to 1 if the elements can be read as unsigned integers.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elements}{\f4 \cell 
Pointer to the destination number of elements.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 minelement}{\f4 \cell Pointer to the destination smallest element.\cell }\pard \widctlpar\intbl\adjustright {\f4 
\row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 maxelement}{\f4 \cell Pointer to the destination largest element.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row 
}\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 2.3.48 }{\b\f4 cbf_get_integervalue}{\f4 
\par 2.3.50 }{\b\f4 cbf_get_doublevalue}{\f4 
\par 2.3.53 }{\b\f4 cbf_get_integerarray}{\f4 
\par 2.3.54 }{\b\f4 cbf_set_integerarray}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.53 }{\b\f4 cbf_get_integerarray}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  }{\f4\fs14 
\par 
\par }{\f4 #include "cbf.h"
\par 
\par }\pard \fi-720\li720\widctlpar\adjustright {\f4 int }{\b\f4 cbf_get_integerarray}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , int *}{\i\f4 binary_id}{\f4 , void *}{\i\f4 array}{\f4 ,  size_t }{\i\f4 elsize}{\f4 , int }{\i\f4 elsigned}{\f4 , size_t }{\i\f4 
elements}{\f4 , size_t *}{\i\f4 elements_read}{\f4 ); 
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  }{\f4\fs14 
\par 
\par }{\b\f4 cbf_get_integerarray}{\f4  reads the binary value of the item at the current column and row into an integer }{\i\f4 array}{\f4 . The array consists of elements }{\i\f4 elements}{\f4  of }{\i\f4 elsize}{\f4  bytes each, starting at }{\i\f4 array}{
\f4 . The elements are signed if }{\i\f4 elsigned}{\f4  is non-0 and unsigned otherwise. *}{\i\f4 binary_id}{\f4  is set to the binary section identifier and *}{\i\f4 elements_read}{\f4  to the number of elements actually read. }{\f4\fs14 
\par 
\par }{\f4 If any element in the binary data cant fit into the destination element, the destination is set the nearest possible value. }{\f4\fs14 
\par 
\par }{\f4 If the value is not binary, the function returns CBF_ASCII. }{\f4\fs14 
\par 
\par }{\f4 If the requested number of elements cant be read, the function will read as many as it can and then return CBF_ENDOFDATA. }{\f4\fs14 
\par 
\par }{\f4 Currently, the destination }{\i\f4 array}{\f4  must consist of chars, shorts or ints (signed or unsigned). If }{\i\f4 elsize}{\f4  is not equal to sizeof (char), sizeof (short) or sizeof (int), the function returns CBF_ARGUMENT. }{\f4\fs14 
\par 
\par }{\f4 An additional restriction in the current version of CBFlib is that values too large to fit in an int are not correctly decompressed. As an example, if the machine with 32-bit ints is re
ading an array containing a value outside the range 0 .. 2^32-1 (unsigned) or -2^31 .. 2^31-1 (signed), the array will not be correctly decompressed. This restriction will be removed in a future release. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4\fs14 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 binary_id}{\f4 \cell Pointer to the destination integer binary identifier.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\i\f4 array}{\f4 \cell Pointer to the destination array.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elsize}{\f4 \cell Size in bytes of each destination array element.\cell 
}\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elsigned}{\f4 \cell Set to non-0 if the destination array elements are signed.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright 
{\i\f4 elements}{\f4 \cell The number of elements to read.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 elements_read}{
\f4 \cell Pointer to the destination number of elements actually read.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  }{\f4\fs14 
\par 
\par }{\f4 Returns an error code on failure or 0 for success.
\par }{\b\f4 
\par SEE ALSO}{\f4  }{\f4\fs14 
\par 
\par }{\f4 2.3.46 }{\b\f4 cbf_get_value}{\f4 
\par 2.3.48 }{\b\f4 cbf_get_integervalue}{\f4 
\par 2.3.50 }{\b\f4 cbf_get_doublevalue}{\f4 
\par 2.3.52 }{\b\f4 cbf_get_integerarrayparameters}{\f4 
\par 2.3.54 }{\b\f4 cbf_set_integerarray}{\f4 
\par }{\b\f4 \page 
\par }{\f4 2.3.54 }{\b\f4 cbf_set_integerarray}{\f4 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  }{\f4\fs14 
\par 
\par }{\f4 #include "cbf.h"
\par 
\par }\pard \fi-720\li720\widctlpar\adjustright {\f4 int }{\b\f4 cbf_set_integerarray}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 compression}{\f4 , int }{\i\f4 binary_id}{\f4 , void *}{\i\f4 array}{\f4 , size_t }{\i\f4 elsize}{\f4 , int }{
\i\f4 elsigned}{\f4 , size_t }{\i\f4 elements}{\f4 ); 
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  }{\f4\fs14 
\par 
\par }{\b\f4 cbf_set_integerarray}{\f4  sets the binary value of the item at the current column and row to an integer }{\i\f4 array}{\f4 . The }{\i\f4 array}{\f4  consists of elements}{\i\f4 elements}{\f4  of }{\i\f4 elsize}{\f4  bytes each, starting at }{
\i\f4 array}{\f4 . The elements are signed if }{\i\f4 elsigned}{\f4  is non-0 and unsigned otherwise. }{\i\f4 binary_id}{\f4  is the binary section identifier. 
\par 
\par The }{\i\f4 array}{\f4  will be compressed using the compression scheme specifed by}{\i\f4 compression}{\f4 .  Currently, the available schemes are: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBF_CANONICAL\cell Canonical-code compression (section 3.3.1)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd 
\trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBF_PACKED\cell CCP4-style packing (section 3.3.2) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBF_NONE\cell No compression. }{\b\f4 NOTE:}{\f4 
 This scheme is by far the slowest of the three and uses much more disk space. It is intended for routine use with small arrays only. With large arrays (like images) it should be used only for debugging. \cell }\pard \widctlpar\intbl\adjustright {\f4 
\row }\pard \widctlpar\adjustright {\f4 
\par The values compressed are limited to 64 bits. If any element in the }{\i\f4 array}{\f4  is larger than 64 bits, the value compressed is the nearest 64-bit value. 
\par 
\par Currently, the source }{\i\f4 array}{\f4  must consist of chars, shorts or ints (signed or unsigned). If }{\i\f4 elsize}{\f4  is not equal to sizeof (char), sizeof (short) or sizeof (int), the function returns CBF_ARGUMENT. 
\par 
\par }{\b\f4 ARGUMENTS}{\b\f4\fs14 
\par }{\f4\fs14 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 compression}{\f4 \cell Compression method to use.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 binary_id
}{\f4 \cell Integer binary identifier.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 array}{\f4 \cell Pointer to the source array.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\i\f4 elsize}{\f4 \cell Size in bytes of each source array element.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elsigned}{\f4 \cell 
Set to non-0 if the source array elements are signed.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 elements}{\f4 \cell 
The number of elements in the }{\i\f4 array}{\f4 . \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\b\f4 
\par RETURN VALUE}{\f4  }{\f4\fs14 
\par 
\par }{\f4 Returns an error code on failure or 0 for success. 
\par 
\par }{\b\f4 SEE ALSO}{\f4  }{\f4\fs14 
\par 
\par }{\f4 2.3.47 }{\b\f4 cbf_set_value}{\f4 
\par 2.3.49 }{\b\f4 cbf_set_integervalue}{\f4 
\par 2.3.51 }{\b\f4 cbf_set_doublevalue}{\f4 
\par 2.3.52 }{\b\f4 cbf_get_integerarrayparameters}{\f4 
\par 2.3.53 }{\b\f4 cbf_get_integerarray}{\f4 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.55 }{\b\f4 cbf_failnez}{\f4 
\par 
\par 
\par }{\b\f4 DEFINITION}{\f4  
\par 
\par #include "cbf.h"
\par 
\par #define }{\b\f4 cbf_failnez}{\f4 (}{\i\f4 f}{\f4 ) \{int err; err = (}{\i\f4 f}{\f4 ); if (err) return err; \} 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_failnez}{\f4  is a macro used for error propagation throughout CBFlib.  }{\b\f4 cbf_failnez}{\f4  executes the function }{\i\f4 f}{\f4  and saves the returned error value.   If the error value is non-0, }{\b\f4 cbf_failnez}{\f4 
 executes a return with the error value as argument. If CBFDEBUG is defined, then a report of the error is also printed to the standard error stream, stderr, in the form 
\par 
\par CBFlib error }{\i\f4 f}{\f4  in "symbol" 
\par 
\par where }{\i\f4 f}{\f4  is the decimal value of the error and symbol is the symbolic form. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 f}{\f4 \cell Integer error value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 

\par }{\b\f4 SEE ALSO}{\f4  
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 2.3.56 }{\b\f4 cbf_onfailnez}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page }{\f4 
\par 2.3.56 }{\b\f4 cbf_onfailnez}{\f4 
\par 
\par 
\par }{\b\f4 DEFINITION}{\f4  
\par 
\par #include "cbf.h"
\par 
\par #define }{\b\f4 cbf_onfailnez}{\f4 (}{\i\f4 f}{\f4 ,}{\i\f4 c}{\f4 ) \{int err; err = (}{\i\f4 f}{\f4 ); if (err) \{\{}{\i\f4 c}{\f4 ; \}return err; \}\} 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_onfailnez}{\f4  is a macro used for error propagation throughout CBFlib.   }{\b\f4 cbf_onfailnez}{\f4  executes the function }{\i\f4 f}{\f4  and saves the returned error value. If the error value is non-0, }{\b\f4 cbf_failnez}{\f4 
 executes first the statement }{\i\f4 c}{\f4  and then a return with the error value as argument. If CBFDEBUG is defined, then a report of the error is also printed to the standard error stream, stderr, in the form 
\par 
\par CBFlib error }{\i\f4 f}{\f4  in "symbol" 
\par 
\par where }{\i\f4 f}{\f4  is the decimal value of the error and symbol is the symbolic form. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 f}{\f4 \cell integer function to execute.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 c}{\f4 \cell statement to execute on failure.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 SEE ALSO}{\f4  
\par 
\par 2.3.55 }{\b\f4 cbf_failnez}{\f4 
\par 
\par 
\par 
\par 
\par }{\b\f4 \page 
\par 2.4 High-level function prototypes
\par }{\f4 
\par 2.4.1 }{\b\f4 cbf_read_template}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_read_template}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , FILE *}{\i\f4 file}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_read_template }{\f4 reads the CBF or CIF file }{\i\f4 file}{\f4  into the CBF object specified by }{\i\f4 handle}{\f4  and selects the first datablock as the current datablock. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell Pointer to a CBF handle. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 file}{\f4 \cell Pointer to a file descriptor. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par \page 
\par 2.4.2 }{\b\f4 cbf_get_diffrn_id}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_get_diffrn_id}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char **}{\i\f4 diffrn_id}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_diffrn_id }{\f4 sets *}{\i\f4 diffrn_id}{\f4  to point to the ASCII value of the \ldblquote diffrn.id\rdblquote  entry. 
\par 
\par The }{\i\f4 diffrn_id}{\f4  will be valid as long as the item exists and has not been set to a new value. 
\par 
\par The }{\i\f4 diffrn_id}{\f4  must not be modified by the program in any way. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 diffrn_id}{\f4 \cell Pointer to the destination value pointer.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 

\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.3 }{\b\f4 cbf_set_diffrn_id}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_diffrn_id}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 diffrn_id}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_diffrn_id }{\f4 sets the \ldblquote diffrn.id\rdblquote  entry of the current datablock to the ASCII value }{\i\f4 diffrn_id}{\f4 . 
\par 
\par This function also changes corresponding \ldblquote diffrn_id\rdblquote  entries in the \ldblquote diffrn_source\rdblquote , \ldblquote diffrn_radiation\rdblquote , \ldblquote diffrn_detector\rdblquote  and \ldblquote diffrn_measurement\rdblquote  cat
egories.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 diffrn_id}{\f4 \cell ASCII value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par 
\par \page 
\par 2.4.4 }{\b\f4 cbf_get_crystal_id}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_get_crystal_id}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char **}{\i\f4 crystal_id}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_crystal_id }{\f4 sets *}{\i\f4 crystal_id}{\f4  to point to the ASCII value of the \ldblquote diffrn.crystal_id\rdblquote  entry. 
\par 
\par If the }{\i\f4 value}{\f4  is not ASCII, the function returns CBF_BINARY. 
\par 
\par The }{\i\f4 value}{\f4  will be valid as long as the item exists and has not been set to a new value. 
\par 
\par The }{\i\f4 value}{\f4  must not be modified by the program in any way. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 crystal_id}{\f4 \cell Pointer to the destination value pointer.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 

\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.5 }{\b\f4 cbf_set_crystal_id}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_crystal_id}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , const char *}{\i\f4 crystal_id}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_crystal_id }{\f4 sets the \ldblquote diffrn.crystal_id\rdblquote  entry to the ASCII value }{\i\f4 crystal_id}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 crystal_id}{\f4 \cell ASCII value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.6 }{\b\f4 cbf_get_wavelength}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_get_wavelength}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , double *}{\i\f4 wavelength}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_wavelength }{\f4 sets *}{\i\f4 wavelength}{\f4  to the current wavelength in \u197\'81. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 wavelength}{\f4 \cell Pointer to the destination.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.7 }{\b\f4 cbf_set_wavelength}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_wavelength}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , double }{\i\f4 wavelength}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_wavelength }{\f4 sets the current wavelength in \u197\'81 to }{\i\f4 wavelength}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 wavelength}{\f4 \cell Wavelength in \u197\'81.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.8 }{\b\f4 cbf_get_polarization}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par }{int }{\b cbf_get_polarization}{ (cbf_handle }{\i handle}{, double *}{\i polarizn_source_ratio}{, 
\par }\pard \fi720\widctlpar\adjustright {double *}{\i polarizn_source_norm}{);
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_polarization }{\f4 sets *}{\i\f4 polarizn_source_ratio }{\f4 and *}{\i\f4 polarizn_source_norm}{\f4  to the corresponding source polarization parameters. 
\par 
\par Either destination pointer may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4  polarizn_source_ratio}{\f4 \cell Pointer to the destination polarizn_source_ratio.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd 
\trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4  polarizn_source_norm}{\f4 \cell Pointer to the destination polarizn_source_norm.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row 
}\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.9 }{\b\f4 cbf_set_polarization}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_polarization}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , double }{\i\f4 polarizn_source_ratio}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double }{\i\f4 polarizn_source_norm}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_polarization }{\f4 sets the source polarization to the values specified by }{\i\f4 polarizn_source_ratio}{\f4  and }{\i\f4 polarizn_source_norm}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4  polarizn_source_ratio}{\f4 \cell New value of polarizn_source_ratio.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4  polarizn_source_norm}{\f4 \cell New value of polarizn_source_norm.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {
\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.10 }{\b\f4 cbf_get_divergence}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_get_divergence}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , double *}{\i\f4 div_x_source}{\f4 , double *}{\i\f4 div_y_source}{\f4 ,
\par \tab double *}{\i\f4 div_x_y_source}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_divergence }{\f4 sets *}{\i\f4 div_x_source}{\f4 ,}{\i\f4  *div_y_source}{\f4  and *}{\i\f4 div_x_y_source}{\f4  to the corresponding source divergence parameters. 
\par 
\par Any of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 div_x_source}{\f4 \cell Pointer to the destination div_x_source.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 div_y_source}{\f4 \cell Pointer to the destination div_y_source.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 
div_x_y_source}{\f4 \cell Pointer to the destination div_x_y_source.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.11 }{\b\f4 cbf_ set_divergence}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_divergence}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , double }{\i\f4 div_x_source}{\f4 , double }{\i\f4 div_y_source}{\f4 ,
\par \tab double }{\i\f4 div_x_y_source}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_divergence }{\f4 sets the source divergence parameters to the values specified by d}{\i\f4 iv_x_source}{\f4 ,}{\i\f4  div_y_source}{\f4  and }{\i\f4 div_x_y_source}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 div_x_source}{\f4 \cell New value of div_x_source.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 
div_y_source}{\f4 \cell New value of div_y_source.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 div_x_y_source}{\f4 
\cell New value of div_x_y_source.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.12 }{\b\f4 cbf_count_elements}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_count_elements}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int *}{\i\f4 elements}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_count_elements }{\f4 sets *}{\i\f4 elements}{\f4   to the number of detector elements. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 elements}{\f4 \cell Pointer to the destination count.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page \tab 
\par 2.4.13 }{\b\f4 cbf_get_element_id}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_element_id}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 element_number}{\f4 , const char **}{\i\f4 element_id}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_element_id }{\f4 sets *}{\i\f4 element_id}{\f4  to point to the ASCII value of the }{\i\f4 element_number}{\f4 \rquote th \ldblquote }{\f0 diffrn_data_frame.detector_}{\f4 element_id\rdblquote  entry, counting from 0. 
\par 
\par If the detector element does not exist, the function returns CBF_NOTFOUND. 
\par 
\par The }{\i\f4 element_id}{\f4  will be valid as long as the item exists and has not been set to a new value. 
\par 
\par The }{\i\f4 element_id}{\f4  must not be modified by the program in any way. 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote 
 category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 element_id}{\f4 \cell Pointer to the destination.\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.14 }{\b\f4 cbf_get_gain}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_get_gain}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 element_number}{\f4 , double *}{\i\f4 gain}{\f4 , double *}{\i\f4 gain_esd}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_gain }{\f4 sets *}{\i\f4 gain}{\f4  and *}{\i\f4 gain_esd}{\f4  to the corresponding gain parameters for element number }{\i\f4 element_number}{\f4 . 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Either of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote 
 category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 gain}{\f4 \cell Pointer to the destination gain.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb 
\cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 gain_esd}{\f4 \cell Pointer to the destination gain_esd.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.15 }{\b\f4 cbf_ set_gain}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_gain}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 element_number}{\f4 , double }{\i\f4 gain}{\f4 , double }{\i\f4 gain_esd}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_set_gain }{\f4 sets the gain of element number }{\i\f4 element_number}{\f4  to the values specified by }{\i\f4 gain}{\f4  and }{\i\f4  gain_esd}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote 
 category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 gain}{\f4 \cell New gain value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440
\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 gain_esd}{\f4 \cell New gain_esd value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.16 }{\b\f4 cbf_get_overload}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_get_overload}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 element_number}{\f4 , double *}{\i\f4 overload}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_overload }{\f4 sets *}{\i\f4 overload}{\f4  to the overload value for element number }{\i\f4 element_number}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote 
 category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 overload}{\f4 \cell Pointer to the destination overload.\cell 
}\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.17 }{\b\f4 cbf_ set_overload}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_overload}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int }{\i\f4 element_number}{\f4 , double }{\i\f4 overload}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_set_overload }{\f4 sets the overload value of element number }{\i\f4 element_number}{\f4  to }{\i\f4 overload}{\f4 . 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote 
 category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 overload}{\f4 \cell New overload value.\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.18 }{\b\f4 cbf_get_integration_time}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_integration_time}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , double *}{\i\f4 time}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_integration_time }{\f4 sets *}{\i\f4 time}{\f4  to the integration time in seconds.   The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 time}{\f4 \cell Pointer to the destination time.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.19 }{\b\f4 cbf_set_integration_time}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_integration_time}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , double }{\i\f4 time}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_set_integration_time }{\f4 sets the integration time in seconds to the value specified by }{\i\f4 time}{\f4 .  The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.

\par 
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 time}{\f4 \cell Integration time in seconds.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.20 }{\b\f4 cbf_get_timestamp}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_timestamp}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , double *}{\i\f4 time}{\f4 , int *}{\i\f4 timezone}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_timestamp }{\f4 sets *}{\i\f4 time}{\f4  to the collection timestamp in seconds since January 1 1970.  *}{\i\f4 timezone}{\f4  is set to timezone difference from UTC in minutes.  The parameter }{\i\f4 reserved}{\f4 
 is presently unused and should be set to 0.
\par 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Either of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 time}{\f4 \cell Pointer to the destination collection timestamp.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 
timezone}{\f4 \cell Pointer to the destination timezone difference.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.21 }{\b\f4 cbf_set_timestamp}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_timestamp}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , double }{\i\f4 time, }{\f4 int}{\i\f4  timezone,
\par }\pard \fi720\widctlpar\adjustright {\f4 double}{\i\f4  precision}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_set_timestamp }{\f4 sets the collection timestamp in seconds since January 1 1970 to the value specified by }{\i\f4 time}{\f4 .  The timezone difference from UTC in minutes is set to }{\i\f4 
timezone}{\f4 .   If no timezone is desired, }{\i\f4 timezone}{\f4  should be CBF_NOTIMEZONE.  The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par The precision of the new timestamp is specified by the value }{\i\f4 precision}{\f4  in seconds.  If }{\i\f4 precision}{\f4  is 0, the saved timestamp is assumed accurate to 1 second}{\i\f4 .}{\f4  
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 time}{\f4 \cell Timestamp in seconds since January 1 1970.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 timezone}{\f4 \cell Timezone difference from UTC in minutes or CBF_NOTIMEZONE.\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 precision}{\f4 \cell Timestamp precision in seconds.\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.22 }{\b\f4 cbf_get_datestamp}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_datestamp}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , int *}{\i\f4 year}{\f4 , int *}{\i\f4 month}{\f4 , int *}{\i\f4 day}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 int *}{\i\f4 hour}{\f4 , int *}{\i\f4 minute}{\f4 , double *}{\i\f4 second}{\f4 , int *}{\i\f4 timezone}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_datestamp }{\f4 sets *}{\i\f4 year}{\f4 , *}{\i\f4 month}{\f4 , *}{\i\f4 day}{\f4 , *}{\i\f4 hour}{\f4 , *}{\i\f4 minute}{\f4  and *}{\i\f4 second}{\f4  to the corresponding values of the collection timestamp.  *}{\i\f4 timezone}{\f4 
 is set to timezone difference from UTC in minutes.  The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Any of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 year}{\f4 \cell Pointer to the destination timestamp year.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 month}{\f4 \cell Pointer to the destination timestamp month (1-12).\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 day}{\f4 \cell Pointer to the destination timestamp day (1-31).\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 hour}{\f4 
\cell Pointer to the destination timestamp hour (0-23).\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 minute}{\f4 \cell Pointer to the destination timestamp minute (0-59).\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 second}{\f4 \cell Pointer to the destination timestamp second (0-60.0).\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb 
\cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 timezone}{\f4 \cell Pointer to the destination timezone difference from UTC in minutes.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {
\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.23 }{\b\f4 cbf_set_datestamp}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_datestamp}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , int }{\i\f4 year}{\f4 , int }{\i\f4 month}{\f4 , int }{\i\f4 day}{\f4 , int }{\i\f4 hour}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 int }{\i\f4 minute}{\f4 , double }{\i\f4 second}{\f4 , int }{\i\f4 timezone}{\f4 , double }{\i\f4 precision}{\f4 );
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_set_datestamp }{\f4 sets the collection timestamp in seconds since January 1 1970 to the value specified by }{\i\f4 time}{\f4 .  The timezone difference from UTC in minutes is set to }{\i\f4 
timezone}{\f4 .   If no timezone is desired, }{\i\f4 timezone}{\f4  should be CBF_NOTIMEZONE.  The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par The precision of the new timestamp is specified by the value }{\i\f4 precision}{\f4  in seconds.  If }{\i\f4 precision}{\f4  is 0, the saved timestamp is assumed accurate to 1 second}{\i\f4 .}{\f4  
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 time}{\f4 \cell Timestamp in seconds since January 1 1970.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 timezone}{\f4 \cell Timezone difference from UTC in minutes or CBF_NOTIMEZONE.\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 precision}{\f4 \cell Timestamp precision in seconds.\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.24 }{\b\f4 cbf_set_current_timestamp}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_set_current_timestamp}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , int }{\i\f4 timezone}{\f4 )
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 DESCRIPTION}{\f4  
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_set_current_timestamp }{\f4 sets the collection timestamp to the current time.  The timezone difference from UTC in minutes is set to }{\i\f4 timezone}{\f4 .   If no timezone is desired, }{
\i\f4 timezone}{\f4  should be CBF_NOTIMEZONE.  If no timezone is used, the timestamp will be UTC.  The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par The new timestamp will have a precision of 1 second}{\i\f4 .}{\f4  
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 timezone}{\f4 \cell Timezone difference from UTC in minutes or CBF_NOTIMEZONE.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.25 }{\b\f4 cbf_get_image_size}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_image_size}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , unsigned int }{\i\f4 element_number}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 size_t *}{\i\f4 ndim1}{\f4 , size_t *}{\i\f4 ndim2}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_image_size }{\f4 sets *}{\i\f4 ndim1}{\f4  and  *}{\i\f4 ndim2}{\f4  to the slow and fast dimensions of the image array for element number }{\i\f4 element_number}{\f4 .   If the array is 1-dimensional, *}{\i\f4 ndim1}{\f4 
 will be set to the array size and *}{\i\f4 ndim2}{\f4  will be set to 1. 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Either of the destination pointers may be NULL.
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote  category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 ndim1}{\f4 \cell Pointer to the destination slow dimension.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 ndim2}{
\f4 \cell Pointer to the destination fast dimension.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.26 }{\b\f4 cbf_get_image}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_image}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , unsigned int }{\i\f4 element_number}{\f4 , void *}{\i\f4 array}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 size_t }{\i\f4 elsize}{\f4 , int }{\i\f4 elsign}{\f4 , size_t }{\i\f4 ndim1}{\f4 , size_t }{\i\f4 ndim2}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_image}{\f4  reads the image array for element number }{\i\f4 element_number}{\f4  into an array.  The array consists of }{\i\f4 ndim1}{\f4 \u215\'5f}{\i\f4 ndim2}{\f4  elements of }{\i\f4 elsize}{\f4  bytes each, starting at }{\i\f4 array}
{\f4 .  The elements are signed if }{\i\f4 elsigned}{\f4  is non-0 and unsigned otherwise.  
\par 
\par }{\b\f4 NEW for v0.7.2.3:}{\f4  Irrespective of whether the array indices were }{\b\f4 increasing}{\f4  or }{\b\f4 decreasing}{\f4  in the file, the data will be read into memory with }{\b\f4 increasing}{\f4 
 indices.  In prior versions, the array was read as written.  To retain the original behavior, #define the symbol CBF_0721_READS. 
\par 
\par If the array is 1-dimensional, }{\i\f4 ndim1}{\f4  should be the array size and }{\i\f4 ndim2}{\f4  should be set to 1.}{\f4\fs14 
\par 
\par }{\f4 If any element in the binary data can\rquote t fit into the destination element, the destination is set the nearest possible value. }{\f4\fs14 
\par 
\par }{\f4 If the value is not binary, the function returns CBF_ASCII. }{\f4\fs14 
\par 
\par }{\f4 If the requested number of elements can\rquote t be read, the function will read as many as it can and then return CBF_ENDOFDATA. }{\f4\fs14 
\par 
\par }{\f4 Currently, the destination }{\i\f4 array}{\f4  must consist of chars, shorts or ints (signed or unsigned). If }{\i\f4 elsize}{\f4  is not equal to sizeof (char), sizeof (short) or sizeof (int), the function returns CBF_ARGUMENT. }{\f4\fs14 
\par 
\par }{\f4 An additional restriction in the current version of CBFlib is that values too large to fit in an int are not correctly decompressed. As an example, if the machine with 32-bit ints is reading an array containing a value outside the range 0 .. 2}{
\f4\super 32}{\f4 -1 (unsigned) or -2}{\f4\super 31}{\f4  .. 2}{\f4\super 31}{\f4 -1 (signed), the array will not be correctly decompressed. This restriction will be removed in a future release. 
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote  category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 array}{\f4 \cell Pointer to the destination array.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elsize}{\f4 \cell Size in bytes of each destination array element.\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elsigned}{\f4 \cell Set to non-0 if the destination array elements are signed.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 
ndim1}{\f4 \cell Slow array dimension.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 ndim2}{\f4 \cell 
Fast array dimension.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.27 }{\b\f4 cbf_set_image}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_set_image}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , unsigned int }{\i\f4 element_number}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 unsigned int }{\i\f4 compression}{\f4 , void *}{\i\f4 array}{\f4 , size_t }{\i\f4 elsize}{\f4 , int }{\i\f4 elsign}{\f4 , size_t }{\i\f4 ndim1}{\f4 , size_t }{\i\f4 ndim2}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_image}{\f4  writes the image array for element number }{\i\f4 element_number}{\f4 .  The array consists of }{\i\f4 ndim1}{\f4 \u215\'5f}{\i\f4 ndim2}{\f4  elements of }{\i\f4 elsize}{\f4  bytes each, starting at }{\i\f4 array}{\f4 
.  The elements are signed if }{\i\f4 elsigned}{\f4  is non-0 and unsigned otherwise. 
\par 
\par If the array is 1-dimensional, }{\i\f4 ndim1}{\f4  should be the array size and }{\i\f4 ndim2}{\f4  should be set to 1.}{\f4\fs14 
\par 
\par }{\f4 The }{\i\f4 array}{\f4  will be compressed using the compression scheme specifed by }{\i\f4 compression}{\f4 .  Currently, the available schemes are: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBF_CANONICAL\cell Canonical-code compression (section 3.3.1)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd 
\trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBF_PACKED\cell CCP4-style packing (section 3.3.2) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBF_NONE\cell No compression. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par The values compressed are limited to 64 bits. If any element in the }{\i\f4 array}{\f4  is larger than 64 bits, the value compressed is the nearest 64-bit value. 
\par 
\par Currently, the source }{\i\f4 array}{\f4  must consist of chars, shorts or ints (signed or unsigned). If }{\i\f4 elsize}{\f4  is not equal to sizeof (char), sizeof (short) or sizeof (int), the function returns CBF_ARGUMENT. 
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote  category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 compression}{\f4 \cell Compression type.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 array}{\f4 \cell Pointer to the destination array.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\i\f4 elsize}{\f4 \cell Size in bytes of each destination array element.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 elsigned}{\f4 \cell 
Set to non-0 if the destination array elements are signed.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 ndim1}{\f4 \cell Slow array dimension.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd 
\trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 ndim2}{\f4 \cell Fast array dimension.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.28 }{\b\f4 cbf_get_axis_setting}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_axis_setting}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , const char *}{\i\f4 axis_id}{\f4 , double *}{\i\f4 start}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double *}{\i\f4 increment}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_axis_setting }{\f4 sets *}{\i\f4 start}{\f4  and *}{\i\f4 increment}{\f4  to the corresponding values of the axis }{\i\f4 axis_id}{\f4 .
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Either of the destination pointers may be NULL.
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 axis_id}{\f4 \cell Axis id.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 start}{\f4 \cell Pointer to the destination start value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd 
\trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 increment}{\f4 \cell Pointer to the destination increment value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.29 }{\b\f4 cbf_set_axis_setting}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_set_axis_setting}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , const char *}{\i\f4 axis_id}{\f4 , double }{\i\f4 start}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double }{\i\f4 increment}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_set_axis_setting }{\f4 sets the starting and increment values of the axis }{\i\f4 axis_id}{\f4  to }{\i\f4 start}{\f4  and }{\i\f4 increment}{\f4 .
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 axis_id}{\f4 \cell Axis id.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 start}{\f4 \cell Start value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 increment}{\f4 \cell Increment value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.30 }{\b\f4 cbf_construct_goniometer}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_construct_goniometer}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , cbf_goniometer *}{\i\f4 goniometer}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_construct_goniometer }{\f4 constructs a goniometer object using the description in the CBF object }{\i\f4 handle }{\f4 and initialises the goniometer handle *}{\i\f4 goniometer}{\f4 .
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 goniometer}{\f4 \cell Pointer to the destination goniometer handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {
\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.31 }{\b\f4 cbf_free_goniometer}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_free_goniometer}{\f4  (cbf_goniometer }{\i\f4 goniometer}{\f4 ); 
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_free_goniometer}{\f4  destroys the goniometer object specified by }{\i\f4 goniometer}{\f4  and frees all associated memory. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 goniometer}{\f4 \cell Goniometer handle to free. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par }{\b\f4 \page }{\f4 
\par 2.4.32 }{\b\f4 cbf_get_rotation_axis}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_rotation_axis}{\f4  (cbf_goniometer }{\i\f4 goniometer}{\f4 , unsigned int }{\i\f4 reserved}{\f4 , double *}{\i\f4 vector1}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double *}{\i\f4 vector2}{\f4 , double }{\i\f4 vector3}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_rotation_axis }{\f4 sets *}{\i\f4 vector1}{\f4 , *}{\i\f4 vector2}{\f4 , and *}{\i\f4 vector3}{\f4  to the 3 components of the goniometer rotation axis used for the exposure.
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Any of the destination pointers may be NULL.
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 goniometer}{\f4 \cell Goniometer handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 vector1}{\f4 \cell Pointer to the destination }{\i\f4 x}{\f4  component of the rotation axis.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 vector2}{\f4 \cell }\pard\plain 
\s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Pointer to the destination }{\i\f4 y}{\f4  component of the rotation axis.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb 
\cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 vector3}{\f4 \cell Pointer to the destination }{\i\f4 z}{\f4  component of the rotation axis.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.33 }{\b\f4 cbf_get_rotation_range}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_rotation_range}{\f4  (cbf_goniometer }{\i\f4 goniometer}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , double *}{\i\f4 start}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double *}{\i\f4 increment}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_rotation_range }{\f4 sets *}{\i\f4 start}{\f4  and *}{\i\f4 increment}{\f4  to the corresponding values of the goniometer rotation axis used for the exposure.
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Either of the destination pointers may be NULL.
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 goniometer}{\f4 \cell Goniometer handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\i\f4 start}{\f4 \cell Pointer to the destination start value.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 increment}{
\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Pointer to the destination increment value.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.34 }{\b\f4 cbf_rotate_vector}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_rotate_vector}{\f4  (cbf_goniometer }{\i\f4 goniometer}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , double }{\i\f4 ratio}{\f4 , double }{\i\f4 initial1}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double }{\i\f4 initial2}{\f4 , double }{\i\f4 initial3}{\f4 , double *}{\i\f4 final1}{\f4 , double *}{\i\f4 final2}{\f4 , double *}{\i\f4 final3}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_rotate_vector }{\f4 sets *}{\i\f4 final1}{\f4 , *}{\i\f4 final2}{\f4 , and *}{\i\f4 final3}{\f4  to the 3 components of the of the vector (}{\i\f4 initial1}{\f4 , }{\i\f4 initial2}{\f4 , }{\i\f4 initial3}{\f4 
) after reorientation by applying the goniometer rotations.  The value }{\i\f4 ratio}{\f4  specifies the goniometer setting and varies from 0.0 at the beginning of the exposure to 1.0 at the end, irrespective of the actual rotation range.
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Any of the destination pointers may be NULL.
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 goniometer}{\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Goniometer handle.\cell 
}\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell 
Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 ratio}{\f4 \cell Goniometer setting.  0 = beginning of exposure, 1 = end.\cell }\pard \widctlpar\intbl\adjustright {
\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 initial1}{\f4 \cell }{\i\f4 x}{\f4  component of the initial vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 initial2}{\f4 \cell }{\i\f4 y}{\f4 
 component of the initial vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 initial3}{\f4 \cell }{\i\f4 z}{\f4  component of the initial vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\i\f4 vector1}{\f4 \cell Pointer to the destination }{\i\f4 x}{\f4  component of the final vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 vector2}{\f4 \cell }\pard\plain 
\s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Pointer to the destination }{\i\f4 y}{\f4  component of the final vector.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb 
\cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 vector3}{\f4 \cell Pointer to the destination }{\i\f4 z}{\f4  component of the final vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.35 }{\b\f4 cbf_get_reciprocal}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_reciprocal}{\f4  (cbf_goniometer }{\i\f4 goniometer}{\f4 , unsigned int  }{\i\f4 reserved}{\f4 , double }{\i\f4 ratio}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double }{\i\f4 wavelength}{\f4 , double }{\i\f4 real1}{\f4 , double }{\i\f4 real2}{\f4 , double }{\i\f4 real3}{\f4 , double *}{\i\f4 reciprocal1}{\f4 ,
\par double *}{\i\f4 reciprocal2}{\f4 , double *}{\i\f4 reciprocal3}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_get_reciprocal }{\f4 sets *}{\i\f4 reciprocal1}{\f4 , *}{\i\f4  reciprocal2}{\f4 , and *}{\i\f4  reciprocal3}{\f4  to the 3 components of the of the reciprocal-
space vector corresponding to the real-space vector (}{\i\f4 real1}{\f4 , }{\i\f4 real2}{\f4 , }{\i\f4 real3}{\f4 ).  The reciprocal-space vector is oriented to correspond to the goniometer setting with all axes at 0.  The value }{\i\f4 wavelength}{\f4 
 is the wavlength in \u197\'81 and the value }{\i\f4 ratio}{\f4  specifies the current goniometer setting and varies from 0.0 at the beginning of the exposure to 1.0 at the end, irrespective of the actual rotation range.
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Any of the destination pointers may be NULL.
\par 
\par The parameter }{\i\f4 reserved}{\f4  is presently unused and should be set to 0.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 goniometer}{\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Goniometer handle.\cell 
}\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reserved}{\f4 \cell 
Unused.  Any value other than 0 is invalid.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 ratio}{\f4 \cell Goniometer setting.  0 = beginning of exposure, 1 = end.\cell }\pard \widctlpar\intbl\adjustright {
\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 wavelength}{\f4 \cell Wavelength in \u197\'81.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 real1}{\f4 \cell }{\i\f4 x}{\f4 
 component of the real-space vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 real2}{\f4 \cell }{\i\f4 y}{\f4  component of the real-space vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row 
}\pard \widctlpar\intbl\adjustright {\i\f4 real3}{\f4 \cell }{\i\f4 z}{\f4  component of the real-space vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 reciprocal1}{\f4 \cell 
Pointer to the destination }{\i\f4 x}{\f4  component of the reciprocal-space vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 reciprocal2}{\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright 
\f12\fs20\cgrid {\f4 Pointer to the destination }{\i\f4 y}{\f4  component of the reciprocal-space vector.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440
\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 reciprocal3}{\f4 \cell Pointer to the destination }{\i\f4 z}{\f4  component of the reciprocal-space vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.36 c}{\b\f4 bf_construct_detector}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int c}{\b\f4 bf_construct_detector}{\f4  (cbf_handle }{\i\f4 handle}{\f4 , cbf_detector *}{\i\f4 detector}{\f4 , unsigned int }{\i\f4 element_number}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par c}{\b\f4 bf_construct_detector }{\f4 constructs a detector object for detector element number }{\i\f4 element_number}{\f4  using the description in the CBF object }{\i\f4 handle }{\f4 and initialises the detector handle *}{\i\f4 detector}{\f4 .
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 handle}{\f4 \cell CBF handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 detector}{\f4 \cell Pointer to the destination detector handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 element_number}{\f4 \cell The number of the detector element counting from 0 by order of appearance in the \ldblquote diffrn_data_frame\rdblquote 
 category.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.37 }{\b\f4 cbf_free_detector}{\f4  
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par 
\par int }{\b\f4 cbf_free_detector}{\f4  (cbf_detector }{\i\f4 detector}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_free_detector}{\f4  destroys the detector object specified by }{\i\f4 detector}{\f4  and frees all associated memory. 
\par 
\par }{\b\f4 ARGUMENTS
\par }{\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 detector}{\f4 \cell Detector handle to free. \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.38 }{\b\f4 cbf_get_beam_center}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_beam_center}{\f4  (cbf_detector }{\i\f4 detector}{\f4 , double *}{\i\f4 index1}{\f4 , double *}{\i\f4 index2}{\f4 , double *}{\i\f4 center1}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double *}{\i\f4 center2}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_beam_center }{\f4 sets *}{\i\f4 center1}{\f4  and *}{\i\f4 center2}{\f4  to the displacements in mm along the detector axes from pixel (0, 0) to the point at which the beam intersects the detector and *}{\i\f4 index1}{\f4  and *}{\i\f4 
index2}{\f4  to the corresponding indices.
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 Any of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 detector}{\f4 \cell Detector handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 index1}{\f4 \cell Pointer to the destination slow index.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 
index2}{\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Pointer to the destination fast index.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 center1}{\f4 
\cell Pointer to the destination displacement along the slow axis.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 center2
}{\f4 \cell Pointer to the destination displacement along the fast axis.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.39 }{\b\f4 cbf_get_detector_distance}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_detector_distance}{\f4  (cbf_detector }{\i\f4 detector}{\f4 , double *}{\i\f4 distance}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }{\b\f4 cbf_get_detector_distance }{\f4 sets *}{\i\f4 distance}{\f4  to the nearest distance from the sample position to the detector plane.
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 detector}{\f4 \cell Detector handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 distance}{\f4 \cell Pointer to the destination distance.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page  
\par 2.4.40 }{\b\f4 cbf_get_detector_normal}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_detector_normal}{\f4  (cbf_detector }{\i\f4 detector}{\f4 , double *}{\i\f4 normal1}{\f4 , double *}{\i\f4 normal2}{\f4 , 
\par }\pard \fi720\widctlpar\adjustright {\f4 double *}{\i\f4 normal3}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_get_detector_normal }{\f4 sets *}{\i\f4 normal1}{\f4 , *}{\i\f4 normal2}{\f4 , and *}{\i\f4 normal3}{\f4  to the 3 components of t
he of the normal vector to the detector plane.  The vector is normalized.
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par Any of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 detector}{\f4 \cell Detector handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 normal1}{\f4 \cell Pointer to the destination }{\i\f4 x}{\f4  component of the normal vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\i\f4 normal2}{\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Pointer to the destination }{\i\f4 y}{\f4  component of the normal vector.\cell }\pard\plain \widctlpar\intbl\adjustright 
\f12\fs20\cgrid {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 normal3}{\f4 \cell Pointer to the destination }{\i\f4 z}{\f4  component of the normal vector.\cell 
}\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.41 }{\b\f4 cbf_get_pixel_coordinates}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_pixel_coordinates}{\f4  (cbf_detector }{\i\f4 detector}{\f4 , double }{\i\f4 index1}{\f4 , double }{\i\f4 index2}{\f4 , double *}{\i\f4 coordinate1}{\f4 ,
\par \tab double *}{\i\f4 coordinate2}{\f4 , double *}{\i\f4 coordinate3}{\f4 );
\par 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_get_pixel_coordinates }{\f4 sets *}{\i\f4 coordinate1}{\f4 , *}{\i\f4 coordinate2}{\f4 , and *}{\i\f4 coordinate3}{\f4  to the vector position of pixel (}{\i\f4 index1}{\f4 , }{\i\f4 
index2}{\f4 ) on the detector surface.  If index1 and }{\i\f4 index2}{\f4  are integers then the coordinates correspond to the center of a pixel. 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par Any of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 detector}{\f4 \cell Detector handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 index1}{\f4 \cell Slow index.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 index2}{\f4 \cell 
}\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Fast index.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 coordinate1}{\f4 \cell Pointer to the destination }{\i\f4 x}
{\f4  component.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 coordinate2}{\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Pointer to the destination }{\i\f4 y}{\f4  component.
\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 coordinate3}{\f4 \cell Pointer to the destination }
{\i\f4 z}{\f4  component.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.42 }{\b\f4 cbf_get_pixel_normal}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_pixel_normal}{\f4  (cbf_detector }{\i\f4 detector}{\f4 , double }{\i\f4 index1}{\f4 , double }{\i\f4 index2}{\f4 ,  double *}{\i\f4 normal1}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double *}{\i\f4 normal2}{\f4 , double *}{\i\f4 normal3}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_get_detector_normal }{\f4 sets *}{\i\f4 normal1}{\f4 , *}{\i\f4 normal2}{\f4 , and *}{\i\f4 normal3}{\f4  to the 3 components of the of the normal vector to the pixel at (}{\i\f4 index1}{
\f4 , }{\i\f4 index2}{\f4 ).  The vector is normalized.
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par Any of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 detector}{\f4 \cell Detector handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 index1}{\f4 \cell Slow index.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 index2}{\f4 \cell 
}\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Fast index.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 normal1}{\f4 \cell Pointer to the destination }{\i\f4 x}{
\f4  component of the normal vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 normal2}{\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Pointer to the destination }{\i\f4 y}{
\f4  component of the normal vector.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 normal3}{\f4 
\cell Pointer to the destination }{\i\f4 z}{\f4  component of the normal vector.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par \page 
\par 2.4.43 }{\b\f4 cbf_get_pixel_area}{\f4 
\par 
\par 
\par }{\b\f4 PROTOTYPE}{\f4  
\par 
\par #include "cbf_simple.h"
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 int }{\b\f4 cbf_get_pixel_area}{\f4  (cbf_detector }{\i\f4 detector}{\f4 , double }{\i\f4 index1}{\f4 , double }{\i\f4 index2}{\f4 , double *}{\i\f4 area}{\f4 ,
\par }\pard \fi720\widctlpar\adjustright {\f4 double *}{\i\f4 projected_area}{\f4 );
\par }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 DESCRIPTION}{\f4  
\par 
\par }\pard\plain \s15\widctlpar\adjustright \f12\fs20\cgrid {\b\f4 cbf_get_pixel_area }{\f4 sets *}{\i\f4 area}{\f4  to the area of the pixel at (}{\i\f4 index1}{\f4 , }{\i\f4 index2}{\f4 ) on the detector surface and *}{\i\f4 projected_area}{\f4 
 to the apparent area of the pixel as viewed from the sample position. 
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par Either of the destination pointers may be NULL.
\par 
\par }{\b\f4 ARGUMENTS}{\f4 
\par \~
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 detector}{\f4 \cell Detector handle.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 index1}{\f4 \cell Slow index.\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 index2}{\f4 \cell 
}\pard\plain \s15\widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 Fast index.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\pard \widctlpar\intbl\adjustright {\i\f4 area}{\f4 \cell Pointer to the destination area in mm2.
\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\i\f4 projected_area}{\f4 \cell }\pard\plain \s15\widctlpar\intbl\adjustright 
\f12\fs20\cgrid {\f4 Pointer to the destination apparent area in mm2.\cell }\pard\plain \widctlpar\intbl\adjustright \f12\fs20\cgrid {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 RETURN VALUE}{\f4  
\par 
\par Returns an error code on failure or 0 for success. 
\par }{\b\f4\fs28 \sect }\sectd \sbkodd\linex0\endnhere\sectdefaultcl \pard\plain \s1\sb240\sa60\keepn\nowidctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning32\cgrid {\f0\fs28 3. File format
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par }{\b\f4 3.1 General description}{\f4 
\par 
\par With the exception of the binary sections, a CBF file is an mmCIF-format ASCII file, so a CBF file with no binary sections is a CIF file. An imgCIF file has any binary sections encoded as CIF-format ASCII strings and is a CIF file whether or not it contai
ns binary sections. In most cases, CBFlib can also be used to access normal CIF files as well as CBF and imgCIF files. 
\par 
\par 
\par }{\b\f4 3.2 Format of the binary sections}{\f4 
\par 
\par Before getting to the binary data itself, there are some preliminaries to allow a smooth transition 
from the conventions of CIF to those of raw or encoded streams of "octets" (8-bit bytes). The binary data is given as the essential part of a specially formatted semicolon-delimited CIF multi-line text string. This text string is the value associated with
 the tag "_array_data.data". 
\par 
\par The specific format of the binary sections differs between an imgCIF and a CBF file. 
\par 
\par 
\par }{\b\f4 3.2.1 Format of imgCIF binary sections}{\f4 
\par 
\par Each binary section is encoded as a ;-delimited string. Within the text string, the conventions de
veloped for transmitting email messages including binary attachments are followed. There is secondary ASCII header information, formatted as Multipurpose Internet Mail Extensions (MIME) headers (see RFCs 2045-49 by Freed, et. al). The boundary marker for 
the beginning of all this is the special string 
\par 
\par --CIF-BINARY-FORMAT-SECTION--
\par 
\par at the beginning of a line. The initial "--" says that this is a MIME  boundary. We cannot put "###" in front of it and conform to MIME  conventions. Immediately after the boun
dary marker are MIME headers,  describing some useful information we will need to process the binary section. MIME headers can appear in different orders, and can be very confusing (look at the raw contents of a email message with attachments), but there 
i
s only one header which is has to be understood to process an imgCIF: "Content-Transfer-Encoding". If the value given on this header is "BINARY", this is a CBF and the data will be presented as raw binary, containing a count (in the header described in 3.
2.2 Format of CBF binary sections) so we'll know when to start looking for more information. 
\par 
\par If the value given for "Content-Tranfer-Encoding" is one of the real encodings: "BASE64", "QUOTED-PRINTABLE", "X-BASE8", "X-BASE10" or "X-BASE16", the file is an 
imgCIF, and we'll need some other the other headers to process the encoded binary data properly. It is a good practice to give headers in all cases. The meanings of various encodings is given in the CBF extensions dictionary, cif_img_1.1.3.dic. 
\par 
\par The "Content-Type" header tells us what sort of data we have (currently 
\par always "application/octet-stream" for a miscellaneous stream of binary data) and, optionally, the conversions that were applied to the original data. In this case we have compressed the data with the "CBF-PACKED" algorithm. 
\par 
\par The "X-Binary-ID" header should contain the same value as was given for "_array_data.}{\i\f4 binary_id}{\f4 ". 
\par 
\par The "X-Binary-Size" header gives the expected size of the binary data.  This is the size after any compressions, but before
 any ascii encodings.  This is useful in making a simple check for a missing portion of this file. The 8 bytes for the Compression type (see below) are not counted in this field, so the value of "X-Binary-Size" is 8 less than the quantity in bytes 12-19 o
f raw binary data ( 3.2.2 Format of CBF binary 
\par sections). 
\par 
\par The optional "Content-MD5" header provides a much more sophisticated check on the integrity of the binary data. Note that this check value is applied to the data after the 8 bytes for the Compression type. 
\par 
\par A blank line separator immediately precedes the start of the encoded binary data. Blank spaces may be added prior to the preceding "line separator" if desired (e.g. to force word or block alignment). 
\par 
\par Because CBFLIB may jump forward in the file from the MIME header, the 
\par length of encoded data cannot be greater than the value defined by "X-Binar
y-Size" (except when "X-Binary-Size" is zero, which means that the size is unknown). At exactly the byte following the full binary section as defined by the length value is the end of binary section identifier. This consists of the line-termination sequen
ce followed by: 
\par 
\par 
\par --CIF-BINARY-FORMAT-SECTION----
\par ;
\par 
\par 
\par with each of these lines followed by a line-termination sequence. This brings us back into a normal CIF environment. This identifier is, in a sense, redundant because the binary data length value tells 
the a program how many bytes to jump over to the end of the binary data. This redundancy has been deliberately added for error checking, and for possible file recovery in the case of a corrupted file and this identifier must be present at the end of every
 block of binary data. 
\par 
\par 
\par }{\b\f4 3.2.2 Format of CBF binary sections}{\f4 
\par 
\par In a CBF file, each binary section is encoded as a ;-delimited string, starting with an arbitrary number of pure-ASCII characters. 
\par 
\par }{\b\f4 Note:}{\f4  For historical reasons, CIFlib has the option of writin
g simple header and footer sections: "START OF BINARY SECTION" at the start of a binary section and "END OF BINARY SECTION" at the end of a binary section, or writing MIME-type header and footer sections (3.2.1 Format of imgCIF binary sections). If the si
mple header is used, the actual ASCII text is ignored when the binary section is read. Use of the simple binary header is deprecated. 
\par 
\par The MIME header is recommended. 
\par 
\par Between the ASCII header and the actual CBF binary data is a series of bytes ("octets") to try to stop the listing of the header, bytes which define the binary identifier which should match the "}{\i\f4 binary_id}{\f4 
" defined in the header, and bytes which define the length of the binary section.
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx1360\clvertalt\cltxlrtb \cellx2800\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\b\f4 Octet \cell Hex \cell Decimal \cell Purpose \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx1360\clvertalt\cltxlrtb \cellx2800\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~1 \cell \~\~0D \cell \~
\~12 \cell \~\~(ctrl-L) End of Page \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~2 \cell \~\~1A \cell \~\~26 \cell \~\~(ctrl-Z) Stop listings in MS-DOS \cell }\pard \widctlpar\intbl\adjustright {\f4 
\row }\pard \widctlpar\intbl\adjustright {\f4 \~\~3 \cell \~\~04 \cell \~\~04 \cell \~\~(Ctrl-D) Stop listings in UNIX \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~4 \cell \~\~D5 \cell \~\~213 \cell \~\~
Binary section begins \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx1360\clvertalt\cltxlrtb \cellx2800\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard 
\widctlpar\intbl\adjustright {\f4 \~\~5..5+n-1\cell \~\~\~\cell \~\~\~\cell \~\~Binary data (n octets) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par 
\par NOTE: When a MIME header is used, only bytes 5..5+n-1 are considered in 
\par computing the size and the message digest, and only these bytes are encoded for the equivalent imgCIF file using the indicated Content-Transfer-Encoding. 
\par 
\par If no MIME header has been requested (a deprecated use), then bytes 5 through 28 are used for three 8-byte words to hold the }{\i\f4 binary_id}{\f4 , the size and the compression type: 
\par }\pard \keep\keepn\widctlpar\adjustright {\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8560\pard \keep\keepn\widctlpar\intbl\adjustright {\f4 \~\~5..12 \cell Binary Section Identifier (See _array_data.}{\i\f4 binary_id}{\f4 ) 64-bit, little endian \cell 
}\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8560\pard \widctlpar\intbl\adjustright {\f4 \~\~13..20 \cell The size (n) of the binary se
ction in octets (i.e. the offset from octet 29 to the first byte following the data) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~21..28\cell Compression type:\cell }\pard \widctlpar\intbl\adjustright {
\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx4960\clvertalt\cltxlrtb \cellx7480\pard \widctlpar\intbl\adjustright {\f4 \cell \~\~CBF_NONE \cell \~\~0x0040 (64) \cell }\pard \widctlpar\intbl\adjustright {\f4 
\row }\pard \widctlpar\intbl\adjustright {\f4 \cell \~\~CBF_CANONICAL \cell \~\~0x0050 (80) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \cell \~\~CBF_PACKED \cell \~\~0x0060 (96) \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \cell \~\~CBF_BYTE_OFFSET \cell \~\~0x0070 (112) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440
\clvertalt\cltxlrtb \cellx4960\clvertalt\cltxlrtb \cellx7480\pard \widctlpar\intbl\adjustright {\f4 \cell \~\~CBF_PREDICTOR \cell \~\~0x0080 (128) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 \~\~... \tab \~\~\~

\par 
\par The binary data then follows in bytes 29 through 29+n-1. 
\par 
\par The binary characters serve specific purposes: 
\par 
\par 
\par *\tab The Control-L (from-feed) will terminate printing of the current page on 
\par most operating systems. 
\par 
\par *\tab The Control-Z will stop the listing of the file on MS-DOS type operating 
\par systems. 
\par 
\par *\tab The Control-D will stop the listing of the file on Unix type operating systems. 
\par 
\par *\tab The unsigned byte value 213 (decimal) is binary 11010101. (Octal 325, 
\par and hexadecimal D5). This has the eighth bit set so can be used for error checking on 7-bit transmission. It is also asymmetric, but with the first bit also set in the case that the bit order could be reversed (which is not a known concern). 
\par 
\par *\tab (The carriage return, line-feed pair before the START_OF_BIN and other 
\par lines can also be used to check that the file has not been corrupted e.g. by being sent by ftp in ASCII mode.) 
\par 
\par 
\par 
\par At present three compression schemes are implemented are defined: CBF_NONE (for
 no compression), CBF_CANONICAL (for and entropy-coding scheme based on the canonical-code algorithm described by Moffat, et al. (International Journal of High Speed Electronics and Systems, Vol 8, No 1 (1997) 179-231)) and CBF_PACKED for a CCP4-style pac
king scheme. Othercompression schemes will be added to this list in the future. 
\par 
\par 
\par For historical reasons, CBFlib can read or write a binary string without a MIME header. The structure of a binary string with simple headers is: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx1360\clvertalt\cltxlrtb \cellx2800\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\b\f4 Byte\cell ASCII Symbol\cell Decimal Value\cell Description\cell 
}\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx1360\clvertalt\cltxlrtb \cellx2800\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~1\cell \~\~;
\cell \~\~59\cell Initial ; delimiter\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~2\cell carriage-return\cell \~\~13\cell The CBF new-line code is carriage-return, line-feed\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~3\cell line-feed\cell \~\~10\cell \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~4\cell \~\~S\cell \~\~83\cell \~\~\cell 
}\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~5\cell \~\~T\cell \~\~84\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~6\cell \~\~A\cell \~\~65\cell \~
\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~7\cell \~\~R\cell \~\~83\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~8\cell \~\~T\cell \~\~84
\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~9\cell \~\~\cell \~\~32\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~10\cell \~\~O
\cell \~\~79\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~11\cell \~\~F\cell \~\~70\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~12
\cell \~\~\cell \~\~32\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~13\cell \~\~B\cell \~\~66\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {
\f4 \~\~14\cell \~\~I\cell \~\~73\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~15\cell \~\~N\cell \~\~78\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~16\cell \~\~A\cell \~\~65\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~17\cell \~\~R\cell \~\~83\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 
\row }\pard \widctlpar\intbl\adjustright {\f4 \~\~18\cell \~\~Y\cell \~\~89\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~19\cell \~\~\cell \~\~32\cell \~\~\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~20\cell \~\~S\cell \~\~83\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~21\cell \~\~E\cell \~\~69\cell \~\~
\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~22\cell \~\~C\cell \~\~67\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~23\cell \~\~T\cell \~\~84
\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~24\cell \~\~I\cell \~\~73\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~25\cell \~\~O
\cell \~\~79\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~26\cell \~\~N\cell \~\~78\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~27
\cell carriage-return\cell \~\~13\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~28\cell \~\~line-feed\cell \~\~10\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~29\cell \~\~form-feed\cell \~\~12\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~30\cell \~\~substitute\cell \~\~26\cell 
Stop the listing of the file in MS-DOS\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~31\cell \~\~end-of-transmission\cell \~\~4\cell Stop the listing of the file in unix\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~32\cell \~\~\cell \~\~213\cell First non-ASCII value\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~33 .. 40\cell \~\~
\cell \~\~\cell Binary section identifier (64-bit little-endien)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~41 .. 48\cell \~\~\cell \~\~\cell 
Offset from byte 57 to the first ASCII character following the binary data\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~49 .. 56\cell \~\~\cell \~\~\cell Compression type\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 57 .. 57+ n-1\cell \~\~\cell Binary data (n bytes)\cell \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~57 + n \cell \~\~
carriage-return\cell \~\~13\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~58 + n \cell \~\~line-feed\cell \~\~10\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~59 + n \cell \~\~E\cell \~\~69\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~60 + n \cell \~\~N\cell \~\~78\cell \~\~\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~61 + n \cell \~\~D\cell \~\~68\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~62 + n \cell \~\~\cell \~\~32
\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~63 + n \cell \~\~O\cell \~\~79\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~64 + n 
\cell \~\~F\cell \~\~70\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~65 + n \cell \~\~\cell \~\~32\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~66 + n \cell \~\~B\cell \~\~66\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~67 + n \cell \~\~I\cell \~\~73\cell \~\~\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~68 + n \cell \~\~N\cell \~\~78\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~69 + n \cell \~\~A\cell \~\~65
\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~70 + n \cell \~\~R\cell \~\~83\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~71 + n 
\cell \~\~Y\cell \~\~89\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~72 + n \cell \~\~\cell \~\~32\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~73 + n \cell \~\~S\cell \~\~83\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~74 + n \cell \~\~E\cell \~\~69\cell \~\~\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~75 + n \cell \~\~C\cell \~\~67\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~76 + n \cell \~\~T\cell \~\~84
\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~77 + n \cell \~\~I\cell \~\~73\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~78 + n 
\cell \~\~O\cell \~\~79\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~79 + n \cell \~\~N\cell \~\~78\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~80 + n \cell \~\~carriage-return\cell \~\~13\cell \~\~\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~81 + n \cell \~\~line-feed\cell \~\~10\cell \~\~\cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx1360\clvertalt\cltxlrtb \cellx2800\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~82 + n \cell \~\~;\cell 
\~\~59\cell Final ; delimiter\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\b\f4 
\par 
\par }\pard \keep\keepn\widctlpar\adjustright {\b\f4 3.3 Compression schemes}{\f4 
\par 
\par }\pard \widctlpar\adjustright {\f4 Two schemes for lossless compression of integer arrays (such as images) have been implemented in this version of CBFlib: 
\par 
\par 1. An entropy-encoding scheme using canonical coding
\par 2. A CCP4-style packing scheme. 
\par 
\par Both encode the difference (or error) between the current ele
ment in the array and the prior element. Parameters required for more sophisticated predictors have been included in the compression functions and will be used in a future version of the library. 
\par 
\par }{\b\f4 3.3.1 Canonical-code compression}{\f4 
\par 
\par The canonical-code compr
ession scheme encodes errors in two ways: directly or indirectly. Errors are coded directly using a symbol corresponding to the error value. Errors are coded indirectly using a symbol for the number of bits in the (signed) error, followed by the error ite
slf. 
\par 
\par At the start of the compression, CBFlib constructs a table containing a set of symbols, one for each of the 2}{\f4\super n}{\f4  direct codes from -2}{\f4\super (n-1)}{\f4  .. 2}{\f4\super (n-1)}{\f4 
-1, one for a stop code, and one for each of the maxbits-n indirect codes, where n is chosen at compress
 time and maxbits is the maximum number of bits in an error. CBFlib then assigns to each symbol a bit-code, using a shorter bit code for the more common symbols and a longer bit code for the less common symbols. The bit-code lengths are calculated using a
 Huffman-type algorithm, and the actual bit-codes are constructed using the canonical-code algorithm described by Moffat, et al. (International Journal of High Speed Electronics and Systems, Vol 8, No 1 (1997) 179-231). 
\par 
\par The structure of the compressed data is: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\b\f4 Byte\cell Value \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb 
\cellx2080\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~1 .. 8\cell \~\~Number of elements (64-bit little-endian number)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~9 .. 16
\cell \~\~Minimum element\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~17 .. 24\cell \~\~Maximum element\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~
25 .. 32\cell \~\~(reserved for future use)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~33\cell \~\~Number of bits directly coded, n \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~34\cell \~\~Maximum number of bits encoded, maxbits \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~35 .. 35+2}{\f4\super n}{\f4 -1\cell \~\~
Number of bits in each direct code\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~35+2}{\f4\super n}{\f4 \cell \~\~Number of bits in the stop code\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~35+2}{\f4\super n}{\f4 +1 .. 35+2}{\f4\super n}{\f4 +maxbits-n \cell \~\~Number of bits in each indirect code\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb 
\cellx2080\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~35+2}{\f4\super n}{\f4  + 
\par maxbits-n+1 .. \cell \~\~Coded data\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4 3.3.2 CCP4-style compression
\par }{\f4 
\par The CCP4-style compression writes the errors in blocks . Each block begins with a 6-bit code. The number of errors in the block is 2^n, where n is the value in bits 0 .. 2. Bits 3 .. 5 encode the number of bits in each error:
\par 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx4240\pard \qc\keep\keepn\widctlpar\intbl\adjustright {\b\f4 Value in bits 3 .. 5\cell Number of bits\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd 
\trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx4240\pard \qc\keep\keepn\widctlpar\intbl\adjustright {\b\f4 in each error\cell \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\qc\keep\keepn\widctlpar\intbl\adjustright {\f4 0\cell 0\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \qc\keep\keepn\widctlpar\intbl\adjustright {\f4 1\cell 4\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\qc\keep\keepn\widctlpar\intbl\adjustright {\f4 2\cell 5\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \qc\keep\keepn\widctlpar\intbl\adjustright {\f4 3\cell 6\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\qc\keep\keepn\widctlpar\intbl\adjustright {\f4 4\cell 7\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \qc\keep\keepn\widctlpar\intbl\adjustright {\f4 5\cell 8\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\qc\keep\keepn\widctlpar\intbl\adjustright {\f4 6\cell 16\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx4240\pard \qc\keep\keepn\widctlpar\intbl\adjustright {\f4 7
\cell 65\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par The structure of the compressed data is:
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\b\f4 Byte\cell Value\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080
\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~1 .. 8\cell \~\~Number of elements (64-bit little-endian number)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~9 .. 16\cell \~\~
Minumum element (currently unused)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~17 .. 24\cell \~\~Maximum element (currently unused)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 \~\~25 .. 32\cell \~\~(reserved for future use)\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx8200\pard 
\widctlpar\intbl\adjustright {\f4 \~\~33 ..\cell \~\~Coded data\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }{\b\f4\fs28 \sect }\sectd \sbkodd\linex0\endnhere\sectdefaultcl \pard\plain \s1\sb240\sa60\keepn\nowidctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning32\cgrid {\f0\fs28 4. Installation
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par 
\par CBFlib should be built on a disk with at least 40 megabytes of free space. First create the top-level directory (called, say, CBFlib_0.7.2).   CBFlib_0.7.tar.gz is a \ldblquote gzipped\rdblquote 
 tar of the code as it now stands.  Uncompress this file, place it in the top level directory, and unpack it with tar: 
\par 
\par      tar xvf CBFLIB_0.7.2.tar
\par 
\par 
\par To run the test programs, you will also need to put the MAR345 image example.mar2300 in the top-level directory.   The image can also be found at 
\par 
\par http://biosg1.slac.stanford.edu/biosg1-users/ellis/Public/
\par 
\par After unpacking the archive, the top-level directory should contain a makefile: 
\par 
\par \~\~Makefile\tab \~\~Makefile for unix 
\par 
\par and the subdirectories: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~src/\cell CBFLIB source files \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~include/\cell CBFLIB header files \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~examples/\cell 
Example program source files \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~doc/\cell Documentation \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~lib/
\cell Compiled CBFLIB library \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 \~\~bin/\cell Executable example programs \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 \~\~html_images/\cell JPEG images used in rendering the HTML files \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 

\par For instructions on compiling and testing the library, go to the top-level directory and type: 
\par 
\par      make
\par 
\par The CBFLIB source and header files are in the "src" and "include" subdirectories. The files are: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\b\f4 src/\cell include/ \cell Description \cell }\pard \widctlpar\intbl\adjustright {\f4 \row 
}\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 cbf.c\cell cbf.h \cell Low-level CBFLIB API functions \cell }\pard \widctlpar\intbl\adjustright {
\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_simple.c\cell cbf_simple.h \cell High-level CBFLIB API functions \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_alloc.c\cell cbf_alloc.h \cell 
Memory allocation functions \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_ascii.c\cell cbf_ascii.h \cell Function for writing ASCII values \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 cbf_binary.c\cell cbf_binary.h \cell Functions for binary values \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_byte_offset.c\cell cbf_byte_offset.h \cell 
Byte-offset compression (not implemented) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_canonical.c\cell cbf_canonical.h \cell Canonical-code compression \cell }\pard \widctlpar\intbl\adjustright {\f4 
\row }\pard \widctlpar\intbl\adjustright {\f4 cbf_codes.c\cell cbf_codes.h \cell Encoding and message digest functions \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_compress.c\cell cbf_compress.h \cell 
General compression routines \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_context.c\cell cbf_context.h \cell Control of temporary files \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 cbf_file.c\cell cbf_file.h \cell File in/out functions \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_lex.c\cell cbf_lex.h \cell Lexical analyser \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_packed.c\cell cbf_packed.h \cell CCP4-style packing compression \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 
cbf_predictor.c\cell cbf_predictor.h \cell Predictor-Huffman compression (not implemented) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_read_binary.c\cell cbf_read_binary.h \cell Read binary headers 
\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_read_mime.c\cell cbf_read_mime.h \cell Read MIME-encoded binary sections \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 cbf_string.c\cell cbf_string.h \cell Case-insensitive string comparisons \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_stx.c\cell cbf_stx.h \cell Parser \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_tree.c\cell cbf_tree.h \cell CBF tree-structure functions \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_uncompressed.c
\cell cbf_uncompressed.h \cell Uncompressed binary sections \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_write.c\cell cbf_write.h \cell Functions for writing \cell }\pard \widctlpar\intbl\adjustright {
\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_write_binary.c\cell cbf_write_binary.h \cell Write binary sections \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf.stx\cell \~\~\~\cell 
bison grammar to define cbf_stx.c (see WARNING) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2080\clvertalt\cltxlrtb \cellx4240\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {
\f4 md5c.c\cell md5.h, global.h\cell RSA message digest software from mpack \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par }\pard \widctlpar\tx10340\adjustright {\b\f4 WARNING:}{\f4 
  Do not rebuild the parser, cbf_stx.c, from the bison grammar, cbf.stx, unless absolutely necessary. There is a problem with the file bison.simple in the standard bison release. If you must rebuild cbf_stx
.c using bison, you will need cbf_PARSER.simple as a replacement for bison.simple. See the cbf_PARSER.simple instructions.
\par 
\par In the "examples" subdirectory, there are 2 additional files used by the example program (section 5) for reading MAR300, MAR345 or ADSC CCD images: 
\par }\pard \widctlpar\adjustright {\f4 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx4960\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 img.c\cell img.h\cell Simple image library \cell }\pard \widctlpar\intbl\adjustright {\f4 \row 
}\pard \widctlpar\adjustright {\f4 
\par and the example programs themselves: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 makecbf.c\cell Make a CBF file from an image \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 img2cif.c\cell Make an imgCIF or CBF from an image \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cif2cbf.c
\cell Copy a CIF/CBF to a CIF/CBF \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 convert_image.c\cell 
Convert an image file to a cbf using a template file\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par as well as two template files:  template_adscquantum4_2304x2304.cbf and template_mar345_2300x2300.cbf
\par 
\par The documentation files are in the "doc" subdirectory: 
\par 
\par }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBFlib.html\cell This document (HTML) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 
\clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb \cellx8200\pard \widctlpar\intbl\adjustright {\f4 CBFlib.txt\cell This document (ASCII) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 CBFlib_NOTICES.html
\cell Important NOTICES -- PLEASE READ \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 CBFlib_NOTICES.txt\cell Important NOTICES -- PLEASE READ \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard 
\widctlpar\intbl\adjustright {\f4 CBFlib.ps\cell CBFLIB manual (PostScript) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 CBFlib.pdf\cell CBFLIB manual (PDF) \cell }\pard \widctlpar\intbl\adjustright {\f4 
\row }\pard \widctlpar\intbl\adjustright {\f4 CBFlib.rtf\cell CBFLIB manual (RTF) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_definition_rev.txt\cell Draft CBF/ImgCIF definition (ASCII) \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cbf_definition_rev.html\cell Draft CBF/ImgCIF definition (HTML) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cif_img_1.1.3.html
\cell Draft CBF/ImgCIF extensions dictionary (HTML) \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 cif_img_1.1.3.dic\cell Draft CBF/ImgCIF extensions dictionary (ASCII) \cell }\pard 
\widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\intbl\adjustright {\f4 ChangeLog\cell Summary of change history\cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\trowd \trgaph80\trleft-80 \clvertalt\cltxlrtb \cellx2440\clvertalt\cltxlrtb 
\cellx8200\pard \widctlpar\intbl\adjustright {\f4 MANIFEST\cell List of files in this kit \cell }\pard \widctlpar\intbl\adjustright {\f4 \row }\pard \widctlpar\adjustright {\f4 
\par \sect }\sectd \sbkodd\linex0\endnhere\sectdefaultcl \pard\plain \s1\sb240\sa60\keepn\nowidctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning32\cgrid {\f0\fs28 5. Example programs
\par }\pard\plain \widctlpar\adjustright \f12\fs20\cgrid {\f4 
\par 
\par The example programs makecbf.c and img2cif.c read an image file from a MAR300, MAR345 or ADSC CCD detector and then uses CBFlib to convert it to CBF form
at (makecbf) or either imgCIF or CBF format (img2cif).  makecbf writes the CBF-format image to disk, reads it in again, and then compares it to the original. img2cif just writes the desired file.  makecbf works only from stated files on disk, so that rand
om I/O can be used. img2cif includes code to process files from stdin and to stdout. 
\par 
\par makecbf.c is a good example of how many of the CBFlib functions can be used. To compile makecbf on an alpha workstation running Digital unix or a Silicon Graphics worksta
tion running irix (and on most other unix platforms as well), go to the src subdirectory of the main CBFlib directory and use the Makefile: 
\par 
\par      make all
\par 
\par 
\par An example MAR345 image can be found at: 
\par 
\par      http://smb.slac.stanford.edu /~ellis/
\par 
\par 
\par To run makecbf with the example image, type: 
\par 
\par      ./bin/makecbf example.mar2300 test.cbf
\par 
\par 
\par The program img2cif has the following command line interface: 
\par                                                                  
\par }{\f6  img2cif     [-i  input_image]                               \\
\par              [-o  output_cif]                                \\
\par              [-c  \{p[acked]|c[annonical]|[n[one]\}]           \\
\par              [-m  \{h[eaders]|n[oheaders]\}]                   \\
\par              [-d  \{d[igest]|n[odigest]\}]                     \\     
\par              [-e  \{b[ase64]|q[uoted-printable]|              \\          
\par                    d[ecimal]|h[exadecimal]|o[ctal]|n[one]\}]  \\      
\par              [-b  \{f[orward]|b[ackwards]\}]                   \\ 
\par              [input_image] [output_cif]  
\par }{\f4                                                                  
\par  the options are:                                                
\par                                                                  
\par  -i  input_image (default: stdin)                                 
\par      the input_image file in MAR300, MAR345 or ADSC CCD detector   
\par      format is given.  If no input_image file is specified or is   
\par      given as "-", an image is copied from stdin to a temporary file.
\par                                                                  
\par  -o  output_cif (default: stdout)                                 
\par      the output cif (if base64 or quoted-printable encoding is used) 
\par      or cbf (if no encoding is used).  if no output_cif is specified 
\par      or is given as "-", the output is written to stdout           
\par                                                                  
\par  -c  compression_scheme (packed, canonical or none, default packed)
\par                                                                  
\par  -m  [no]headers (default headers for cifs, noheaders for cbfs)
\par      selects MIME (N. Freed, N. Borenstein, RFC 2045, November 1996)
\par      headers within binary data value text fields.
\par                                                                  
\par  -d  [no]digest  (default md5 digest [R. Rivest, RFC 1321, April
\par      1992 using"RSA Data Security, Inc. MD5 Message-Digest
\par      Algorithm"] when MIME headers are selected)
\par                                                                  
\par  -e  encoding (base64, quoted-printable, decimal, hexadecimal,    
\par      octal or none, default: base64) specifies one of the standard 
\par      MIME encodings (base64 or quoted-printable) or a non-standard 
\par      decimal, hexamdecimal or octal encoding for an ascii cif      
\par      or "none" for a binary cbf                                    
\par                                                      
\par  -b  direction (forward or backwards, default: backwards)         
\par      specifies the direction of mapping of bytes into words        
\par      for decimal, hexadecimal or octal output, marked by '>' for   
\par      forward or '<' for backwards as the second character of each  
\par      line of output, and in '#' comment lines.                     
\par                                                                  
\par 
\par 
\par 
\par The test program cif2cbf uses the same command line options as img2cif, but accepts either a CIF or a CBF as input instead of an image file. 
\par 
\par The program convert_image take two arguments: }{\f6 imagefile}{\f4  and }{\f6 cbffile}{\f4 
.  Those are the primary input and out.  The detector type is extracted from the image file, converted to lower case and used to construct the name of a template cbf file to use for the copy.  The template file name is of the form }{\f6 template_}{\i\f6 
name}{\f6 _}{\i\f6 columns}{\f6 x}{\i\f6 rows.}{\f4 
\par 
\par 
\par }}