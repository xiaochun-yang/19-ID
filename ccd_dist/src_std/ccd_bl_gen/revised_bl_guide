

	Further notes on "beam line" implimentation for the
	===================================================

			ADSC detector.
			==============

Preliminaries:
==============

	"ccd_bl_gen" refers to the generic ccd beamline control program.
Since all ccd_bl's have uniform interfaces this applies to all of the
various beamline control programs.

Communication Protocol:
=======================

	The beamline process communicates with the sequencing server,
ccd_dc_api, via tcp-ip sockets.  There are two sockets connecting these
two processes:

		command socket
		status  socket

The command socket is bi-directional and is used by ccd_dc_api to tell
ccd_bl_gen what operations to perform.  In return, when an OK or FATAL
status is returned from ccd_bl_gen to ccd_dc_api, it is via the command
socket.  The presence of this reply is how ccd_dc_api knows the operation
it requested is done.  Done can result in an operation complete or an error.

	Secondly, the status socket is unidirectional, from ccd_bl_gen
to ccd_dc_api.  A sequence of lines are transmitted periodically from the
beamline process to ccd_dc_api in order for that program to distribute the
status to those who need to know it.  Because the command socket is used for
important hand-shaking functions, the status is sent over a separate socket
so that ccd_dc_api does not have to distinguish between the two kinds of messages
which might be sent.

Command Input:
==============

	Commands to be executed are of the form:

cmd
distance_move      54.00
end_of_bl

which asks for a move of phi to 54 degrees to take place.


		===  OR  ===

cmd
collect
time      20.00
distance      54.00
osc_width       1.00
phi_start      49.00
wavelength 1.5418
directory /d8/ccd/sn007_exercise/
image_prefix _null_6
image_suffix dkc(0)
image_number 145
axis 0
mode darkcurrent_dc
adc 0
bin 1
end_of_bl

which asks for an image to be taken, in this case, a dark current
image.

	In any event, the format of the commands are:

		cmd
		which_command
		modifiers_if_any
		   ...
		modifiers_if_any
		end_of_bl


Commands in ccd_bl_mdc but not issued by ccd_dc_api.
====================================================

	The following commands are not issued by ccd_dc_api
but were left in from the old mar 180/300 code.

exit
config
startup
erase
initialize
stop
abort

	"config" takes an optional argument and reads in the
file "config", "config.180", or "config.300" just like the old
mar code did:

	config		reads "config"
	config 180	reads "config.180"
	config.300	reads "config.300"

Each of these files is in the "tables_api_xxx" directory.


Simple commands.
================

	Each of the following commands may be considered "simple".
Most do just one thing, like set or move a motor, and all have
just one argument.  Therefore, each is of the form:

	cmd
	simple_command arg
	end_of_bl

distance_move arg
	
	Move distance to arg.  Absolute, in mm.

phi_move arg

	Move phi to arg.  Absolute, in deg.

phi_move_rel arg

	Move phi BY arg.  Relative, in deg.

distance_set arg

	Set distance to arg.  Absolute, in mm.

phi_set arg

	Set phi to arg.  Absolute, in deg.

lift_move arg

	Move 2-theta or lift to arg.  If it is a lift,
	then arg is in mm, else in deg.

lift_set arg

	Set 2-theta or lift to arg.  If it is a lift,
	then arg is in mm, else in deg.

shutter arg

	Open the shutter if arg = 1, close for arg = 0.

scan

	Causes the IP to go into scan mode.  Definitely an
	incomplete implimentation, so don't use this.

omega_move arg
	
	Move omega TO arg, in deg., absolute.

omega_move_rel arg
	
	Move omega BY arg, in deg., relative.

omega_set arg
	
	Set omega TO arg, in deg., absolute.

kappa_move arg
	
	Move kappa TO arg, in deg., absolute.

kappa_set arg
	
	Set kappa TO arg, in deg., absolute.

wavelength_move arg
	
	Move wavelength to arg, in Angs., absolute.

	NOTE:
		In the case that you cannot actually
		move the wavelength, this sets the
		status so that the proper values get
		put into the image headers.

		If you CAN move the wavelength, then
		this call should result in a call to
		the actual code which can move the wavelength.
		This is usually in a separate process.
		You can accomplish this in any way you
		choose.

wavelength_set arg

	Set wavelength to arg, in Angs., absolute.

	Same NOTE as above.

Data Collection Sequencing
==========================

	The "collect" command takes a set of modifiers:

		cmd
		collect
		modifier
		   ...
		modifier
		end_of_bl

	Each modifier takes an argument.  Some modifiers
are informational only (just ends up in the reported status).
Some modifiers are actually used during the exposure, but
most are informational.

	The calling process, ccd_dc_api, ALWAYS MOVES THE
GONIOSTAT ANGES/DISTANCE TO THE CORRECT STARTING POSITION
FOR THE EXPOSURE PRIOR TO THE collect COMMAND BEING ISSUED.

Modifiers which are actually used in the exposure:
==================================================

osc_width arg
	
	The number of degrees in the oscillation.

time arg

	The number of seconds for time mode.
	The number of "units" for dose mode.
	
	The progs are really set up primarily for time mode, and
	there is the issue of conversion
	For this reason, dose units should be roughly equivalent
	to time units in some hazy way.

mode arg
	
	arg:

		darkcurrent_dc		Take a dark current.
		time			Take an xray time exposure.
		dose			Take an xray dose exposure.

axis arg

		1			Use phi
		0			Use omega.
n_images arg

	always 1, I think, but maybe the number of passes of phi
	to make up an oscillation.


Modifiers used to form status.
==============================

distance arg

	distance for this exposure in mm.

phi_start arg

	Phi start value for this exposure in deg.

de_zinger arg

	1 for dezingering on, else 0.

image_number arg

	A positive integer.  The image number, say, 238, as in:

		test_1_238.img

directory arg

	The directory where the images will go.

image_prefix arg

	Image prefix, test_1 in the above example.

image_suffix arg

	Image suffix, img in the above example.

wavelength arg

	Wavelength for the exposure.

remark arg

	Not used.

lift arg
	
	Lift (in mm) or two-theta (in deg) for the exposure.

adc arg

	0 for fast, 1 for slow adc.

bin arg

	1 for 1x1, 2 for 2x2 binning.

center argx argy

	Beam center, in mm, adxv coords, for the exposure.

kappa_start arg

	Kappa value for exposure, if using kappa, in deg..

omega_start arg

	Omega start for exposure, if using omega, in deg..

