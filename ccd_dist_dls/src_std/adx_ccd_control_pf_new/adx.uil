/*
 * Generated by the ICS builderXcessory (BX).
 *
 *
 * Builder Xcessory 4.0.
 *
 * Identification: 
 */
module main_uil
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("java_flags", "-verbose")
!(BX) bx_info("java_unmanage_dialogs", "true")
!(BX) bx_info("java_html_all_class", "true")
!(BX) bx_info("java_applet_runnable", "false")
!(BX) bx_info("java_main_applet", "true")
!(BX) bx_info("java_constants", "Defs", true)
!(BX) bx_info("java_html", "MainApp", true)
!(BX) bx_info("java_main", "MainApp", true)
!(BX) bx_info("java_makefile", "makefile-java", true)
!(BX) bx_info("vk_libs", "-lvk -lvkmsg -lvkhelp -ltt -lSgm -lXm -lXt -lX11 -lgen")
!(BX) bx_info("vk_cflags", "-DFUNCPROTO -DXTFUNCPROTO -I/usr/ToolTalk/include")
!(BX) bx_info("vk_cc", "CC")
!(BX) bx_info("vk_target", "main-vk")
!(BX) bx_info("vk_use_tooltalk", "false")
!(BX) bx_info("vk_use_runonce", "false")
!(BX) bx_info("vk_ignore_shell_geometry", "false")
!(BX) bx_info("vk_subclass_vk_components", "true")
!(BX) bx_info("vk_del_nested_classes", "false")
!(BX) bx_info("vk_rm_exp_callbacks", "false")
!(BX) bx_info("vk_unmanage_dialogs", "true")
!(BX) bx_info("vk_name", "BuilderProduct")
!(BX) bx_info("vk_class", "BuilderProduct")
!(BX) bx_info("vk_hdrext", "h")
!(BX) bx_info("vk_srcext", "C")
!(BX) bx_info("vk_app_defaults", "app-defaults", true)
!(BX) bx_info("vk_callbacks", "callbacks-vk", true)
!(BX) bx_info("vk_utilities", "bxutils-vk", true)
!(BX) bx_info("vk_constants", "defs-vk", true)
!(BX) bx_info("vk_main", "main-vk", true)
!(BX) bx_info("vk_makefile", "makefile-vk", true)
!(BX) bx_info("vk_imakefile", "Imakefile", true)
!(BX) bx_info("c++_libs", "-lSgm -lXm -lXt -lgl -lX11 -lgen")
!(BX) bx_info("c++_cflags", "-DFUNCPROTO -DXTFUNCPROTO")
!(BX) bx_info("c++_cc", "CC")
!(BX) bx_info("c++_target", "main-C")
!(BX) bx_info("c++_del_nested_classes", "false")
!(BX) bx_info("c++_ignore_shell_geometry", "false")
!(BX) bx_info("c++_visible_windows_only", "false")
!(BX) bx_info("c++_rm_exp_callbacks", "false")
!(BX) bx_info("c++_old_construct", "false")
!(BX) bx_info("c++_unmanage_dialogs", "true")
!(BX) bx_info("c++_gen_derived", "true")
!(BX) bx_info("c++_name", "BuilderProduct")
!(BX) bx_info("c++_class", "BuilderProduct")
!(BX) bx_info("c++_hdrext", "h")
!(BX) bx_info("c++_srcext", "C")
!(BX) bx_info("c++_app_defaults", "app-defaults", true)
!(BX) bx_info("c++_callbacks", "callbacks-C", true)
!(BX) bx_info("c++_utilities", "bxutil-C.C", true)
!(BX) bx_info("c++_constants", "defs-C", true)
!(BX) bx_info("c++_main", "main-C.C", true)
!(BX) bx_info("c++_baseclass", "UIComponent", true)
!(BX) bx_info("c++_makefile", "makefile-C", true)
!(BX) bx_info("c++_imakefile", "Imakefile", true)
!(BX) bx_info("c_libs", "-lSgm -lXm -lXt -lgl -lX11 -lgen")
!(BX) bx_info("c_cc", "cc")
!(BX) bx_info("c_target", "main-c")
!(BX) bx_info("c_ignore_shell_geometry", "false")
!(BX) bx_info("c_visible_windows_only", "false")
!(BX) bx_info("c_rm_exp_callbacks", "false")
!(BX) bx_info("c_reverse_dialogs", "true")
!(BX) bx_info("c_dialogs_in_routine", "true")
!(BX) bx_info("c_unmanage_dialogs", "true")
!(BX) bx_info("c_name", "BuilderProduct")
!(BX) bx_info("c_class", "BuilderProduct")
!(BX) bx_info("c_app_defaults", "app-defaults", true)
!(BX) bx_info("c_utilities", "bxutil-c.c", false)
!(BX) bx_info("c_constants", "creation-c.h", true)
!(BX) bx_info("c_callbacks", "callbacks-c.c", true)
!(BX) bx_info("c_creation", "creation-c.c", true)
!(BX) bx_info("c_main", "main-c.c", true)
!(BX) bx_info("c_makefile", "makefile-c", false)
!(BX) bx_info("c_imakefile", "Imakefile", true)
!(BX) bx_info("uil_libs", "-lSgm -lMrm -lXm -lXt -lgl -lX11 -lgen")
!(BX) bx_info("uil_uilflags", "-w -I/usr/include/uil")
!(BX) bx_info("uil_cc", "cc")
!(BX) bx_info("uil_target", "main-uil")
!(BX) bx_info("uil_ignore_shell_geometry", "false")
!(BX) bx_info("uil_visible_windows_only", "false")
!(BX) bx_info("uil_name", "BuilderProduct")
!(BX) bx_info("uil_class", "BuilderProduct")
!(BX) bx_info("uil_app_defaults", "app_defaults", true)
!(BX) bx_info("uil_utilities", "bxutil-uil.c", false)
!(BX) bx_info("uil_constants", "main-uil.h", true)
!(BX) bx_info("uil_callbacks", "callbacks-uil.c", true)
!(BX) bx_info("uil_uil", "adx.uil", true)
!(BX) bx_info("uil_main", "main-uil.c", true)
!(BX) bx_info("uil_makefile", "makefile-uil", false)
!(BX) bx_info("uil_imakefile", "Imakefile", false)
!(BX) bx_info("include_path", ".",
!(BX)		"/usr/people/arvai/adx", false)
!(BX) bx_info("xrunner_command", "$(M_ROOT)/arch/X11.5/Xm1.2/mic_xm.o", false)
!(BX) bx_info("system_directory", "/usr/bx40")
!(BX) bx_info("builder_version", "Builder Xcessory 4.0")
!(BX) bx_info("build_lang", "C")
!(BX) bx_info("ansi", "false")
!(BX) bx_info("use_locales", "false")
!(BX) bx_info("new_mrm_style", "true")
!(BX) bx_info("c_wrap_lines", "false")
!(BX) bx_info("uil_wrap_lines", "true")
!(BX) bx_info("integrate_purify", "false")
!(BX) bx_info("purify_command", "purify")
!(BX) bx_info("integrate_xrunner", "false")

value xraybitmap_color_table : color_table (
	color('#ffffffff0000') = '.',
	color('#ffff30303030') = 'X');
value xraybitmap_icon : icon (
	color_table = xraybitmap_color_table,
	'................................',
	'................................',
	'................................',
	'........XX.............XX.......',
	'......XXXX.............XXXX.....',
	'.....XXXXX.............XXXXX....',
	'.....XXXXXX...........XXXXXXX...',
	'....XXXXXXX...........XXXXXXX...',
	'...XXXXXXXXX.........XXXXXXXXX..',
	'...XXXXXXXXX.........XXXXXXXXX..',
	'..XXXXXXXXXXX.......XXXXXXXXXXX.',
	'..XXXXXXXXXX.........XXXXXXXXXX.',
	'.XXXXXXXXXX...XXXXX...XXXXXXXXXX',
	'.XXXXXXXXXX..XXXXXXX..XXXXXXXXXX',
	'.XXXXXXXXX..XXXXXXXXX..XXXXXXXXX',
	'.XXXXXXXXX..XXXXXXXXX..XXXXXXXXX',
	'.XXXXXXXXX..XXXXXXXXX..XXXXXXXXX',
	'............XXXXXXXXX...........',
	'.............XXXXXXX............',
	'..............XXXXX.............',
	'................................',
	'.............X.....X............',
	'............XXXXXXXXX...........',
	'............XXXXXXXXX...........',
	'...........XXXXXXXXXXX..........',
	'..........XXXXXXXXXXXXX.........',
	'..........XXXXXXXXXXXXX.........',
	'.........XXXXXXXXXXXXXXX........',
	'........XXXXXXXXXXXXXXXXX.......',
	'........XXXXXXXXXXXXXXXXX.......',
	'..........XXXXXXXXXXXXX.........',
	'............XXXXXXXXX...........'
);
value bg32x32bitmap_color_table : color_table (
	color('#000') = '.');
value bg32x32bitmap_icon : icon (
	color_table = bg32x32bitmap_color_table,
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................',
	'................................'
);
value xrayoffbitmap_color_table : color_table (
	color('#ffffefefd7d7') = '.',
	color('#ffffc7c79696') = 'X');
value xrayoffbitmap_icon : icon (
	color_table = xrayoffbitmap_color_table,
	'................................',
	'................................',
	'................................',
	'........XX.............XX.......',
	'......XXXX.............XXXX.....',
	'.....XXXXX.............XXXXX....',
	'.....XXXXXX...........XXXXXXX...',
	'....XXXXXXX...........XXXXXXX...',
	'...XXXXXXXXX.........XXXXXXXXX..',
	'...XXXXXXXXX.........XXXXXXXXX..',
	'..XXXXXXXXXXX.......XXXXXXXXXXX.',
	'..XXXXXXXXXX.........XXXXXXXXXX.',
	'.XXXXXXXXXX...XXXXX...XXXXXXXXXX',
	'.XXXXXXXXXX..XXXXXXX..XXXXXXXXXX',
	'.XXXXXXXXX..XXXXXXXXX..XXXXXXXXX',
	'.XXXXXXXXX..XXXXXXXXX..XXXXXXXXX',
	'.XXXXXXXXX..XXXXXXXXX..XXXXXXXXX',
	'............XXXXXXXXX...........',
	'.............XXXXXXX............',
	'..............XXXXX.............',
	'................................',
	'.............X.....X............',
	'............XXXXXXXXX...........',
	'............XXXXXXXXX...........',
	'...........XXXXXXXXXXX..........',
	'..........XXXXXXXXXXXXX.........',
	'..........XXXXXXXXXXXXX.........',
	'.........XXXXXXXXXXXXXXX........',
	'........XXXXXXXXXXXXXXXXX.......',
	'........XXXXXXXXXXXXXXXXX.......',
	'..........XXXXXXXXXXXXX.........',
	'............XXXXXXXXX...........'
);
value
    Scale_100 :  0;
    Scale_50 :  1;
    Scale_25 :  2;
    Scale_Auto :  3;
    Mag_Values :  0;
    Mag_Pixels :  1;
    Magnification_4 :  0;
    Magnification_8 :  1;
    Magnification_16 :  2;
    Magnification_32 :  3;
    COLOR :  0;
    GRAYSCALE :  1;
    SORT_BY_TIME : exported 0;
    SORT_ALPHABETICALLY :  1;
    UP_ARROW :  0;
    DOWN_ARROW :  1;
    PLOT_DOT :  0;
    PLOT_LINE :  1;
    PLOT_PIXEL :  2;
    BEAM_MM :  0;
    BEAM_PIXELS :  1;
    EXIT_YES :  1;
    EXIT_NO :  0;
    EXIT_MANAGE :  2;
    Magnification_64 :  4;
    YES :  1;
    NO :  0;
    SUB_ORIG :  0;
    SUB_DISP :  1;
    SAVE_IMAGE :  0;
    SAVE_MAGNIFY :  1;
    SAVE_LINE :  2;
    SAVE_ASCII :  0;
    SAVE_BINARY :  1;
    SAVE_POSTSCRIPT :  2;
    COLOR2 :  2;
    Mag_3D :  2;
    HELP_SLICE :  0;
    HELP_CONTROL :  1;
    HELP_IMAGE :  2;
    HELP_MAGNIFY :  3;
    HELP_SAVE :  4;
    HELP_BACKGROUND :  5;
    SAVE_TIFF :  3;
    HELP_STATISTICS :  6;
    INDEX_H :  1;
    INDEX_K :  2;
    INDEX_L :  3;
    SPOT_ADD :  1;
    SPOT_REMOVE :  2;
    SPOT_INFO :  3;
    SPOT_NUMBER :  4;
    SPOT_ISIGMA :  5;
    EXIT_HELP :  2;
    PHI_90 :  0;
    PHI_180 :  1;
    STOP_YES :  0;
    STOP_NO :  1;
    INIT_YES :  0;
    INIT_NO :  1;
    LOAD_METHOD :  0;
    SAVE_METHOD :  1;
    DELETE_METHOD :  2;
    PROCESS_XDS :  1;
    PROCESS_AUTOINDEX :  0;
    PROCESS_DENZO :  2;
    PROCESS_MOSFLM :  3;
    CURRENT_IMAGE :  0;
    FOLLOW_IMAGES :  1;
    SELECT_IMAGE :  2;
    MC_DISTANCE :  0;
    MC_PHI :  1;
    MC_OFFSET :  2;
    MC_KAPPA :  3;
    MC_OMEGA :  4;
    OPTIMIZE_INDEX :  0;
    OPTIMIZE_CALCULATE :  1;
    EXIT_ALL :  3;
    GONIO_MANUAL :  0;
    GONIO_COMPUTER :  1;
    MC_WAVELENGTH :  5;
procedure BxGlobalWidgetId;
identifier BXG_process_arrowButton;
identifier BXG_display_arrowButton;
identifier BXG_stop_arrowButton;
identifier BXG_setup_arrowButton;
identifier BXG_exitButton;
identifier BXG_mosflmButton;
identifier BXG_denzoButton;
identifier BXG_xdsButton;
identifier BXG_autoindexButton;
identifier BXG_process_popupMenu;
identifier BXG_processButton;
identifier BXG_display_popupMenu;
identifier BXG_displayButton;
identifier BXG_popupMenu;
identifier BXG_stopButton;
identifier BXG_setup_popupMenu;
identifier BXG_setupButton;
identifier BXG_bulletinBoard;
identifier BXG_label109;
identifier BXG_mad_nframes_textField;
identifier BXG_label108;
identifier BXG_mad_option4_toggleButton;
identifier BXG_mad_option3_toggleButton;
identifier BXG_mad_option2_toggleButton;
identifier BXG_mad_option1_toggleButton;
identifier BXG_label97;
identifier BXG_energy5_textField;
identifier BXG_wavelength5_textField;
identifier BXG_energy4_textField;
identifier BXG_wavelength4_textField;
identifier BXG_energy3_textField;
identifier BXG_wavelength3_textField;
identifier BXG_energy2_textField;
identifier BXG_wavelength2_textField;
identifier BXG_energy1_textField;
identifier BXG_wavelength1_textField;
identifier BXG_enable_wavelength5_toggleButton;
identifier BXG_enable_wavelength4_toggleButton;
identifier BXG_enable_wavelength3_toggleButton;
identifier BXG_enable_wavelength2_toggleButton;
identifier BXG_enable_wavelength1_toggleButton;
identifier BXG_madDialog;
identifier BXG_options_darkinterval_textField;
identifier BXG_options_deg_dose_textField;
identifier BXG_options_outputcbf_toggleButton;
identifier BXG_options_outputsmv_toggleButton;
identifier BXG_options_xform_no;
identifier BXG_options_xform_yes;
identifier BXG_options_saveraw_no;
identifier BXG_options_saveraw_yes;
identifier BXG_options_step_textField;
identifier BXG_label32;
identifier BXG_options_darkstored_toggleButton;
identifier BXG_options_darkinterval_toggleButton;
identifier BXG_options_darkrun_toggleButton;
identifier BXG_strategy_bin2_toggleButton;
identifier BXG_strategy_bin1_toggleButton;
identifier BXG_strategy_fast_toggleButton;
identifier BXG_strategy_slow_toggleButton;
identifier BXG_options_output32_toggleButton;
identifier BXG_options_output16_toggleButton;
identifier BXG_optionsDialog;
identifier BXG_alert_label;
identifier BXG_alertDialog;
identifier BXG_config_site_helpWindow;
identifier BXG_mad_helpWindow;
identifier BXG_options_helpWindow;
identifier BXG_project_helpWindow;
identifier BXG_status_helpWindow;
identifier BXG_snapshot_helpWindow;
identifier BXG_strategy_helpWindow;
identifier BXG_optimize_helpWindow;
identifier BXG_manualcontrol_helpWindow;
identifier BXG_adx_helpDialog;
identifier BXG_optimize_apply_Pushbutton1;
identifier BXG_optimimal_runs_text;
identifier BXG_optimize_maxrunsize_textField;
identifier BXG_optimize_merge_no;
identifier BXG_optimize_merge_yes;
identifier BXG_optimize_resmax_textField;
identifier BXG_optimize_res2_textField;
identifier BXG_optimize_res1_textField;
identifier BXG_optimize_param_file_list;
identifier BXG_optimize_param_file_textField;
identifier BXG_optimize_dialog;
identifier BXG_versionDialog;
identifier BXG_strategy_restart_Pushbutton1;
identifier BXG_strategy_restart_Pushbutton;
identifier BXG_restart_frame_textfield;
identifier BXG_restart_run_textfield;
identifier BXG_restartRun_dialog;
identifier BXG_pushButton12;
identifier BXG_define_offset_Dialog;
identifier BXG_pushButton11;
identifier BXG_define_phi_Dialog;
identifier BXG_pushButton4;
identifier BXG_pushButton5;
identifier BXG_stopDialog;
identifier BXG_pushButton2;
identifier BXG_define_distance_Dialog;
identifier BXG_modify_wavelength_textField;
identifier BXG_define_wavelength_pushButton;
identifier BXG_drive_wavelength_pushButton;
identifier BXG_gonio_home_pushbutton;
identifier BXG_gonio_on_pushButton;
identifier BXG_gonio_off_pushButton;
identifier BXG_pushButton196;
identifier BXG_pushButton195;
identifier BXG_pushButton194;
identifier BXG_pushButton193;
identifier BXG_pushButton192;
identifier BXG_pushButton191;
identifier BXG_pushButton190;
identifier BXG_pushButton189;
identifier BXG_modify_omega_textField;
identifier BXG_mc_omega_apply;
identifier BXG_define_omega_pushButton;
identifier BXG_drive_omega_pushButton;
identifier BXG_pushButton188;
identifier BXG_pushButton187;
identifier BXG_pushButton186;
identifier BXG_pushButton185;
identifier BXG_pushButton184;
identifier BXG_pushButton183;
identifier BXG_pushButton181;
identifier BXG_pushButton179;
identifier BXG_modify_kappa_textField;
identifier BXG_mc_kappa_apply;
identifier BXG_define_kappa_pushButton;
identifier BXG_drive_kappa_pushButton;
identifier BXG_mc_offset_apply;
identifier BXG_mc_phi_apply;
identifier BXG_mc_distance_apply;
identifier BXG_drive_phi180_pushButton;
identifier BXG_drive_phi90_pushButton;
identifier BXG_mc_offset_label;
identifier BXG_mc_shutter_button;
identifier BXG_define_twotheta_pushButton;
identifier BXG_drive_twotheta_pushButton;
identifier BXG_mc_offset_radiobox;
identifier BXG_modify_offset_textField;
identifier BXG_define_phi_pushButton;
identifier BXG_drive_phi_pushButton;
identifier BXG_pushButton103;
identifier BXG_pushButton102;
identifier BXG_pushButton101;
identifier BXG_pushButton100;
identifier BXG_pushButton99;
identifier BXG_pushButton98;
identifier BXG_pushButton97;
identifier BXG_pushButton96;
identifier BXG_modify_phi_textField;
identifier BXG_define_distance_pushButton;
identifier BXG_drive_distance_pushButton;
identifier BXG_modify_distance_textField;
identifier BXG_manual_controlDialog;
identifier BXG_snap_dez_no_toggleButton;
identifier BXG_snap_dez_yes_toggleButton;
identifier BXG_snap_label_start_phi;
identifier BXG_snap_axisPhi_toggleButton;
identifier BXG_snap_axisOmega_toggleButton;
identifier BXG_snapshot_axis;
identifier BXG_snap_label_delta_omega;
identifier BXG_snap_label_start_omega;
identifier BXG_snap_ndc_toggleButton;
identifier BXG_snap_ydc_toggleButton;
identifier BXG_snap_bin2_toggleButton;
identifier BXG_snap_bin1_toggleButton;
identifier BXG_snap_label_delta_phi;
identifier BXG_snap_offset_label;
identifier BXG_snap_offset_textField;
identifier BXG_snap_fast_toggleButton;
identifier BXG_snap_slow_toggleButton;
identifier BXG_snapshot_pushButton;
identifier BXG_snap_step_size_textField;
identifier BXG_pushButton128;
identifier BXG_pushButton127;
identifier BXG_pushButton126;
identifier BXG_pushButton125;
identifier BXG_pushButton124;
identifier BXG_pushButton123;
identifier BXG_pushButton122;
identifier BXG_pushButton121;
identifier BXG_snap_phi_textField;
identifier BXG_snap_exposure_time_textField;
identifier BXG_snap_distance_textField;
identifier BXG_snap_image_textField;
identifier BXG_snap_directory_textField;
identifier BXG_snapshotDialog;
identifier BXG_step_kappa_label;
identifier BXG_status_label_kappa;
identifier BXG_step_omega_label;
identifier BXG_status_label_omega;
identifier BXG_kappa_textField;
identifier BXG_omega_textField;
identifier BXG_status_label_2theta;
identifier BXG_status_label_offset;
identifier BXG_status_label_phi;
identifier BXG_speed_textField;
identifier BXG_binning_textField;
identifier BXG_disk_space_images_textField;
identifier BXG_disk_space_mb_textField;
identifier BXG_directory_textField;
identifier BXG_xray_off_label2;
identifier BXG_xray_on_label2;
identifier BXG_dose_time_label;
identifier BXG_intensity_textField;
identifier BXG_status_shutter_label;
identifier BXG_completion_all_textField;
identifier BXG_completion_this_textField;
identifier BXG_step_phi_label;
identifier BXG_delta_phi_textField;
identifier BXG_image_textField;
identifier BXG_offset_textField;
identifier BXG_curr_phi_textField;
identifier BXG_exp_time_textField;
identifier BXG_distance_textField;
identifier BXG_expose_scale;
identifier BXG_status_message;
identifier BXG_xray_off_label;
identifier BXG_xray_on_label;
identifier BXG_statusDialog;
identifier BXG_strategy_MADyes_toggleButton;
identifier BXG_strategy_MADno_toggleButton;
identifier BXG_strategy_MAD_mode;
identifier BXG_strategy_comp_Z_toggleButton;
identifier BXG_strategy_comp_pck_toggleButton;
identifier BXG_strategy_comp_none_toggleButton;
identifier BXG_label29;
identifier BXG_strategy_wedge_textField;
identifier BXG_label18;
identifier BXG_strategy_anomyes_toggleButton;
identifier BXG_strategy_anomno_toggleButton;
identifier BXG_strategy_beamy_textField;
identifier BXG_strategy_beamx_textField;
identifier BXG_pushButton177;
identifier BXG_pushButton176;
identifier BXG_pushButton175;
identifier BXG_pushButton174;
identifier BXG_pushButton173;
identifier BXG_pushButton172;
identifier BXG_pushButton171;
identifier BXG_pushButton170;
identifier BXG_pushButton169;
identifier BXG_pushButton168;
identifier BXG_pushButton167;
identifier BXG_pushButton166;
identifier BXG_pushButton165;
identifier BXG_pushButton164;
identifier BXG_pushButton163;
identifier BXG_pushButton162;
identifier BXG_beamline_label;
identifier BXG_beamline_list;
identifier BXG_bl_scrolledwindow;
identifier BXG_runtext;
identifier BXG_scrolledWindow1;
identifier BXG_strategy_time_dose_label;
identifier BXG_pushButton67;
identifier BXG_pushButton66;
identifier BXG_pushButton65;
identifier BXG_pushButton64;
identifier BXG_pushButton63;
identifier BXG_pushButton62;
identifier BXG_pushButton61;
identifier BXG_pushButton60;
identifier BXG_strategy_comment_textField;
identifier BXG_strategy_collect_Pushbutton;
identifier BXG_menuBar;
identifier BXG_strategy_close_pushbutton;
identifier BXG_strategy_dose_mode_toggleButton;
identifier BXG_strategy_time_mode_toggleButton;
identifier BXG_strategy_image_prefix_textField;
identifier BXG_strategy_directory_textField;
identifier BXG_strategyDialog;
identifier BXG_pushButton220;
identifier BXG_pushButton9;
identifier BXG_exitDialog;
identifier BXG_load_method_fSB;
identifier BXG_save_method_fSB;
identifier BXG_delete_method_fSB;
identifier BXG_pushButton18;
identifier BXG_abortDialog;
identifier BXG_error_Dialog_text;
identifier BXG_error_pushButton;
identifier BXG_error_Dialog;
identifier BXG_disk_full_label2;
identifier BXG_disk_full_label1;
identifier BXG_disk_full_label;
identifier BXG_diskfullDialog;
identifier BXG_mcinfoDialog;
identifier BXG_nobeam_label2;
identifier BXG_nobeamDialog;
identifier BXG_weakbeam_label2;
identifier BXG_weakbeamDialog;
identifier BXG_wavelength_textField;
identifier BXG_localSite_button1;
identifier BXG_localSite_label1;
identifier BXG_localSiteDialog;
identifier BXG_optimize_add_fSB;
identifier BXG_define_omega_Dialog;
identifier BXG_define_kappa_Dialog;
identifier BXG_project_param_file_textField;
identifier BXG_project_spgrp_textField;
identifier BXG_project_i_prefix_textField;
identifier BXG_project_proc_dir_textField;
identifier BXG_project_data_dir_textField;
identifier BXG_project_dialog;
identifier BXG_configsite_textVal10;
identifier BXG_configsite_textVal9;
identifier BXG_configsite_textVal8;
identifier BXG_configsite_textVal7;
identifier BXG_configsite_textVal6;
identifier BXG_configsite_textVal5;
identifier BXG_configsite_textVal4;
identifier BXG_configsite_textVal3;
identifier BXG_configsite_textVal2;
identifier BXG_configsite_textKey8;
identifier BXG_configsite_textKey10;
identifier BXG_configsite_textKey9;
identifier BXG_configsite_textKey7;
identifier BXG_configsite_textKey6;
identifier BXG_configsite_textKey5;
identifier BXG_configsite_textKey4;
identifier BXG_configsite_textKey3;
identifier BXG_configsite_textKey2;
identifier BXG_configsite_textVal1;
identifier BXG_configsite_textKey1;
identifier BXG_configsiteDialog;
procedure BxExitCB(integer);
procedure newline_activateCallback;
procedure bs_Callback();
procedure exit_activateCallback();
procedure collect_activateCallback();
procedure snap_callback();
procedure text_focusCallback();
procedure text_modifyVerifyCallback();
procedure strategy_activateCallback();
procedure snapshot_activateCallback();
procedure modify_distance_activateCb();
procedure manualcontrol_activateCallback();
procedure drive_phi_activateCallback();
procedure modify_phi_activateCallback();
procedure modify_twotheta_activateCb();
procedure cancel_activateCallback();
procedure define_distance_activateCb();
procedure stop_activateCallback();
procedure define_phi_activateCallback();
procedure define_offset_activateCallback();
procedure strategy_help_activateCallback();
procedure method_callback();
procedure method_okCallback();
procedure method_applyCallback();
procedure method_cancelCallback();
procedure method_helpCallback();
procedure process_activateCallback();
procedure display_activateCallback();
procedure main_destroyCallback();
procedure restart_activateCallback();
procedure main_mapCallback();
procedure close_mc_activateCallback();
procedure strategy_close_activateCallback();
procedure close_snap_activateCallback();
procedure close_status_activateCallback();
procedure main_createCallback();
procedure stopnow_activateCallback();
procedure stopnexti_activateCallback();
procedure status_activateCallback();
procedure version_activateCallback();
procedure open_shutter_activateCallback();
procedure close_shutter_activateCallback();
procedure strategy_restart_activateCb();
procedure versionclose_activateCallback();
procedure mc_help_activateCallback();
procedure status_help_activateCallback();
procedure AdxVerifyNumericCB();
procedure abort_activateCallback();
procedure error_Dialog_activateCallback();
procedure strategy_time_armCallback();
procedure strategy_dose_armCallback();
procedure snapshot_openhelpCB();
procedure df_OK_activateCallback();
procedure AdxVerifyAlphaNumericCB();
procedure mcinfo_OK_activateCallback();
procedure dist_drive_armCallback();
procedure dist_define_armCallback();
procedure phi_define_armCallback();
procedure phi_drive_armCallback();
procedure offset_drive_armCallback();
procedure offset_define_armCallback();
procedure text_deleteAll();
procedure text_deleteLine();
procedure text_insertAfter();
procedure text_insertBefore();
procedure strat_run_Callback();
procedure strat_start_Callback();
procedure strat_total_Callback();
procedure strat_distance_Callback();
procedure strat_offset_Callback();
procedure strat_phi_Callback();
procedure strat_deltaphi_Callback();
procedure strat_time_Callback;
procedure strat_dzngr_Callback;
procedure mc_distance_Callback();
procedure mc_phi_Callback();
procedure mc_offset_Callback();
procedure snap_distance_Callback();
procedure snap_offset_Callback();
procedure snap_phi_Callback();
procedure snap_deltaphi_Callback();
procedure snap_time_Callback;
procedure mc_apply_Callback();
procedure nobeam_OK_activateCallback();
procedure nobeam_Restart_activateCallback();
procedure weakbeam_Abort_activateCb();
procedure weakbeam_Collect_activateCb();
procedure localsite_activateCallback();
procedure localsite_OK_activateCallback();
procedure localsite_command();
procedure project_activateCallback();
procedure project_help_activateCallback();
procedure project_data_dir_cb();
procedure project_proc_dir_cb();
procedure project_i_prefix_cb();
procedure project_param_file_cb();
procedure project_spgrp_cb();
procedure project_close_callback();
procedure optimize_close_callback();
procedure optimize_help_Callback();
procedure optimize_apply_callback();
procedure optimize_add_list_cb();
procedure optimize_delete_list_cb();
procedure optimize_list_ss_cb();
procedure optimize_list_bs_cb();
procedure optimize_list_ms_cb();
procedure optimize_add_load();
procedure optimize_cancel_cb();
procedure strat_kappa_Callback();
procedure strat_omega_Callback();
procedure strat_axis_Callback();
procedure modify_kappa_activateCallback();
procedure modify_omega_activateCallback();
procedure omega_define_armCallback();
procedure omega_drive_armCallback();
procedure kappa_drive_armCallback();
procedure kappa_define_armCallback();
procedure mc_kappa_Callback();
procedure mc_omega_Callback();
procedure define_kappa_activateCallback();
procedure define_omega_activateCallback();
procedure optstrat_activateCallback();
procedure project_new_callback();
procedure project_prev_callback();
procedure alert_OK_activateCallback();
procedure strategy_anomyes_armCallback();
procedure strategy_anomno_armCallback();
procedure options_close_activateCallback();
procedure options_help_activateCallback();
procedure options_darkinterval_valueChangedCallback();
procedure snap_axisOmega_armCallback();
procedure snap_axisPhi_armCallback();
procedure gonio_home_activateCallback();
procedure gonio_manual_activateCallback();
procedure xform_no_armCallback();
procedure saveraw_no_armCallback();
procedure strategy_MAD_activateCb();
procedure mad_help_activateCallback();
procedure mad_close_activateCallback();
procedure mad_energy_activateCallback();
procedure mad_wavelength_activateCallback();
procedure mad_wavelength_losingFocusCallback();
procedure mad_energy_losingFocusCallback();
procedure mad_energy_armCallback();
procedure adx_closehelpCB();
procedure text_motionVerifyCallback();
procedure strategy_configCCD_activateCb();
procedure strategy_configSite_activateCb();
procedure configsite_close_activateCallback();
procedure configsite_config_Callback();
procedure configsite_help_activateCallback();
procedure options_darkstored_valueChangedCallback();
procedure options_darkrun_valueChangedCallback();
procedure modify_wavelength_activateCallback();
procedure mc_wavelength_Callback();
procedure wavelength_drive_armCallback();
procedure wavelength_define_armCallback();
procedure strategy_MADno_armCallback();
procedure strategy_MADyes_armCallback();
procedure mad_anom_wedge_armCallback();
procedure mad_anom_wedge_disarmCallback();
procedure mad_anom_wedge_valueChangedCallback();
!(BX) "Colormap" "mycolormap"
identifier mycolormap;
!(BX) "Visual *" "myvisual"
identifier myvisual;
!(BX) "unsigned int" "mydepth"
identifier mydepth;
!(BX) "int" "XmTRAVERSE_NEXT_TAB_GROUP"
identifier XmTRAVERSE_NEXT_TAB_GROUP;
!(BX) "int" "XmTRAVERSE_HOME"
identifier XmTRAVERSE_HOME;

list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};

!(BX)list BaseStyleHandlers : handlers {
!(BX)};

list myBaseStyle : arguments {
        arguments BaseStyle;
        XmNbackground = color('White');
        XmNforeground = color('Black');
};

list myBaseStyleReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list myBaseStyleHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list MenuButtonStyle : arguments {
        arguments myBaseStyle;
        XmNbackground = color('Peach Puff');
        XmNbottomShadowColor = color('Gray40');
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNmarginHeight = 2;
        XmNtopShadowColor = color('White');
};

list MenuButtonStyleReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list MenuButtonStyleHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list PullDownMenuStyle : arguments {
        arguments myBaseStyle;
        XmNbackground = color('Papaya Whip');
};

list PullDownMenuStyleReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list PullDownMenuStyleHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list CascadeButtonStyle : arguments {
        arguments myBaseStyle;
        XmNalignment = RIGHT;
        XmNbackground = color('Papaya Whip');
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNmarginHeight = 4;
};

list CascadeButtonStyleReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list CascadeButtonStyleHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list statusSeparator : arguments {
        arguments myBaseStyle;
        XmNbottomShadowColor = color('White');
        XmNheight = 2;
        XmNtopShadowColor = color('Gray65');
        XmNwidth = 43;
};

list statusSeparatorReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list statusSeparatorHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list statusLabel : arguments {
        arguments myBaseStyle;
        XmNalignment = RIGHT;
        XmNbackground = color('Papaya Whip');
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNheight = 21;
        XmNmarginHeight = 4;
        XmNmarginWidth = 0;
};

list statusLabelReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list statusLabelHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list togglestyle : arguments {
        arguments myBaseStyle;
        XmNbackground = color('Papaya Whip');
        XmNbottomShadowColor = color('Gray40');
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNmarginHeight = 4;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNtopShadowColor = color('White');
};

list togglestyleReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list togglestyleHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list BackGround : arguments {
        arguments myBaseStyle;
        XmNbackground = color('Papaya Whip');
};

list BackGroundReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list BackGroundHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list runlabel : arguments {
        arguments myBaseStyle;
        XmNheight = 20;
        XmNleftAttachment = XmATTACH_FORM;
        XmNleftOffset = 4;
        XmNresizeWidth = true;
        XmNtopAttachment = XmATTACH_FORM;
        XmNtopOffset = 8;
};

list runlabelReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list runlabelHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list statustextField : arguments {
        arguments myBaseStyle;
        XmNbackground = color('Papaya Whip');
        XmNbottomShadowColor = color('Black');
        XmNfontList = font_table(
		font('-*-lucidatypewriter-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNheight = 21;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 4;
        XmNmarginWidth = 2;
        XmNshadowThickness = 0;
        XmNtopShadowColor = color('Black');
        XmNwidth = 46;
};

list statustextFieldReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list statustextFieldHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list Buttonlook : arguments {
        arguments myBaseStyle;
        XmNbackground = color('Peach Puff');
        XmNbottomShadowColor = color('Gray40');
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNtopShadowColor = color('White');
};

list ButtonlookReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list ButtonlookHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list textFieldlook : arguments {
        arguments myBaseStyle;
        XmNbackground = color('White');
        XmNbottomShadowColor = color('Black');
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNhighlightThickness = 0;
        XmNmarginHeight = 4;
        XmNmarginWidth = 2;
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Gray65');
        XmNwidth = 52;
};

list textFieldlookReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list textFieldlookHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list Labellook : arguments {
        arguments myBaseStyle;
        XmNalignment = RIGHT;
        XmNbackground = color('Papaya Whip');
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNmarginHeight = 4;
};

list LabellookReasons : callbacks {
        callbacks myBaseStyleReasons;
};

!(BX)list LabellookHandlers : handlers {
!(BX)    handlers myBaseStyleHandlers;
!(BX)};

list statuslabelnew : arguments {
        arguments BaseStyle;
        XmNalignment = RIGHT;
        XmNbackground = color('Papaya Whip');
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNforeground = color('Black');
        XmNmarginHeight = 4;
        XmNmarginWidth = 0;
};

list statuslabelnewReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list statuslabelnewHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list newstatustextfield : arguments {
        arguments BaseStyle;
        XmNbackground = color('Papaya Whip');
        XmNbottomShadowColor = color('Black');
        XmNfontList = font_table(
		font('-*-lucidatypewriter-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNforeground = color('Black');
        XmNhighlightThickness = 0;
        XmNmarginHeight = 4;
        XmNmarginWidth = 2;
        XmNshadowThickness = 0;
        XmNtopShadowColor = color('Black');
        XmNwidth = 46;
};

list newstatustextfieldReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list newstatustextfieldHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list nwstatuslabel : arguments {
        arguments BaseStyle;
        XmNalignment = RIGHT;
        XmNbackground = color('Papaya Whip');
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNforeground = color('Black');
        XmNmarginHeight = 4;
        XmNmarginWidth = 0;
};

list nwstatuslabelReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list nwstatuslabelHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};

list newstatusseparator : arguments {
        arguments BaseStyle;
        XmNbottomShadowColor = color('White');
        XmNforeground = color('Black');
        XmNtopShadowColor = color('Gray65');
        XmNwidth = 43;
};

list newstatusseparatorReasons : callbacks {
        callbacks BaseStyleReasons;
};

!(BX)list newstatusseparatorHandlers : handlers {
!(BX)    handlers BaseStyleHandlers;
!(BX)};


!(BX)object xmDialogShell7 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 690;
!(BX)        XmNy = 214;
!(BX)        XmNwidth = 315;
!(BX)        XmNheight = 541;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog configsiteDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object configsiteDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogTitle = compound_string("ADX - Config Site");
        XmNx = 690;
        XmNy = 214;
        XmNwidth = 315;
        XmNheight = 541;
    };
    controls {
         managed XmTextField configsite_textVal10;
         managed XmTextField configsite_textVal9;
         managed XmTextField configsite_textVal8;
         managed XmTextField configsite_textVal7;
         managed XmTextField configsite_textVal6;
         managed XmTextField configsite_textVal5;
         managed XmTextField configsite_textVal4;
         managed XmTextField configsite_textVal3;
         managed XmTextField configsite_textVal2;
         managed XmTextField configsite_textKey8;
         managed XmTextField configsite_textKey10;
         managed XmTextField configsite_textKey9;
         managed XmTextField configsite_textKey7;
         managed XmTextField configsite_textKey6;
         managed XmTextField configsite_textKey5;
         managed XmTextField configsite_textKey4;
         managed XmTextField configsite_textKey3;
         managed XmTextField configsite_textKey2;
         managed XmPushButton strategy_close_pushbutton4;
         managed XmTextField configsite_textVal1;
         managed XmTextField configsite_textKey1;
         managed XmMenuBar menuBar8;
         managed XmPushButton strategy_close_pushbutton3;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsiteDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_close_pushbutton3 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNrecomputeSize = false;
        XmNx = 220;
        XmNy = 480;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure configsite_close_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object menuBar8 : XmMenuBar widget {
    arguments {
        arguments Labellook;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton15;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 314;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton cascadeButton15;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object cascadeButton15 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Help");
        XmNx = 264;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu help_pulldownMenu3;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object help_pulldownMenu3 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton options_help_PushButton1;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object options_help_PushButton1 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure configsite_help_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object configsite_textKey1 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 80;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey1);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal1 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 80;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal1);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object strategy_close_pushbutton4 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Reconfigure Now");
        XmNrecomputeSize = false;
        XmNx = 35;
        XmNy = 480;
        XmNwidth = 140;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure configsite_config_Callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object configsite_textKey2 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 118;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey2);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textKey3 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 156;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey3);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textKey4 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 194;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey4);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textKey5 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 232;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey5);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textKey6 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 270;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey6);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textKey7 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 308;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey7);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textKey9 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 384;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey9);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textKey10 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 422;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey10);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textKey8 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNeditable = false;
        XmNx = 10;
        XmNy = 346;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textKey8);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal2 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 118;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal2);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal3 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 156;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal3);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal4 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 194;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal4);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal5 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 232;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal5);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal6 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 270;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal6);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal7 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 308;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal7);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal8 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 346;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal8);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal9 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 384;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal9);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object configsite_textVal10 : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 200;
        XmNy = 422;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_configsite_textVal10);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell28 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Project";
!(BX)        XmNx = 755;
!(BX)        XmNy = 236;
!(BX)        XmNwidth = 437;
!(BX)        XmNheight = 308;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog project_dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object project_dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 755;
        XmNy = 236;
        XmNwidth = 437;
        XmNheight = 308;
    };
    controls {
         managed XmPushButton project_prev_Pushbutton;
         managed XmPushButton project_new_Pushbutton;
         managed XmMenuBar menuBar4;
         managed XmTextField project_param_file_textField;
         managed XmTextField project_spgrp_textField;
         managed XmTextField project_i_prefix_textField;
         managed XmLabel label40;
         managed XmLabel label35;
         managed XmLabel label34;
         managed XmTextField project_proc_dir_textField;
         managed XmTextField project_data_dir_textField;
         managed XmPushButton project_close_Pushbutton;
         managed XmLabel label10;
         managed XmLabel label33;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_project_dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label33 : XmLabel widget {
    arguments {
        arguments newstatustextfield;
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Data Directory:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 48;
        XmNwidth = 155;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks newstatustextfieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers newstatustextfieldHandlers;
!(BX)    };
};

object label10 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Processing Directory:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 86;
        XmNwidth = 155;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object project_close_Pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNx = 362;
        XmNy = 250;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure project_close_callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object project_data_dir_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 170;
        XmNy = 48;
        XmNwidth = 240;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_project_data_dir_textField);
       XmNactivateCallback = procedures {
                 project_data_dir_cb();
                 newline_activateCallback();
        };
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object project_proc_dir_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 170;
        XmNy = 86;
        XmNwidth = 240;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_project_proc_dir_textField);
       XmNactivateCallback = procedures {
                 project_proc_dir_cb();
                 newline_activateCallback();
        };
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label34 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Image Prefix:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 124;
        XmNwidth = 155;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object label35 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Space Group:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 200;
        XmNwidth = 155;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object label40 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Project Parameter File:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 162;
        XmNwidth = 155;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object project_i_prefix_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 170;
        XmNy = 124;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_project_i_prefix_textField);
       XmNactivateCallback = procedures {
                 project_i_prefix_cb();
                 newline_activateCallback();
        };
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object project_spgrp_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 170;
        XmNy = 200;
        XmNwidth = 100;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_project_spgrp_textField);
       XmNactivateCallback = procedures {
                 project_spgrp_cb();
                 newline_activateCallback();
        };
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object project_param_file_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 170;
        XmNy = 162;
        XmNwidth = 150;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_project_param_file_textField);
       XmNactivateCallback = procedures {
                 project_param_file_cb();
                 newline_activateCallback();
        };
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object menuBar4 : XmMenuBar widget {
    arguments {
        arguments newstatustextfield;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton4;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 436;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton cascadeButton4;
    };
    callbacks {
        callbacks newstatustextfieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers newstatustextfieldHandlers;
!(BX)    };
};

object cascadeButton4 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNbackground = color('Papaya Whip');
        XmNmarginHeight = 0;
        XmNlabelString = compound_string("Help");
        XmNx = 386;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu8;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object pulldownMenu8 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton pushButton148;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton148 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure project_help_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object project_new_Pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Create New Project");
        XmNx = 191;
        XmNy = 250;
        XmNwidth = 150;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure project_new_callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object project_prev_Pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Get Previous Project");
        XmNx = 18;
        XmNy = 250;
        XmNwidth = 150;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure project_prev_callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell34 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Define Kappa?";
!(BX)        XmNx = 829;
!(BX)        XmNy = 280;
!(BX)        XmNwidth = 371;
!(BX)        XmNheight = 169;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog define_kappa_Dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object define_kappa_Dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 829;
        XmNy = 280;
        XmNwidth = 371;
        XmNheight = 169;
    };
    controls {
         managed XmLabel label77;
         managed XmPushButton pushButton199;
         managed XmPushButton pushButton200;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_kappa_Dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton200 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = YES;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNx = 224;
        XmNy = 120;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure define_kappa_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton199 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 304;
        XmNy = 120;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure define_kappa_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label77 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("Defining kappa will not move kap" &
 "pa.", separate=true) &
 compound_string("It will redefine the current kappa.", separate=true) &
 compound_string("", separate=true) &
 compound_string("Are you SURE you want to do this?");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 348;
        XmNheight = 97;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell33 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Define Omega?";
!(BX)        XmNx = 834;
!(BX)        XmNy = 151;
!(BX)        XmNwidth = 371;
!(BX)        XmNheight = 169;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog define_omega_Dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object define_omega_Dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 834;
        XmNy = 151;
        XmNwidth = 371;
        XmNheight = 169;
    };
    controls {
         managed XmLabel label76;
         managed XmPushButton pushButton197;
         managed XmPushButton pushButton198;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_omega_Dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton198 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = YES;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNx = 224;
        XmNy = 120;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure define_omega_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton197 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 304;
        XmNy = 120;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure define_omega_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label76 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("Defining omega will not move ome" &
 "ga.", separate=true) &
 compound_string("It will redefine the current omega.", separate=true) &
 compound_string("", separate=true) &
 compound_string("Are you SURE you want to do this?");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 348;
        XmNheight = 97;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell32 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Add Parameter File";
!(BX)        XmNx = 848;
!(BX)        XmNy = 204;
!(BX)        XmNwidth = 326;
!(BX)        XmNheight = 374;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFileSelectionDialog optimize_add_fSB;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object optimize_add_fSB : XmFileSelectionDialog widget {
    arguments {
        arguments BackGround;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNbuttonFontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelFontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNtextFontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNdefaultPosition = false;
        XmNokLabelString = compound_string("Add");
        XmNapplyLabelString = compound_string("Filter");
        XmNhelpLabelString = compound_string("Help");
        XmNx = 848;
        XmNy = 204;
        XmNwidth = 326;
        XmNheight = 374;
    };
    controls {
        Xm_Items managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_ItemsList managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Selection managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Text managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_FilterLabel managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_FilterText managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_DirList managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Dir managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Apply managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_add_fSB);
        XmNokCallback = procedure optimize_add_load();
        XmNcancelCallback = procedure optimize_cancel_cb();
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell27 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Local Site";
!(BX)        XmNx = 667;
!(BX)        XmNy = 322;
!(BX)        XmNwidth = 380;
!(BX)        XmNheight = 249;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog localSiteDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object localSiteDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNx = 667;
        XmNy = 322;
        XmNwidth = 380;
        XmNheight = 249;
    };
    controls {
         managed XmTextField wavelength_textField;
         managed XmLabel label7;
         managed XmPushButton localSite_button1;
         managed XmLabel localSite_label1;
         managed XmPushButton pushButton147;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_localSiteDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton147 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Close");
        XmNrecomputeSize = false;
        XmNx = 149;
        XmNy = 200;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure localsite_OK_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object localSite_label1 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 90;
        XmNwidth = 360;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_localSite_label1);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object localSite_button1 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("beamline_gui");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 140;
        XmNwidth = 360;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_localSite_button1);
        XmNactivateCallback = procedure localsite_command();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label7 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("Wavelength:");
        XmNrecomputeSize = false;
        XmNx = 44;
        XmNy = 30;
        XmNwidth = 102;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object wavelength_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNcursorPosition = 0;
        XmNx = 150;
        XmNy = 30;
        XmNwidth = 52;
    };
    controls {
         unmanaged XmPopupMenu popupMenu19;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_wavelength_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu19 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton149;
         managed XmPushButton pushButton150;
         managed XmPushButton pushButton151;
         managed XmPushButton pushButton152;
         managed XmPushButton pushButton153;
         managed XmPushButton pushButton154;
         managed XmPushButton pushButton155;
         managed XmPushButton pushButton156;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton149 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton150 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton151 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton152 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 135;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("135");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton153 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton154 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 225;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("225");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton155 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 270;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("270");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton156 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 315;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("315");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

!(BX)object xmDialogShell26 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Weak Beam";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 320;
!(BX)        XmNheight = 206;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog weakbeamDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object weakbeamDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 320;
        XmNheight = 206;
    };
    controls {
         managed XmLabel weakbeam_label2;
         managed XmPushButton pushButton145;
         managed XmPushButton pushButton146;
         managed XmLabel weakbeam_label1;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_weakbeamDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object weakbeam_label1 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginHeight = 0;
        XmNmarginTop = 13;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("X-Ray Beam Intensity is only:", separate=true) &
 compound_string("", separate=true) &
 compound_string("", separate=true) &
 compound_string("", separate=true) &
 compound_string("Really Collect Data?", separate=true);
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 297;
        XmNheight = 124;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton146 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 252;
        XmNy = 156;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure weakbeam_Abort_activateCb();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton145 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNx = 178;
        XmNy = 156;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure weakbeam_Collect_activateCb();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object weakbeam_label2 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginHeight = 0;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("190.0 ");
        XmNrecomputeSize = false;
        XmNx = 130;
        XmNy = 56;
        XmNwidth = 67;
        XmNheight = 33;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_weakbeam_label2);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell25 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX -  XRay Intensity";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 395;
!(BX)        XmNheight = 223;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog nobeamDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object nobeamDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 395;
        XmNheight = 223;
    };
    controls {
         managed XmLabel nobeam_label2;
         managed XmPushButton pushButton144;
         managed XmPushButton pushButton143;
         managed XmLabel nobeam_label1;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_nobeamDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object nobeam_label1 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginHeight = 0;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("X-Ray Beam Intensity has dropped" &
 " from", separate=true) &
 compound_string("", separate=true) &
 compound_string("", separate=true) &
 compound_string("", separate=true) &
 compound_string("Data Collection has been ") &
 compound_string(#character_set("BOLD_FONT")"Aborted") &
 compound_string(".");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 372;
        XmNheight = 138;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton143 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("OK");
        XmNrecomputeSize = false;
        XmNx = 316;
        XmNy = 172;
        XmNwidth = 70;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure nobeam_OK_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton144 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Restart");
        XmNrecomputeSize = false;
        XmNx = 226;
        XmNy = 172;
        XmNwidth = 70;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure nobeam_Restart_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object nobeam_label2 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginHeight = 0;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("190.0 to 10.0");
        XmNrecomputeSize = false;
        XmNx = 125;
        XmNy = 62;
        XmNwidth = 142;
        XmNheight = 33;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_nobeam_label2);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell23 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Manual Control Info";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 450;
!(BX)        XmNheight = 240;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog mcinfoDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object mcinfoDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 450;
        XmNheight = 240;
    };
    controls {
         managed XmPushButton pushButton26;
         managed XmLabel mcinfo_label;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mcinfoDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mcinfo_label : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginHeight = 0;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("Selecting Drive or Define will n" &
 "ot immediately", separate=true) &
 compound_string("perform the desired operation.", separate=true) &
 compound_string("", separate=true) &
 compound_string("Either click on the ") &
 compound_string(#character_set("BOLD_FONT")"Apply") &
 compound_string(" button or type a ", separate=true) &
 compound_string(#character_set("BOLD_FONT")"Carriage Return") &
 compound_string(" in the appropriate text field", separate=true) &
 compound_string("to the left of the Apply button.");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 427;
        XmNheight = 168;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton26 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("OK");
        XmNrecomputeSize = false;
        XmNx = 382;
        XmNy = 191;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure mcinfo_OK_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell21 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Warning (Disk Space)";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 383;
!(BX)        XmNheight = 157;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog diskfullDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object diskfullDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 383;
        XmNheight = 157;
    };
    controls {
         managed XmLabel disk_full_label2;
         managed XmLabel disk_full_label1;
         managed XmPushButton pushButton20;
         managed XmLabel disk_full_label;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_diskfullDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object disk_full_label : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string(" ", separate=true) &
 compound_string(" ", separate=true);
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 359;
        XmNheight = 84;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_disk_full_label);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton20 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-*-*-*-*-iso8859-1'));
        XmNlabelString = compound_string("OK");
        XmNrecomputeSize = false;
        XmNx = 315;
        XmNy = 110;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure df_OK_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object disk_full_label1 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("/d1/ip/test");
        XmNrecomputeSize = false;
        XmNx = 12;
        XmNy = 20;
        XmNwidth = 358;
        XmNheight = 31;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_disk_full_label1);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object disk_full_label2 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Free Space: 900 Mb (40 Images)");
        XmNrecomputeSize = false;
        XmNx = 12;
        XmNy = 58;
        XmNwidth = 358;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_disk_full_label2);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell17 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Error";
!(BX)        XmNx = 183;
!(BX)        XmNy = 164;
!(BX)        XmNwidth = 684;
!(BX)        XmNheight = 205;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog error_Dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object error_Dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 183;
        XmNy = 164;
        XmNwidth = 684;
        XmNheight = 205;
    };
    controls {
         managed XmScrolledWindow scrolledWindow;
         managed XmPushButton error_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_error_Dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object error_pushButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = EXIT_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("OK");
        XmNrecomputeSize = false;
        XmNx = 616;
        XmNy = 156;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_error_pushButton);
        XmNactivateCallback = procedure error_Dialog_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object scrolledWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 660;
        XmNheight = 132;
    };
    controls {
         managed XmText error_Dialog_text;
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object error_Dialog_text : XmText widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNtopShadowColor = color('Peach Puff');
        XmNmarginHeight = 0;
        XmNmarginWidth = 5;
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNeditable = false;
        XmNfontList = font_table(
		font('-*-lucidatypewriter-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNwordWrap = true;
        XmNscrollHorizontal = false;
        XmNwidth = 643;
        XmNheight = 130;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_error_Dialog_text);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell14 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Abort?";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 296;
!(BX)        XmNheight = 146;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog abortDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object abortDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 296;
        XmNheight = 146;
    };
    controls {
         managed XmPushButton pushButton14;
         managed XmPushButton pushButton18;
         managed XmLabel label58;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_abortDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label58 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Really Stop Data Collection", separate=true) &
 compound_string("Immediately?");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 273;
        XmNheight = 74;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton18 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_YES;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNx = 149;
        XmNy = 98;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton18);
        XmNactivateCallback = procedure abort_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton14 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 229;
        XmNy = 98;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure abort_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell12 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Delete Method";
!(BX)        XmNx = 725;
!(BX)        XmNy = 224;
!(BX)        XmNwidth = 326;
!(BX)        XmNheight = 374;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFileSelectionDialog delete_method_fSB;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object delete_method_fSB : XmFileSelectionDialog widget {
    arguments {
        arguments BackGround;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = DELETE_METHOD;
        XmNbuttonFontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelFontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNtextFontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNdefaultPosition = false;
        XmNokLabelString = compound_string("Delete");
        XmNx = 725;
        XmNy = 224;
        XmNwidth = 326;
        XmNheight = 374;
    };
    controls {
        Xm_Items managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_ItemsList managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Selection managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Text managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Separator managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_OK managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Cancel managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Help managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_FilterLabel managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_FilterText managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_DirList managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Dir managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
        Xm_Apply managed {
            arguments {
                arguments BackGround;
            };
            callbacks {
                    callbacks BackGroundReasons;
            };
!(BX)            handlers {
!(BX)                handlers BackGroundHandlers;
!(BX)            };
        };
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_delete_method_fSB);
        XmNhelpCallback = procedure method_helpCallback();
        XmNokCallback = procedure method_okCallback();
        XmNapplyCallback = procedure method_applyCallback();
        XmNcancelCallback = procedure method_cancelCallback();
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell11 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Save Method";
!(BX)        XmNx = 726;
!(BX)        XmNy = 197;
!(BX)        XmNwidth = 400;
!(BX)        XmNheight = 375;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFileSelectionDialog save_method_fSB;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object save_method_fSB : XmFileSelectionDialog widget {
    arguments {
        arguments Labellook;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = SAVE_METHOD;
        XmNbuttonFontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelFontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNtextFontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNdefaultPosition = false;
        XmNnoResize = false;
        XmNokLabelString = compound_string("Save");
        XmNfileTypeMask = XmFILE_REGULAR;
        XmNx = 726;
        XmNy = 197;
        XmNwidth = 400;
        XmNheight = 375;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_save_method_fSB);
        XmNhelpCallback = procedure method_helpCallback();
        XmNokCallback = procedure method_okCallback();
        XmNapplyCallback = procedure method_applyCallback();
        XmNcancelCallback = procedure method_cancelCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell10 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Load Method";
!(BX)        XmNx = 837;
!(BX)        XmNy = 187;
!(BX)        XmNwidth = 400;
!(BX)        XmNheight = 374;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmFileSelectionDialog load_method_fSB;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object load_method_fSB : XmFileSelectionDialog widget {
    arguments {
        arguments BackGround;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = LOAD_METHOD;
        XmNbuttonFontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelFontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNtextFontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNdefaultPosition = false;
        XmNokLabelString = compound_string("Load");
        XmNhelpLabelString = compound_string("Help");
        XmNx = 837;
        XmNy = 187;
        XmNwidth = 326;
        XmNheight = 374;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_load_method_fSB);
        XmNhelpCallback = procedure method_helpCallback();
        XmNokCallback = procedure method_okCallback();
        XmNapplyCallback = procedure method_applyCallback();
        XmNcancelCallback = procedure method_cancelCallback();
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell4 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Exit?";
!(BX)        XmNx = 459;
!(BX)        XmNy = 278;
!(BX)        XmNwidth = 272;
!(BX)        XmNheight = 135;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog exitDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object exitDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = true;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 459;
        XmNy = 278;
        XmNwidth = 272;
        XmNheight = 135;
    };
    controls {
         managed XmPushButton pushButton220;
         managed XmPushButton pushButton8;
         managed XmPushButton pushButton9;
         managed XmLabel label28;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_exitDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label28 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Really Exit?");
        XmNrecomputeSize = false;
        XmNx = 58;
        XmNy = 12;
        XmNwidth = 157;
        XmNheight = 50;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton9 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = EXIT_YES;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Gui");
        XmNrecomputeSize = false;
        XmNx = 107;
        XmNy = 82;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton9);
        XmNactivateCallback = procedure exit_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton8 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = EXIT_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 185;
        XmNy = 82;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure exit_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton220 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = EXIT_ALL;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("All");
        XmNrecomputeSize = false;
        XmNx = 29;
        XmNy = 82;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton220);
        XmNactivateCallback = procedure exit_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell2 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNx = 738;
!(BX)        XmNy = 423;
!(BX)        XmNwidth = 705;
!(BX)        XmNheight = 516;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog strategyDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object strategyDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogTitle = compound_string("ADX - Run(s)");
        XmNx = 738;
        XmNy = 423;
        XmNwidth = 705;
        XmNheight = 516;
    };
    controls {
         managed XmRadioBox strategy_MAD_mode;
         managed XmLabel label117;
         managed XmLabel label89;
         managed XmLabel label36;
         managed XmRadioBox strategy_compression;
         managed XmLabel label29;
         managed XmTextField strategy_wedge_textField;
         managed XmLabel label18;
         managed XmRadioBox strategy_anomalous_mode;
         managed XmLabel label2;
         managed XmLabel label83;
         managed XmTextField strategy_beamy_textField;
         managed XmLabel label82;
         managed XmLabel label81;
         managed XmTextField strategy_beamx_textField;
         managed XmLabel label80;
         managed XmBulletinBoard form13;
         managed XmBulletinBoard form12;
         managed XmBulletinBoard form3;
         unmanaged XmForm beamline_label;
         unmanaged XmScrolledWindow bl_scrolledwindow;
         managed XmBulletinBoard form11;
         managed XmScrolledWindow scrolledWindow1;
         managed XmBulletinBoard form10;
         managed XmBulletinBoard form8;
         managed XmBulletinBoard form7;
         managed XmBulletinBoard form6;
         managed XmLabel label51;
         managed XmBulletinBoard form5;
         managed XmBulletinBoard form4;
         managed XmTextField strategy_comment_textField;
         managed XmLabel label;
         managed XmPushButton strategy_collect_Pushbutton;
         managed XmMenuBar menuBar;
         managed XmPushButton strategy_close_pushbutton;
         managed XmLabel label26;
         managed XmRadioBox strategy_time_dose_mode;
         managed XmTextField strategy_image_prefix_textField;
         managed XmLabel label21;
         managed XmTextField strategy_directory_textField;
         managed XmLabel label22;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategyDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label22 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Directory:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 42;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_directory_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNvalue = "";
        XmNx = 117;
        XmNy = 43;
        XmNwidth = 382;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_directory_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label21 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Image Prefix:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 80;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_image_prefix_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 117;
        XmNy = 81;
        XmNwidth = 382;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_image_prefix_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object strategy_time_dose_mode : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNx = 375;
        XmNy = 115;
        XmNwidth = 123;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton strategy_time_mode_toggleButton;
         managed XmToggleButton strategy_dose_mode_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_mode_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Time");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_time_mode_toggleButton);
        XmNarmCallback = procedure strategy_time_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_dose_mode_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Dose");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_dose_mode_toggleButton);
        XmNarmCallback = procedure strategy_dose_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label26 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Mode:");
        XmNrecomputeSize = false;
        XmNx = 267;
        XmNy = 118;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_close_pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNrecomputeSize = false;
        XmNx = 620;
        XmNy = 460;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_close_pushbutton);
        XmNactivateCallback = procedure strategy_close_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object menuBar : XmMenuBar widget {
    arguments {
        arguments Labellook;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton2;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 704;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton cascadeButton;
         managed XmCascadeButton cascadeButton1;
         managed XmCascadeButton cascadeButton2;
         managed XmCascadeButton cascadeButton11;
         managed XmCascadeButton cascadeButton13;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_menuBar);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object cascadeButton : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Method");
        XmNx = 2;
        XmNy = 2;
        XmNwidth = 66;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu method_pulldownMenu;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object method_pulldownMenu : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 67;
        XmNheight = 73;
    };
    controls {
         managed XmPushButton loadPushButton;
         managed XmPushButton savePushButton;
         managed XmPushButton deletePushButton;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object loadPushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = LOAD_METHOD;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Load...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure method_callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object savePushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = SAVE_METHOD;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Save...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure method_callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object deletePushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = DELETE_METHOD;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Delete...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure method_callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object cascadeButton1 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Restart");
        XmNx = 68;
        XmNy = 2;
        XmNwidth = 65;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu restart_pulldownMenu;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object restart_pulldownMenu : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 72;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton restartPushButton;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object restartPushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Restart...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strategy_restart_activateCb();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object cascadeButton2 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Help");
        XmNx = 654;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu help_pulldownMenu;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object help_pulldownMenu : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton help_PushButton;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object help_PushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strategy_help_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object cascadeButton11 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Config");
        XmNx = 133;
        XmNy = 2;
        XmNwidth = 61;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu options_pulldownMenu;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object options_pulldownMenu : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 51;
        XmNheight = 50;
    };
    controls {
         managed XmPushButton configCCDPushButton;
         managed XmPushButton configSitePushButton;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object configCCDPushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("CCD...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strategy_configCCD_activateCb();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object configSitePushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Site...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strategy_configSite_activateCb();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object cascadeButton13 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Mad");
        XmNx = 194;
        XmNy = 2;
        XmNwidth = 44;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu mad_pulldownMenu;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object mad_pulldownMenu : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 54;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton mADPushButton;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object mADPushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("MAD...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strategy_MAD_activateCb();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object strategy_collect_Pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Collect");
        XmNrecomputeSize = false;
        XmNx = 550;
        XmNy = 460;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_collect_Pushbutton);
        XmNactivateCallback = procedure collect_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Comment:");
        XmNx = 10;
        XmNy = 232;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_comment_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 117;
        XmNy = 231;
        XmNwidth = 537;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_comment_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object form4 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 20;
        XmNy = 290;
        XmNwidth = 44;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label49;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label49 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNlabelString = compound_string("Run#");
        XmNrecomputeSize = true;
        XmNx = 4;
        XmNy = 8;
        XmNwidth = 36;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu2;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu2 : XmPopupMenu widget {
    arguments {
        arguments MenuButtonStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 22;
    };
    controls {
         managed XmPushButton pushButton;
         managed XmPushButton pushButton1;
         managed XmPushButton pushButton22;
         managed XmPushButton pushButton31;
         managed XmPushButton pushButton32;
         managed XmPushButton pushButton33;
         managed XmPushButton pushButton34;
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 1;
        XmNlabelString = compound_string("1");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_run_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton1 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 2;
        XmNlabelString = compound_string("2");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_run_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton22 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 3;
        XmNlabelString = compound_string("3");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_run_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton31 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 4;
        XmNlabelString = compound_string("4");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_run_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton32 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 5;
        XmNlabelString = compound_string("5");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_run_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton33 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 6;
        XmNlabelString = compound_string("6");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_run_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton34 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 7;
        XmNlabelString = compound_string("7");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_run_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object form5 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNmarginWidth = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 67;
        XmNy = 290;
        XmNwidth = 99;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label50;
         managed XmLabel label30;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label30 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Total");
        XmNrecomputeSize = false;
        XmNx = 56;
        XmNy = 8;
        XmNwidth = 38;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu4;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu4 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton41;
         managed XmPushButton pushButton42;
         managed XmPushButton pushButton43;
         managed XmPushButton pushButton44;
         managed XmPushButton pushButton45;
         managed XmPushButton pushButton46;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton41 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 1;
        XmNlabelString = compound_string("1");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_total_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton42 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 30;
        XmNlabelString = compound_string("30");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_total_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton43 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_total_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton44 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 60;
        XmNlabelString = compound_string("60");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_total_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton45 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_total_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton46 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_total_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object label50 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Start");
        XmNrecomputeSize = true;
        XmNx = 4;
        XmNy = 8;
        XmNwidth = 40;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu3;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu3 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton35;
         managed XmPushButton pushButton36;
         managed XmPushButton pushButton37;
         managed XmPushButton pushButton38;
         managed XmPushButton pushButton39;
         managed XmPushButton pushButton40;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton35 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 1;
        XmNlabelString = compound_string("001");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_start_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton36 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 30;
        XmNlabelString = compound_string("030");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_start_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton37 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNlabelString = compound_string("045");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_start_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton38 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 60;
        XmNlabelString = compound_string("060");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_start_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton39 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNlabelString = compound_string("090");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_start_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton40 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_start_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object label51 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNlabelString = compound_string("Frames");
        XmNrecomputeSize = false;
        XmNx = 90;
        XmNy = 280;
        XmNwidth = 50;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object form6 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 169;
        XmNy = 290;
        XmNwidth = 74;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label52;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label52 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Distance");
        XmNrecomputeSize = true;
        XmNx = 4;
        XmNy = 8;
        XmNwidth = 64;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu5;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu5 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton47;
         managed XmPushButton pushButton48;
         managed XmPushButton pushButton49;
         managed XmPushButton pushButton50;
         managed XmPushButton pushButton51;
         managed XmPushButton pushButton52;
         managed XmPushButton pushButton53;
         managed XmPushButton pushButton54;
         managed XmPushButton pushButton55;
         managed XmPushButton pushButton217;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton47 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 30;
        XmNlabelString = compound_string("30");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton48 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 40;
        XmNlabelString = compound_string("40");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton49 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 50;
        XmNlabelString = compound_string("50");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton50 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 60;
        XmNlabelString = compound_string("60");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton51 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 70;
        XmNlabelString = compound_string("70");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton52 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 80;
        XmNlabelString = compound_string("80");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton53 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 100;
        XmNlabelString = compound_string("100");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton54 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 120;
        XmNlabelString = compound_string("120");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton55 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 150;
        XmNlabelString = compound_string("150");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton217 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 200;
        XmNlabelString = compound_string("200");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object form7 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNnoResize = true;
        XmNx = 246;
        XmNy = 290;
        XmNwidth = 56;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label53;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label53 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNfontList = font_table(
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('symbol')));
        XmNlabelString = compound_string("2-q");
        XmNrecomputeSize = true;
        XmNx = 14;
        XmNy = 8;
        XmNwidth = 30;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu6;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu6 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton56;
         managed XmPushButton pushButton57;
         managed XmPushButton pushButton58;
         managed XmPushButton pushButton59;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton56 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton57 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 50;
        XmNlabelString = compound_string("50");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton58 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 100;
        XmNlabelString = compound_string("100");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton59 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 150;
        XmNlabelString = compound_string("150");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object form8 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 305;
        XmNy = 290;
        XmNwidth = 48;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label54;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label54 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Phi");
        XmNrecomputeSize = true;
        XmNx = 10;
        XmNy = 8;
        XmNwidth = 34;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu7;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu7 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton60;
         managed XmPushButton pushButton61;
         managed XmPushButton pushButton62;
         managed XmPushButton pushButton63;
         managed XmPushButton pushButton64;
         managed XmPushButton pushButton65;
         managed XmPushButton pushButton66;
         managed XmPushButton pushButton67;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton60 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton60);
        XmNactivateCallback = procedure strat_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton61 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton61);
        XmNactivateCallback = procedure strat_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton62 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton62);
        XmNactivateCallback = procedure strat_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton63 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 135;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("135");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton63);
        XmNactivateCallback = procedure strat_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton64 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton64);
        XmNactivateCallback = procedure strat_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton65 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 225;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("225");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton65);
        XmNactivateCallback = procedure strat_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton66 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 270;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("270");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton66);
        XmNactivateCallback = procedure strat_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton67 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 315;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("315");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton67);
        XmNactivateCallback = procedure strat_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object form10 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNnoResize = true;
        XmNx = 567;
        XmNy = 290;
        XmNwidth = 44;
        XmNheight = 30;
    };
    controls {
         managed XmLabel strategy_time_dose_label;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object strategy_time_dose_label : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Time");
        XmNrecomputeSize = true;
        XmNx = 2;
        XmNy = 8;
        XmNwidth = 36;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu9;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_time_dose_label);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu9 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 46;
    };
    controls {
         managed XmPushButton pushButton74;
         managed XmPushButton pushButton75;
         managed XmPushButton pushButton76;
         managed XmPushButton pushButton77;
         managed XmPushButton pushButton78;
         managed XmPushButton pushButton79;
         managed XmPushButton pushButton80;
         managed XmPushButton pushButton81;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton74 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 10;
        XmNlabelString = compound_string("10");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton75 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 30;
        XmNlabelString = compound_string("30");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton76 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 60;
        XmNlabelString = compound_string("60");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton77 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 120;
        XmNlabelString = compound_string("120");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton78 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 300;
        XmNlabelString = compound_string("300");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton79 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 600;
        XmNlabelString = compound_string("600");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton80 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 1200;
        XmNlabelString = compound_string("1200");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton81 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 3600;
        XmNlabelString = compound_string("3600");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object scrolledWindow1 : XmScrolledWindow widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNx = 20;
        XmNy = 321;
        XmNwidth = 670;
        XmNheight = 116;
    };
    controls {
         managed XmText runtext;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_scrolledWindow1);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object runtext : XmText widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('White');
        XmNhighlightThickness = 1;
        XmNshadowThickness = 1;
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNfontList = font_table(
		font('-*-lucidatypewriter-medium-r-*-*-*-120-75-75-m-*-iso8859-1'));
        XmNrows = 8;
        XmNresizeWidth = false;
        XmNscrollHorizontal = false;
        XmNwidth = 653;
    };
    controls {
         unmanaged XmPopupMenu popupMenu1;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_runtext);
        XmNfocusCallback = procedure text_focusCallback();
        XmNmodifyVerifyCallback = procedure text_modifyVerifyCallback();
        XmNmotionVerifyCallback = procedure text_motionVerifyCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu1 : XmPopupMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 72;
        XmNheight = 54;
    };
    controls {
         managed XmCascadeButton cascadeButton9;
         managed XmCascadeButton cascadeButton10;
    };
    callbacks {
    };
};

object cascadeButton9 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Insert");
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu6;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object pulldownMenu6 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 59;
        XmNheight = 50;
    };
    controls {
         managed XmPushButton pushButton19;
         managed XmPushButton pushButton28;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton19 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Before");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure text_insertBefore();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton28 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("After");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure text_insertAfter();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object cascadeButton10 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Delete");
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu7;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object pulldownMenu7 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 44;
        XmNheight = 50;
    };
    controls {
         managed XmPushButton pushButton27;
         managed XmPushButton pushButton29;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton27 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Line");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure text_deleteLine();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton29 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("All");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure text_deleteAll();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object form11 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 613;
        XmNy = 290;
        XmNwidth = 65;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label57;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label57 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("De-Zngr");
        XmNrecomputeSize = true;
        XmNx = 2;
        XmNy = 8;
        XmNwidth = 58;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu10;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu10 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 60;
    };
    controls {
         managed XmPushButton pushButton83;
         managed XmPushButton pushButton82;
         managed XmPushButton pushButton6;
         managed XmPushButton pushButton7;
         managed XmPushButton pushButton25;
         managed XmPushButton pushButton30;
         managed XmPushButton pushButton230;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton83 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNlabelString = compound_string("N");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_dzngr_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton82 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 1;
        XmNlabelString = compound_string("Y  (1:1)");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_dzngr_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton6 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 2;
        XmNlabelString = compound_string("1/2");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_dzngr_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton7 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 4;
        XmNlabelString = compound_string("1/4");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_dzngr_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton25 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 8;
        XmNlabelString = compound_string("1/8");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_dzngr_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton30 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 16;
        XmNlabelString = compound_string("1/16");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_dzngr_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton230 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 32;
        XmNlabelString = compound_string("1/32");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_dzngr_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object bl_scrolledwindow : XmScrolledWindow widget {
    arguments {
        XmNbackground = color('Papaya Whip');
        XmNforeground = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNx = 620;
        XmNy = 55;
        XmNwidth = 215;
        XmNheight = 165;
    };
    controls {
         managed XmList beamline_list;
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_bl_scrolledwindow);
    };
};

object beamline_list : XmList widget {
    arguments {
        XmNbackground = color('White');
        XmNshadowThickness = 1;
        XmNfontList = font_table(
		font('-*-lucidatypewriter-medium-r-*-*-*-120-75-75-m-*-iso8859-1'));
        XmNscrollBarDisplayPolicy = XmSTATIC;
        XmNwidth = 198;
        XmNheight = 165;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_beamline_list);
        XmNbrowseSelectionCallback = procedure bs_Callback();
    };
};

object beamline_label : XmForm widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 100;
        XmNy = 426;
        XmNwidth = 175;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label67;
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_beamline_label);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label67 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNlabelString = compound_string("Beamline");
        XmNrecomputeSize = true;
        XmNleftAttachment = XmATTACH_NONE;
        XmNrightAttachment = XmATTACH_FORM;
        XmNbottomPosition = 0;
        XmNtopOffset = 8;
        XmNrightOffset = 4;
        XmNx = 99;
        XmNy = 8;
        XmNwidth = 72;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object form3 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 356;
        XmNy = 290;
        XmNwidth = 51;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label71;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label71 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Kappa");
        XmNrecomputeSize = true;
        XmNx = 2;
        XmNy = 8;
        XmNwidth = 44;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu21;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu21 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton162;
         managed XmPushButton pushButton163;
         managed XmPushButton pushButton164;
         managed XmPushButton pushButton165;
         managed XmPushButton pushButton166;
         managed XmPushButton pushButton167;
         managed XmPushButton pushButton168;
         managed XmPushButton pushButton169;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton162 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton162);
        XmNactivateCallback = procedure strat_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton163 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton163);
        XmNactivateCallback = procedure strat_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton164 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton164);
        XmNactivateCallback = procedure strat_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton165 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 135;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("135");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton165);
        XmNactivateCallback = procedure strat_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton166 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton166);
        XmNactivateCallback = procedure strat_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton167 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 225;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("225");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton167);
        XmNactivateCallback = procedure strat_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton168 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 270;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("270");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton168);
        XmNactivateCallback = procedure strat_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton169 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 315;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("315");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton169);
        XmNactivateCallback = procedure strat_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object form12 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 410;
        XmNy = 290;
        XmNwidth = 56;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label72;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label72 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Omega");
        XmNrecomputeSize = true;
        XmNx = 2;
        XmNy = 8;
        XmNwidth = 50;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu22;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu22 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton170;
         managed XmPushButton pushButton171;
         managed XmPushButton pushButton172;
         managed XmPushButton pushButton173;
         managed XmPushButton pushButton174;
         managed XmPushButton pushButton175;
         managed XmPushButton pushButton176;
         managed XmPushButton pushButton177;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton170 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton170);
        XmNactivateCallback = procedure strat_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton171 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton171);
        XmNactivateCallback = procedure strat_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton172 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton172);
        XmNactivateCallback = procedure strat_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton173 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 135;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("135");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton173);
        XmNactivateCallback = procedure strat_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton174 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton174);
        XmNactivateCallback = procedure strat_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton175 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 225;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("225");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton175);
        XmNactivateCallback = procedure strat_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton176 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 270;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("270");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton176);
        XmNactivateCallback = procedure strat_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton177 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 315;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("315");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton177);
        XmNactivateCallback = procedure strat_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object form13 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 469;
        XmNy = 290;
        XmNwidth = 95;
        XmNheight = 30;
    };
    controls {
         managed XmLabel label55;
         managed XmLabel label73;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label73 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Axis");
        XmNrecomputeSize = true;
        XmNx = 3;
        XmNy = 8;
        XmNwidth = 34;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu23;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu23 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 62;
    };
    controls {
         managed XmPushButton pushButton178;
         unmanaged XmPushButton pushButton180;
         managed XmPushButton pushButton182;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton178 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Phi");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_axis_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton180 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 1;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Kappa");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_axis_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton182 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 2;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Omega");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_axis_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object label55 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("LABEL_FONT")"Widt" &
 "h");
        XmNrecomputeSize = false;
        XmNx = 47;
        XmNy = 8;
        XmNwidth = 41;
        XmNheight = 20;
    };
    controls {
         unmanaged XmPopupMenu popupMenu8;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object popupMenu8 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 1;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 33;
    };
    controls {
         managed XmPushButton pushButton68;
         managed XmPushButton pushButton69;
         managed XmPushButton pushButton70;
         managed XmPushButton pushButton71;
         managed XmPushButton pushButton72;
         managed XmPushButton pushButton73;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton68 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNlabelString = compound_string("0.0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton69 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 10;
        XmNlabelString = compound_string("0.1");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton70 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 20;
        XmNlabelString = compound_string("0.2");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton71 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 50;
        XmNlabelString = compound_string("0.5");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton72 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 100;
        XmNlabelString = compound_string("1.0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton73 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 200;
        XmNlabelString = compound_string("2.0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strat_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object label80 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Beam Center");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 460;
        XmNwidth = 95;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_beamx_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNcursorPosition = 0;
        XmNx = 144;
        XmNy = 460;
        XmNwidth = 52;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_beamx_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label81 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("X:");
        XmNrecomputeSize = false;
        XmNx = 120;
        XmNy = 460;
        XmNwidth = 20;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label82 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Y:");
        XmNrecomputeSize = false;
        XmNx = 210;
        XmNy = 460;
        XmNwidth = 20;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_beamy_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNcursorPosition = 0;
        XmNx = 234;
        XmNy = 460;
        XmNwidth = 52;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_beamy_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label83 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("(mm from adxv or denzo)");
        XmNrecomputeSize = false;
        XmNx = 300;
        XmNy = 460;
        XmNwidth = 173;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label2 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Anomalous:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 156;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_anomalous_mode : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNx = 117;
        XmNy = 153;
        XmNwidth = 118;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton strategy_anomno_toggleButton;
         managed XmToggleButton strategy_anomyes_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_anomno_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_anomno_toggleButton);
        XmNarmCallback = procedure strategy_anomno_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_anomyes_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_anomyes_toggleButton);
        XmNarmCallback = procedure strategy_anomyes_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label18 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Wedge Size:");
        XmNrecomputeSize = false;
        XmNx = 267;
        XmNy = 156;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label18);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_wedge_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "5";
        XmNcursorPosition = 0;
        XmNx = 374;
        XmNy = 157;
        XmNwidth = 33;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_wedge_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label29 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("(# of Frames)");
        XmNrecomputeSize = false;
        XmNx = 410;
        XmNy = 156;
        XmNwidth = 93;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label29);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_compression : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNadjustLast = true;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNisAligned = false;
        XmNentryAlignment = XmALIGNMENT_CENTER;
        XmNadjustMargin = true;
        XmNx = 117;
        XmNy = 115;
        XmNwidth = 180;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton strategy_comp_none_toggleButton;
         managed XmToggleButton strategy_comp_pck_toggleButton;
         managed XmToggleButton strategy_comp_Z_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_comp_none_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("None");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_comp_none_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_comp_pck_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string(".pck");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_comp_pck_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_comp_Z_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string(".Z");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_comp_Z_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label36 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Compression:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 118;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label89 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginHeight = 0;
        XmNlabelString = compound_string("Rotation");
        XmNrecomputeSize = false;
        XmNx = 490;
        XmNy = 280;
        XmNwidth = 56;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label117 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("MAD:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 194;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_MAD_mode : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNx = 117;
        XmNy = 191;
        XmNwidth = 118;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton strategy_MADno_toggleButton;
         managed XmToggleButton strategy_MADyes_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_MAD_mode);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_MADno_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_MADno_toggleButton);
        XmNarmCallback = procedure strategy_MADno_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_MADyes_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_MADyes_toggleButton);
        XmNarmCallback = procedure strategy_MADyes_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

!(BX)object xmDialogShell : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 1025;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 247;
!(BX)        XmNheight = 525;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmBulletinBoardDialog statusDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object statusDialog : XmBulletinBoardDialog widget {
    arguments {
        XmNbackground = color('Papaya Whip');
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogTitle = compound_string("ADX - Status");
        XmNx = 1025;
        XmNy = 32;
        XmNwidth = 247;
        XmNheight = 525;
    };
    controls {
         unmanaged XmLabel step_kappa_label;
         managed XmLabel status_label_kappa;
         unmanaged XmLabel step_omega_label;
         managed XmLabel status_label_omega;
         managed XmTextField kappa_textField;
         managed XmTextField omega_textField;
         managed XmLabel status_label_2theta;
         managed XmLabel status_label_offset;
         managed XmLabel status_label_phi;
         managed XmTextField speed_textField;
         managed XmTextField binning_textField;
         managed XmLabel label68;
         managed XmLabel label5;
         managed XmLabel label9;
         managed XmBulletinBoard form2;
         managed XmLabel xray_off_label2;
         managed XmLabel xray_on_label2;
         managed XmLabel dose_time_label;
         managed XmTextField intensity_textField;
         managed XmLabel status_shutter_label;
         managed XmLabel label11;
         managed XmBulletinBoard form1;
         managed XmLabel step_phi_label;
         managed XmMenuBar menuBar3;
         managed XmLabel label42;
         managed XmLabel label41;
         managed XmTextField delta_phi_textField;
         managed XmPushButton close_status_pushbutton;
         managed XmTextField image_textField;
         managed XmTextField offset_textField;
         managed XmTextField curr_phi_textField;
         managed XmTextField time_dose_textField;
         managed XmTextField distance_textField;
         managed XmLabel label4;
         managed XmScale expose_scale;
         managed XmTextField status_message;
         managed XmLabel xray_off_label;
         managed XmLabel xray_on_label;
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_statusDialog);
    };
};

object xray_on_label : XmLabel widget {
    arguments {
        XmNborderWidth = 0;
        XmNlabelType = XmPIXMAP;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNlabelPixmap = xraybitmap_icon;
        XmNx = 25;
        XmNy = 104;
        XmNwidth = 32;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_xray_on_label);
    };
};

object xray_off_label : XmLabel widget {
    arguments {
        XmNborderWidth = 0;
        XmNbackground = color('PapayaWhip');
        XmNforeground = color('Peach Puff');
        XmNlabelType = XmPIXMAP;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNlabelPixmap = xrayoffbitmap_icon;
        XmNx = 25;
        XmNy = 104;
        XmNwidth = 32;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_xray_off_label);
    };
};

object status_message : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 10;
        XmNy = 38;
        XmNwidth = 226;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_status_message);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object expose_scale : XmScale widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNsensitive = true;
        XmNbackground = color('Peach Puff');
        XmNborderColor = color('Black');
        XmNforeground = color('Red');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNorientation = XmHORIZONTAL;
        XmNtitleString = compound_string("");
        XmNshowValue = false;
        XmNx = 10;
        XmNy = 74;
        XmNwidth = 226;
        XmNheight = 15;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_expose_scale);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label4 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("Distance:");
        XmNrecomputeSize = false;
        XmNx = 8;
        XmNy = 212;
        XmNwidth = 63;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object distance_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNfontList = font_table(
		font('-*-lucidatypewriter-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 76;
        XmNy = 212;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_distance_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object time_dose_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 76;
        XmNy = 239;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_exp_time_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object curr_phi_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 184;
        XmNy = 155;
        XmNwidth = 55;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_curr_phi_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object offset_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 10;
        XmNy = 155;
        XmNwidth = 55;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_offset_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object image_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 10;
        XmNy = 493;
        XmNwidth = 163;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_image_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object close_status_pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNrecomputeSize = false;
        XmNx = 180;
        XmNy = 478;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure close_status_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object delta_phi_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 177;
        XmNy = 212;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_delta_phi_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label41 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("Binning:");
        XmNrecomputeSize = false;
        XmNx = 8;
        XmNy = 266;
        XmNwidth = 63;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object label42 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("Beam:");
        XmNrecomputeSize = false;
        XmNx = 127;
        XmNy = 239;
        XmNwidth = 45;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object menuBar3 : XmMenuBar widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton8;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 246;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton cascadeButton8;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object cascadeButton8 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNbackground = color('Papaya Whip');
        XmNmarginHeight = 0;
        XmNlabelString = compound_string("Help");
        XmNx = 196;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu5;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object pulldownMenu5 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton pushButton17;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton17 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure status_help_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object step_phi_label : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"Df") &
 compound_string(#character_set("L" &
 "ABEL_FONT")":");
        XmNrecomputeSize = false;
        XmNx = 127;
        XmNy = 212;
        XmNwidth = 45;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_step_phi_label);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object form1 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Gray50');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogTitle = compound_string("");
        XmNx = 10;
        XmNy = 312;
        XmNwidth = 228;
        XmNheight = 49;
    };
    controls {
         managed XmTextField completion_all_textField;
         managed XmLabel label46;
         managed XmTextField completion_this_textField;
         managed XmLabel label45;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label45 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("Current:");
        XmNrecomputeSize = false;
        XmNx = 2;
        XmNy = 14;
        XmNwidth = 59;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object completion_this_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Gray20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 66;
        XmNy = 14;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_completion_this_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label46 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("Total:");
        XmNrecomputeSize = false;
        XmNx = 118;
        XmNy = 14;
        XmNwidth = 44;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object completion_all_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 167;
        XmNy = 14;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_completion_all_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label11 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginLeft = 0;
        XmNmarginRight = 0;
        XmNlabelString = compound_string("Run Completion Time");
        XmNrecomputeSize = false;
        XmNx = 49;
        XmNy = 301;
        XmNwidth = 150;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object status_shutter_label : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNborderWidth = 0;
        XmNborderColor = color('black');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Gray50');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginWidth = 5;
        XmNlabelString = compound_string("Shutter Closed");
        XmNrecomputeSize = false;
        XmNx = 71;
        XmNy = 111;
        XmNwidth = 105;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_status_shutter_label);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object intensity_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 177;
        XmNy = 239;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_intensity_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object dose_time_label : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNalignment = XmALIGNMENT_END;
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Time:");
        XmNrecomputeSize = false;
        XmNx = 8;
        XmNy = 239;
        XmNwidth = 63;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_dose_time_label);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object xray_on_label2 : XmLabel widget {
    arguments {
        XmNborderWidth = 0;
        XmNbackground = color('yellow');
        XmNbackgroundPixmap = bg32x32bitmap_icon;
        XmNforeground = color('red');
        XmNlabelType = XmPIXMAP;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNlabelPixmap = xraybitmap_icon;
        XmNx = 190;
        XmNy = 104;
        XmNwidth = 32;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_xray_on_label2);
    };
};

object xray_off_label2 : XmLabel widget {
    arguments {
        XmNborderWidth = 0;
        XmNbackground = color('PapayaWhip');
        XmNforeground = color('Peach Puff');
        XmNlabelType = XmPIXMAP;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNlabelPixmap = xrayoffbitmap_icon;
        XmNx = 190;
        XmNy = 104;
        XmNwidth = 32;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_xray_off_label2);
    };
};

object form2 : XmBulletinBoard widget {
    arguments {
        arguments statustextField;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Gray50');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 10;
        XmNy = 384;
        XmNwidth = 228;
        XmNheight = 74;
    };
    controls {
         managed XmLabel label44;
         managed XmLabel label43;
         managed XmTextField disk_space_images_textField;
         managed XmTextField disk_space_mb_textField;
         managed XmTextField directory_textField;
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object directory_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 13;
        XmNy = 13;
        XmNwidth = 205;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_directory_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object disk_space_mb_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 167;
        XmNy = 40;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_disk_space_mb_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object disk_space_images_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 66;
        XmNy = 40;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_disk_space_images_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object label43 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("Images:");
        XmNrecomputeSize = false;
        XmNx = 2;
        XmNy = 40;
        XmNwidth = 59;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object label44 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("Mb:");
        XmNx = 118;
        XmNy = 40;
        XmNwidth = 44;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object label9 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Disk Space Free");
        XmNrecomputeSize = false;
        XmNx = 69;
        XmNy = 373;
        XmNwidth = 110;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object label5 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Current Image:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 470;
        XmNwidth = 110;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object label68 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNlabelString = compound_string("ADC:");
        XmNrecomputeSize = false;
        XmNx = 127;
        XmNy = 266;
        XmNwidth = 45;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object binning_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 76;
        XmNy = 266;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_binning_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object speed_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNvalue = "";
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 177;
        XmNy = 266;
        XmNwidth = 50;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_speed_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object status_label_phi : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"f");
        XmNrecomputeSize = false;
        XmNx = 184;
        XmNy = 180;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_status_label_phi);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object status_label_offset : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("LABEL_FONT")"Offs" &
 "et");
        XmNrecomputeSize = false;
        XmNx = 16;
        XmNy = 180;
        XmNwidth = 46;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_status_label_offset);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object status_label_2theta : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"2q");
        XmNrecomputeSize = false;
        XmNx = 13;
        XmNy = 180;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_status_label_2theta);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object omega_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 68;
        XmNy = 155;
        XmNwidth = 55;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_omega_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object kappa_textField : XmTextField widget {
    arguments {
        arguments statustextField;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Grey20');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNeditable = false;
        XmNcursorPositionVisible = false;
        XmNx = 126;
        XmNy = 155;
        XmNwidth = 55;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_kappa_textField);
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object status_label_omega : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"w");
        XmNrecomputeSize = false;
        XmNx = 70;
        XmNy = 180;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_status_label_omega);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object step_omega_label : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"Dw") &
 compound_string(#character_set("L" &
 "ABEL_FONT")":");
        XmNrecomputeSize = false;
        XmNx = 127;
        XmNy = 212;
        XmNwidth = 45;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_step_omega_label);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object status_label_kappa : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"k");
        XmNrecomputeSize = false;
        XmNx = 127;
        XmNy = 180;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_status_label_kappa);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object step_kappa_label : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"Dk") &
 compound_string(#character_set("L" &
 "ABEL_FONT")":");
        XmNrecomputeSize = false;
        XmNx = 127;
        XmNy = 212;
        XmNwidth = 45;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_step_kappa_label);
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

!(BX)object xmDialogShell1 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNx = 854;
!(BX)        XmNy = 101;
!(BX)        XmNwidth = 350;
!(BX)        XmNheight = 503;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog snapshotDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object snapshotDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogTitle = compound_string("ADX - Snapshot");
        XmNx = 854;
        XmNy = 101;
        XmNwidth = 350;
        XmNheight = 503;
    };
    controls {
         managed XmRadioBox strategy_time_dose_mode11;
         managed XmLabel label116;
         unmanaged XmLabel snap_label_start_phi;
         managed XmRadioBox snapshot_axis;
         managed XmLabel label87;
         managed XmLabel snap_label_delta_omega;
         managed XmLabel snap_label_start_omega;
         managed XmLabel label84;
         managed XmLabel label85;
         managed XmRadioBox strategy_time_dose_mode5;
         managed XmRadioBox strategy_time_dose_mode3;
         managed XmLabel label69;
         unmanaged XmLabel snap_label_delta_phi;
         managed XmLabel snap_offset_label;
         managed XmMenuBar menuBar2;
         managed XmPushButton close_snap_pushbutton;
         managed XmTextField snap_offset_textField;
         managed XmRadioBox strategy_time_dose_mode2;
         managed XmLabel label27;
         managed XmPushButton snapshot_pushButton;
         managed XmTextField snap_step_size_textField;
         managed XmTextField snap_phi_textField;
         managed XmTextField snap_exposure_time_textField;
         managed XmTextField snap_distance_textField;
         managed XmLabel label17;
         managed XmLabel label16;
         managed XmLabel label15;
         managed XmTextField snap_image_textField;
         managed XmLabel label14;
         managed XmTextField snap_directory_textField;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snapshotDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_directory_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 127;
        XmNy = 43;
        XmNwidth = 206;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_directory_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label14 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNmarginLeft = 0;
        XmNlabelString = compound_string("Directory:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 42;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_image_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 127;
        XmNy = 81;
        XmNwidth = 206;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_image_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label15 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Image Prefix:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 80;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label16 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNmarginHeight = 4;
        XmNlabelString = compound_string("Distance:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 118;
        XmNwidth = 115;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label17 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Exposure Time:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 232;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_distance_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNcursorPosition = 0;
        XmNx = 127;
        XmNy = 119;
        XmNwidth = 58;
    };
    controls {
         unmanaged XmPopupMenu popupMenu14;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_distance_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu14 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton108;
         managed XmPushButton pushButton109;
         managed XmPushButton pushButton110;
         managed XmPushButton pushButton111;
         managed XmPushButton pushButton112;
         managed XmPushButton pushButton113;
         managed XmPushButton pushButton114;
         managed XmPushButton pushButton115;
         managed XmPushButton pushButton116;
         managed XmPushButton pushButton218;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton108 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 30;
        XmNlabelString = compound_string("30");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton109 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 40;
        XmNlabelString = compound_string("40");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton110 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 50;
        XmNlabelString = compound_string("50");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton111 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 60;
        XmNlabelString = compound_string("60");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton112 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 70;
        XmNlabelString = compound_string("70");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton113 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 80;
        XmNlabelString = compound_string("80");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton114 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 100;
        XmNlabelString = compound_string("100");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton115 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 120;
        XmNlabelString = compound_string("120");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton116 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 150;
        XmNlabelString = compound_string("150");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton218 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 200;
        XmNlabelString = compound_string("200");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object snap_exposure_time_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNcursorPosition = 0;
        XmNcursorPositionVisible = true;
        XmNx = 127;
        XmNy = 233;
        XmNwidth = 58;
    };
    controls {
         unmanaged XmPopupMenu popupMenu18;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_exposure_time_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu18 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 46;
    };
    controls {
         managed XmPushButton pushButton135;
         managed XmPushButton pushButton136;
         managed XmPushButton pushButton137;
         managed XmPushButton pushButton138;
         managed XmPushButton pushButton139;
         managed XmPushButton pushButton140;
         managed XmPushButton pushButton141;
         managed XmPushButton pushButton142;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton135 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 10;
        XmNlabelString = compound_string("10");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton136 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 30;
        XmNlabelString = compound_string("30");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton137 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 60;
        XmNlabelString = compound_string("60");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton138 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 120;
        XmNlabelString = compound_string("120");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton139 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 300;
        XmNlabelString = compound_string("300");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton140 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 600;
        XmNlabelString = compound_string("600");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton141 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 1200;
        XmNlabelString = compound_string("1200");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton142 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 3600;
        XmNlabelString = compound_string("3600");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_time_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object snap_phi_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNcursorPosition = 0;
        XmNx = 127;
        XmNy = 195;
        XmNwidth = 58;
    };
    controls {
         unmanaged XmPopupMenu popupMenu16;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_phi_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu16 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton121;
         managed XmPushButton pushButton122;
         managed XmPushButton pushButton123;
         managed XmPushButton pushButton124;
         managed XmPushButton pushButton125;
         managed XmPushButton pushButton126;
         managed XmPushButton pushButton127;
         managed XmPushButton pushButton128;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton121 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton121);
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton122 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton122);
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton123 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton123);
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton124 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 135;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("135");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton124);
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton125 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton125);
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton126 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 225;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("225");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton126);
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton127 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 270;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("270");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton127);
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton128 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 315;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("315");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton128);
        XmNactivateCallback = procedure snap_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object snap_step_size_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 275;
        XmNy = 195;
        XmNwidth = 58;
    };
    controls {
         unmanaged XmPopupMenu popupMenu17;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_step_size_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu17 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 33;
    };
    controls {
         managed XmPushButton pushButton129;
         managed XmPushButton pushButton130;
         managed XmPushButton pushButton131;
         managed XmPushButton pushButton132;
         managed XmPushButton pushButton133;
         managed XmPushButton pushButton134;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton129 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNlabelString = compound_string("0.0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton130 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 10;
        XmNlabelString = compound_string("0.1");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton131 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 20;
        XmNlabelString = compound_string("0.2");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton132 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 50;
        XmNlabelString = compound_string("0.5");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton133 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 100;
        XmNlabelString = compound_string("1.0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton134 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 200;
        XmNlabelString = compound_string("2.0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_deltaphi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object snapshot_pushButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Snap");
        XmNrecomputeSize = false;
        XmNx = 189;
        XmNy = 447;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snapshot_pushButton);
        XmNactivateCallback = procedure snap_callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label27 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("ADC:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 272;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode2 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 4;
        XmNx = 127;
        XmNy = 273;
        XmNwidth = 142;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton snap_slow_toggleButton;
         managed XmToggleButton snap_fast_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_slow_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Slow");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNspacing = 4;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_slow_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object snap_fast_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Fast");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_fast_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object snap_offset_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 275;
        XmNy = 119;
        XmNwidth = 58;
    };
    controls {
         unmanaged XmPopupMenu popupMenu15;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_offset_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu15 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton117;
         managed XmPushButton pushButton118;
         managed XmPushButton pushButton119;
         managed XmPushButton pushButton120;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton117 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton118 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 50;
        XmNlabelString = compound_string("50");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton119 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 100;
        XmNlabelString = compound_string("100");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton120 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 150;
        XmNlabelString = compound_string("150");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snap_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object close_snap_pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNx = 269;
        XmNy = 447;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure close_snap_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object menuBar2 : XmMenuBar widget {
    arguments {
        arguments Labellook;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton7;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 349;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton cascadeButton7;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object cascadeButton7 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNmarginHeight = 4;
        XmNlabelString = compound_string("Help");
        XmNx = 299;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu4;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object pulldownMenu4 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNmarginHeight = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton pushButton16;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton16 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snapshot_openhelpCB();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object snap_offset_label : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"2q") &
 compound_string(#character_set("L" &
 "ABEL_FONT")"-offset:");
        XmNrecomputeSize = false;
        XmNx = 190;
        XmNy = 117;
        XmNwidth = 80;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_offset_label);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_label_delta_phi : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"D") &
 compound_string(#character_set("L" &
 "ABEL_FONT")"-Phi:");
        XmNrecomputeSize = false;
        XmNx = 190;
        XmNy = 194;
        XmNwidth = 80;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_label_delta_phi);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label69 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Binning:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 313;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode3 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 4;
        XmNx = 127;
        XmNy = 314;
        XmNwidth = 142;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton snap_bin1_toggleButton;
         managed XmToggleButton snap_bin2_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_bin1_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("None");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNspacing = 4;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_bin1_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object snap_bin2_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("2x2");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_bin2_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_time_dose_mode5 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 4;
        XmNx = 127;
        XmNy = 355;
        XmNwidth = 142;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton snap_ydc_toggleButton;
         managed XmToggleButton snap_ndc_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_ydc_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_ydc_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object snap_ndc_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_ndc_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label85 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Dark Current:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 364;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label84 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Collect New ");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 348;
        XmNwidth = 115;
        XmNheight = 22;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_label_start_omega : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelType = XmSTRING;
        XmNlabelString = compound_string("Starting Omega:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 194;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_label_start_omega);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_label_delta_omega : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"D") &
 compound_string(#character_set("L" &
 "ABEL_FONT")"-Omega:");
        XmNrecomputeSize = false;
        XmNx = 190;
        XmNy = 194;
        XmNwidth = 80;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_label_delta_omega);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label87 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Axis:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 156;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snapshot_axis : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 4;
        XmNx = 127;
        XmNy = 156;
        XmNwidth = 142;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton snap_axisOmega_toggleButton;
         managed XmToggleButton snap_axisPhi_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snapshot_axis);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_axisOmega_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Omega");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNspacing = 4;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_axisOmega_toggleButton);
        XmNarmCallback = procedure snap_axisOmega_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object snap_axisPhi_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Phi");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_axisPhi_toggleButton);
        XmNarmCallback = procedure snap_axisPhi_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object snap_label_start_phi : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelType = XmSTRING;
        XmNlabelString = compound_string("Starting Phi:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 194;
        XmNwidth = 115;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_label_start_phi);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label116 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Dezinger:");
        XmNrecomputeSize = false;
        XmNx = 6;
        XmNy = 396;
        XmNwidth = 115;
        XmNheight = 22;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode11 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 4;
        XmNx = 127;
        XmNy = 396;
        XmNwidth = 142;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton snap_dez_yes_toggleButton;
         managed XmToggleButton snap_dez_no_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object snap_dez_yes_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_dez_yes_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object snap_dez_no_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 71;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snap_dez_no_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

!(BX)object xmDialogShell3 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNx = 442;
!(BX)        XmNy = 82;
!(BX)        XmNwidth = 374;
!(BX)        XmNheight = 554;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog manual_controlDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object manual_controlDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNbottomShadowColor = color('Grey65');
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogTitle = compound_string("ADX - Manual Control");
        XmNx = 442;
        XmNy = 82;
        XmNwidth = 374;
        XmNheight = 554;
    };
    controls {
         managed XmTextField modify_wavelength_textField;
         managed XmPushButton mc_wavelength_apply;
         managed XmRadioBox radioBox4;
         managed XmLabel label115;
         managed XmLabel label88;
         managed XmBulletinBoard form14;
         managed XmPushButton close_manualcontrol_pushbutton;
         managed XmLabel label75;
         managed XmTextField modify_omega_textField;
         managed XmPushButton mc_omega_apply;
         managed XmRadioBox radioBox3;
         managed XmLabel label74;
         managed XmTextField modify_kappa_textField;
         managed XmPushButton mc_kappa_apply;
         managed XmRadioBox radioBox2;
         managed XmPushButton mc_offset_apply;
         managed XmPushButton mc_phi_apply;
         managed XmPushButton mc_distance_apply;
         managed XmLabel label23;
         managed XmBulletinBoard form;
         managed XmLabel mc_offset_label;
         managed XmMenuBar menuBar1;
         managed XmRadioBox mc_offset_radiobox;
         managed XmTextField modify_offset_textField;
         managed XmRadioBox radioBox1;
         managed XmTextField modify_phi_textField;
         managed XmLabel label24;
         managed XmRadioBox radioBox;
         managed XmTextField modify_distance_textField;
         managed XmLabel label25;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_manual_controlDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label25 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Distance:");
        XmNrecomputeSize = false;
        XmNx = 9;
        XmNy = 50;
        XmNwidth = 80;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object modify_distance_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNmarginWidth = 2;
        XmNcursorPosition = 0;
        XmNx = 93;
        XmNy = 51;
        XmNwidth = 58;
    };
    controls {
         unmanaged XmPopupMenu popupMenu11;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_modify_distance_textField);
        XmNactivateCallback = procedure modify_distance_activateCb();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu11 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton87;
         managed XmPushButton pushButton88;
         managed XmPushButton pushButton89;
         managed XmPushButton pushButton90;
         managed XmPushButton pushButton91;
         managed XmPushButton pushButton92;
         managed XmPushButton pushButton93;
         managed XmPushButton pushButton94;
         managed XmPushButton pushButton95;
         managed XmPushButton pushButton219;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton87 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 30;
        XmNlabelString = compound_string("30");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton88 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 40;
        XmNlabelString = compound_string("40");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton89 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 50;
        XmNlabelString = compound_string("50");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton90 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 60;
        XmNlabelString = compound_string("60");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton91 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 70;
        XmNlabelString = compound_string("70");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton92 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 80;
        XmNlabelString = compound_string("80");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton93 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 100;
        XmNlabelString = compound_string("100");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton94 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 120;
        XmNlabelString = compound_string("120");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton95 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 150;
        XmNlabelString = compound_string("150");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton219 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 200;
        XmNlabelString = compound_string("200");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_distance_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object radioBox : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 0;
        XmNisHomogeneous = true;
        XmNx = 221;
        XmNy = 50;
        XmNwidth = 138;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton drive_distance_pushButton;
         managed XmToggleButton define_distance_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object drive_distance_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Drive");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 65;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drive_distance_pushButton);
        XmNarmCallback = procedure dist_drive_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object define_distance_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNsensitive = false;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Define");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(65280, 12800, 12800);
        XmNwidth = 65;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_distance_pushButton);
        XmNarmCallback = procedure dist_define_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label24 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Phi:");
        XmNrecomputeSize = false;
        XmNx = 9;
        XmNy = 150;
        XmNwidth = 80;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object modify_phi_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNresizeWidth = false;
        XmNx = 93;
        XmNy = 150;
        XmNwidth = 58;
        XmNheight = 23;
    };
    controls {
         unmanaged XmPopupMenu popupMenu12;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_modify_phi_textField);
        XmNactivateCallback = procedure modify_phi_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu12 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton96;
         managed XmPushButton pushButton97;
         managed XmPushButton pushButton98;
         managed XmPushButton pushButton99;
         managed XmPushButton pushButton100;
         managed XmPushButton pushButton101;
         managed XmPushButton pushButton102;
         managed XmPushButton pushButton103;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton96 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton96);
        XmNactivateCallback = procedure mc_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton97 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton97);
        XmNactivateCallback = procedure mc_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton98 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton98);
        XmNactivateCallback = procedure mc_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton99 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 135;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("135");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton99);
        XmNactivateCallback = procedure mc_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton100 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton100);
        XmNactivateCallback = procedure mc_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton101 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 225;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("225");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton101);
        XmNactivateCallback = procedure mc_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton102 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 270;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("270");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton102);
        XmNactivateCallback = procedure mc_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton103 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 315;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("315");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton103);
        XmNactivateCallback = procedure mc_phi_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object radioBox1 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 0;
        XmNisHomogeneous = false;
        XmNx = 221;
        XmNy = 150;
        XmNwidth = 138;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton drive_phi_pushButton;
         managed XmToggleButton define_phi_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object drive_phi_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Drive");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 64;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drive_phi_pushButton);
        XmNarmCallback = procedure phi_drive_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object define_phi_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Define");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(65280, 12800, 12800);
        XmNwidth = 64;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_phi_pushButton);
        XmNarmCallback = procedure phi_define_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object modify_offset_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNbackground = color('White');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNmarginHeight = 4;
        XmNcursorPosition = 0;
        XmNx = 93;
        XmNy = 90;
        XmNwidth = 58;
        XmNheight = 23;
    };
    controls {
         unmanaged XmPopupMenu popupMenu13;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_modify_offset_textField);
        XmNactivateCallback = procedure modify_twotheta_activateCb();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu13 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton104;
         managed XmPushButton pushButton105;
         managed XmPushButton pushButton106;
         managed XmPushButton pushButton107;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton104 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton105 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 50;
        XmNlabelString = compound_string("50");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton106 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 100;
        XmNlabelString = compound_string("100");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton107 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 150;
        XmNlabelString = compound_string("150");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_offset_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object mc_offset_radiobox : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 0;
        XmNisHomogeneous = true;
        XmNx = 218;
        XmNy = 90;
        XmNwidth = 138;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton drive_twotheta_pushButton;
         managed XmToggleButton define_twotheta_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mc_offset_radiobox);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object drive_twotheta_pushButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Drive");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 65;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drive_twotheta_pushButton);
        XmNarmCallback = procedure offset_drive_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object define_twotheta_pushButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Define");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(65280, 12800, 12800);
        XmNwidth = 65;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_twotheta_pushButton);
        XmNarmCallback = procedure offset_define_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object menuBar1 : XmMenuBar widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton6;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 373;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton mc_shutter_button;
         managed XmCascadeButton cascadeButton6;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mc_shutter_button : XmCascadeButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNlabelString = compound_string("Shutter");
        XmNx = 2;
        XmNy = 2;
        XmNwidth = 66;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mc_shutter_button);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pulldownMenu : XmPulldownMenu widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNmarginHeight = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 52;
        XmNheight = 50;
    };
    controls {
         managed XmPushButton open_shutter_pushbutton1;
         managed XmPushButton close_shutter_pushbutton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object open_shutter_pushbutton1 : XmPushButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Peach Puff');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Open");
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        XmNactivateCallback = procedure open_shutter_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object close_shutter_pushbutton : XmPushButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Peach Puff');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Close");
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        XmNactivateCallback = procedure close_shutter_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object cascadeButton6 : XmCascadeButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNmarginHeight = 4;
        XmNlabelString = compound_string("Help");
        XmNx = 323;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu2;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pulldownMenu2 : XmPulldownMenu widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNmarginHeight = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton mc_help;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mc_help : XmPushButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Peach Puff');
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        XmNactivateCallback = procedure mc_help_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mc_offset_label : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNfontList = font_table(
		font('-*-*-medium-r-*-*-*-*-*-*-*-*-iso8859-1'),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')),
		font('-*-lucida-bold-r-*-*-*-120-75-75-p-*-*-*',character_set=character_set('LABEL_FONT')));
        XmNlabelString = compound_string(#character_set("SYMBOL_FONT")"2q") &
 compound_string(#character_set("L" &
 "ABEL_FONT")"-offset:");
        XmNrecomputeSize = false;
        XmNx = 9;
        XmNy = 90;
        XmNwidth = 80;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mc_offset_label);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object form : XmBulletinBoard widget {
    arguments {
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 62;
        XmNy = 470;
        XmNwidth = 140;
        XmNheight = 70;
    };
    controls {
         managed XmPushButton drive_phi180_pushButton;
         managed XmPushButton drive_phi90_pushButton;
    };
    callbacks {
    };
};

object drive_phi90_pushButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = PHI_90;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("90");
        XmNrecomputeSize = false;
        XmNx = 15;
        XmNy = 18;
        XmNwidth = 51;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drive_phi90_pushButton);
        XmNactivateCallback = procedure drive_phi_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object drive_phi180_pushButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = PHI_180;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("180");
        XmNrecomputeSize = false;
        XmNx = 72;
        XmNy = 18;
        XmNwidth = 51;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drive_phi180_pushButton);
        XmNactivateCallback = procedure drive_phi_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label23 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginLeft = 0;
        XmNlabelString = compound_string("Drive Phi By");
        XmNrecomputeSize = false;
        XmNx = 89;
        XmNy = 455;
        XmNwidth = 86;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mc_distance_apply : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = MC_DISTANCE;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Apply");
        XmNrecomputeSize = false;
        XmNx = 158;
        XmNy = 49;
        XmNwidth = 50;
        XmNheight = 27;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mc_distance_apply);
        XmNactivateCallback = procedure mc_apply_Callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object mc_phi_apply : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = MC_PHI;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Apply");
        XmNrecomputeSize = false;
        XmNx = 158;
        XmNy = 148;
        XmNwidth = 50;
        XmNheight = 27;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mc_phi_apply);
        XmNactivateCallback = procedure mc_apply_Callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object mc_offset_apply : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = MC_OFFSET;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Apply");
        XmNrecomputeSize = false;
        XmNx = 155;
        XmNy = 88;
        XmNwidth = 50;
        XmNheight = 27;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mc_offset_apply);
        XmNactivateCallback = procedure mc_apply_Callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object radioBox2 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 0;
        XmNisHomogeneous = false;
        XmNx = 220;
        XmNy = 190;
        XmNwidth = 138;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton drive_kappa_pushButton;
         managed XmToggleButton define_kappa_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object drive_kappa_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Drive");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 64;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drive_kappa_pushButton);
        XmNarmCallback = procedure kappa_drive_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object define_kappa_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Define");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(65280, 12800, 12800);
        XmNwidth = 64;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_kappa_pushButton);
        XmNarmCallback = procedure kappa_define_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mc_kappa_apply : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = MC_KAPPA;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Apply");
        XmNrecomputeSize = false;
        XmNx = 157;
        XmNy = 188;
        XmNwidth = 50;
        XmNheight = 27;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mc_kappa_apply);
        XmNactivateCallback = procedure mc_apply_Callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object modify_kappa_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNresizeWidth = false;
        XmNx = 93;
        XmNy = 190;
        XmNwidth = 58;
        XmNheight = 23;
    };
    controls {
         unmanaged XmPopupMenu popupMenu24;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_modify_kappa_textField);
        XmNactivateCallback = procedure modify_kappa_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu24 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton179;
         managed XmPushButton pushButton181;
         managed XmPushButton pushButton183;
         managed XmPushButton pushButton184;
         managed XmPushButton pushButton185;
         managed XmPushButton pushButton186;
         managed XmPushButton pushButton187;
         managed XmPushButton pushButton188;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton179 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton179);
        XmNactivateCallback = procedure mc_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton181 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton181);
        XmNactivateCallback = procedure mc_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton183 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton183);
        XmNactivateCallback = procedure mc_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton184 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 135;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("135");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton184);
        XmNactivateCallback = procedure mc_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton185 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton185);
        XmNactivateCallback = procedure mc_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton186 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 225;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("225");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton186);
        XmNactivateCallback = procedure mc_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton187 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 270;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("270");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton187);
        XmNactivateCallback = procedure mc_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton188 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 315;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("315");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton188);
        XmNactivateCallback = procedure mc_kappa_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object label74 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Kappa:");
        XmNrecomputeSize = false;
        XmNx = 9;
        XmNy = 190;
        XmNwidth = 80;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object radioBox3 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 0;
        XmNisHomogeneous = false;
        XmNx = 219;
        XmNy = 230;
        XmNwidth = 138;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton drive_omega_pushButton;
         managed XmToggleButton define_omega_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object drive_omega_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Drive");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 64;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drive_omega_pushButton);
        XmNarmCallback = procedure omega_drive_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object define_omega_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Define");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(65280, 12800, 12800);
        XmNwidth = 64;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_omega_pushButton);
        XmNarmCallback = procedure omega_define_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mc_omega_apply : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = MC_OMEGA;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Apply");
        XmNrecomputeSize = false;
        XmNx = 156;
        XmNy = 228;
        XmNwidth = 50;
        XmNheight = 27;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mc_omega_apply);
        XmNactivateCallback = procedure mc_apply_Callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object modify_omega_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNresizeWidth = false;
        XmNx = 93;
        XmNy = 230;
        XmNwidth = 58;
        XmNheight = 23;
    };
    controls {
         unmanaged XmPopupMenu popupMenu25;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_modify_omega_textField);
        XmNactivateCallback = procedure modify_omega_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu25 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 38;
    };
    controls {
         managed XmPushButton pushButton189;
         managed XmPushButton pushButton190;
         managed XmPushButton pushButton191;
         managed XmPushButton pushButton192;
         managed XmPushButton pushButton193;
         managed XmPushButton pushButton194;
         managed XmPushButton pushButton195;
         managed XmPushButton pushButton196;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton189 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton189);
        XmNactivateCallback = procedure mc_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton190 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 45;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("45");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton190);
        XmNactivateCallback = procedure mc_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton191 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 90;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("90");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton191);
        XmNactivateCallback = procedure mc_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton192 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 135;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("135");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton192);
        XmNactivateCallback = procedure mc_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton193 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 180;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("180");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton193);
        XmNactivateCallback = procedure mc_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton194 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 225;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("225");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton194);
        XmNactivateCallback = procedure mc_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton195 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 270;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("270");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton195);
        XmNactivateCallback = procedure mc_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton196 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 315;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("315");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton196);
        XmNactivateCallback = procedure mc_omega_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object label75 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Omega:");
        XmNrecomputeSize = false;
        XmNx = 9;
        XmNy = 230;
        XmNwidth = 80;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object close_manualcontrol_pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNrecomputeSize = false;
        XmNx = 302;
        XmNy = 503;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure close_mc_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object form14 : XmBulletinBoard widget {
    arguments {
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Black');
        XmNshadowType = XmSHADOW_ETCHED_IN;
        XmNmarginWidth = 5;
        XmNmarginHeight = 5;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 62;
        XmNy = 353;
        XmNwidth = 250;
        XmNheight = 90;
    };
    controls {
         managed XmPushButton gonio_home_pushbutton;
         managed XmRadioBox radioBox5;
    };
    callbacks {
    };
};

object radioBox5 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNresizeWidth = true;
        XmNresizeHeight = false;
        XmNorientation = XmVERTICAL;
        XmNentryAlignment = XmALIGNMENT_CENTER;
        XmNisHomogeneous = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 109;
        XmNheight = 70;
    };
    controls {
         managed XmToggleButton gonio_off_pushButton;
         managed XmToggleButton gonio_on_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object gonio_off_pushButton : XmToggleButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Papaya Whip');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = GONIO_MANUAL;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginWidth = 2;
        XmNlabelString = compound_string("Manual");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNset = true;
        XmNselectColor = rgb(65280, 12800, 12800);
        XmNwidth = 103;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_gonio_off_pushButton);
        XmNarmCallback = procedure gonio_manual_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object gonio_on_pushButton : XmToggleButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Papaya Whip');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = GONIO_COMPUTER;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelPixmap = xraybitmap_icon;
        XmNlabelString = compound_string("Computer");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 103;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_gonio_on_pushButton);
        XmNarmCallback = procedure gonio_manual_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object gonio_home_pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Zero Angles");
        XmNrecomputeSize = false;
        XmNx = 130;
        XmNy = 45;
        XmNwidth = 100;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_gonio_home_pushbutton);
        XmNactivateCallback = procedure gonio_home_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label88 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginLeft = 0;
        XmNlabelString = compound_string("Goniostat Control");
        XmNrecomputeSize = false;
        XmNx = 127;
        XmNy = 340;
        XmNwidth = 121;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label115 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Wavelength:");
        XmNrecomputeSize = false;
        XmNx = 4;
        XmNy = 290;
        XmNwidth = 85;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object radioBox4 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNorientation = XmHORIZONTAL;
        XmNspacing = 0;
        XmNisHomogeneous = false;
        XmNx = 219;
        XmNy = 290;
        XmNwidth = 138;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton drive_wavelength_pushButton;
         managed XmToggleButton define_wavelength_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object drive_wavelength_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Drive");
        XmNrecomputeSize = true;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 64;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_drive_wavelength_pushButton);
        XmNarmCallback = procedure wavelength_drive_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object define_wavelength_pushButton : XmToggleButton widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginWidth = 0;
        XmNlabelString = compound_string("Define");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNindicatorOn = true;
        XmNselectColor = rgb(65280, 12800, 12800);
        XmNwidth = 64;
        XmNheight = 17;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_wavelength_pushButton);
        XmNarmCallback = procedure wavelength_define_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mc_wavelength_apply : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Peach Puff');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNuserData = MC_WAVELENGTH;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Apply");
        XmNrecomputeSize = false;
        XmNx = 156;
        XmNy = 288;
        XmNwidth = 50;
        XmNheight = 27;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure mc_apply_Callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object modify_wavelength_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNresizeWidth = false;
        XmNx = 93;
        XmNy = 290;
        XmNwidth = 58;
        XmNheight = 23;
    };
    controls {
         unmanaged XmPopupMenu popupMenu26;
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_modify_wavelength_textField);
        XmNactivateCallback = procedure modify_wavelength_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object popupMenu26 : XmPopupMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNwhichButton = 3;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 57;
    };
    controls {
         managed XmPushButton pushButton15;
         managed XmPushButton pushButton21;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton15 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 10000;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("1.0");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_wavelength_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton21 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = 15418;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("1.5418");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mc_wavelength_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

!(BX)object xmDialogShell5 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Define Distance?";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 490;
!(BX)        XmNheight = 207;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog define_distance_Dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object define_distance_Dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 490;
        XmNheight = 207;
    };
    controls {
         managed XmLabel label19;
         managed XmPushButton pushButton2;
         managed XmPushButton pushButton3;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_distance_Dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton3 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = EXIT_YES;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNx = 341;
        XmNy = 158;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure define_distance_activateCb();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton2 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = EXIT_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 421;
        XmNy = 158;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton2);
        XmNactivateCallback = procedure cancel_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label19 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("Defining the distance will not m" &
 "ove the distance!", separate=true) &
 compound_string("", separate=true) &
 compound_string("It will redefine the current distance. This is ", separate=true) &
 compound_string(#character_set("BOLD_FONT")"VERY DANGEROUS") &
 compound_string(" and is normally not done.", separate=true) &
 compound_string("", separate=true) &
 compound_string("Are you SURE you want to do this?");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 465;
        XmNheight = 133;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell6 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Stop?";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 278;
!(BX)        XmNheight = 157;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog stopDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object stopDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 278;
        XmNheight = 157;
    };
    controls {
         managed XmPushButton pushButton4;
         managed XmPushButton pushButton5;
         managed XmLabel label31;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_stopDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label31 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Really Stop Data Collection", separate=true) &
 compound_string("after current Image?");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 256;
        XmNheight = 68;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton5 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_YES;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNx = 131;
        XmNy = 100;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton5);
        XmNactivateCallback = procedure stop_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton4 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 211;
        XmNy = 100;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton4);
        XmNactivateCallback = procedure stop_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell8 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Define Phi?";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 351;
!(BX)        XmNheight = 169;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog define_phi_Dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object define_phi_Dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 351;
        XmNheight = 169;
    };
    controls {
         managed XmLabel label8;
         managed XmPushButton pushButton10;
         managed XmPushButton pushButton11;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_phi_Dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton11 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = YES;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNx = 204;
        XmNy = 120;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton11);
        XmNactivateCallback = procedure define_phi_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton10 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 284;
        XmNy = 120;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure define_phi_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label8 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("Defining phi will not move phi.", separate=true) &
 compound_string("It will redefine the current phi.", separate=true) &
 compound_string("", separate=true) &
 compound_string("Are you SURE you want to do this?");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 328;
        XmNheight = 97;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell9 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Define Offset?";
!(BX)        XmNx = 8;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 469;
!(BX)        XmNheight = 212;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog define_offset_Dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object define_offset_Dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_FULL_APPLICATION_MODAL;
        XmNx = 8;
        XmNy = 32;
        XmNwidth = 469;
        XmNheight = 212;
    };
    controls {
         managed XmLabel label13;
         managed XmPushButton pushButton12;
         managed XmPushButton pushButton13;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_define_offset_Dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton13 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = YES;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNx = 320;
        XmNy = 161;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure define_offset_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object pushButton12 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNx = 400;
        XmNy = 161;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_pushButton12);
        XmNactivateCallback = procedure define_offset_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label13 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("Defining the offset will not mov" &
 "e the offset!", separate=true) &
 compound_string("", separate=true) &
 compound_string("It will redefine the current offset. This is ", separate=true) &
 compound_string(#character_set("BOLD_FONT")"VERY DANGEROUS") &
 compound_string(" and is normally not done.", separate=true) &
 compound_string("", separate=true) &
 compound_string("Are you SURE you want to do this?");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 444;
        XmNheight = 135;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell15 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Restart";
!(BX)        XmNx = 256;
!(BX)        XmNy = 128;
!(BX)        XmNwidth = 314;
!(BX)        XmNheight = 115;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog restartRun_dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object restartRun_dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 256;
        XmNy = 128;
        XmNwidth = 314;
        XmNheight = 115;
    };
    controls {
         managed XmPushButton strategy_close_Pushbutton;
         managed XmPushButton strategy_restart_Pushbutton;
         managed XmTextField restart_frame_textfield;
         managed XmLabel label38;
         managed XmTextField restart_run_textfield;
         managed XmLabel label37;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_restartRun_dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label37 : XmLabel widget {
    arguments {
        arguments statustextField;
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Restart Run:");
        XmNrecomputeSize = false;
        XmNx = 9;
        XmNy = 20;
        XmNwidth = 90;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks statustextFieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers statustextFieldHandlers;
!(BX)    };
};

object restart_run_textfield : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 107;
        XmNy = 20;
        XmNwidth = 30;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_restart_run_textfield);
        XmNactivateCallback = procedure newline_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label38 : XmLabel widget {
    arguments {
        arguments statuslabelnew;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("at Frame Number:");
        XmNrecomputeSize = false;
        XmNx = 140;
        XmNy = 20;
        XmNwidth = 127;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks statuslabelnewReasons;
    };
!(BX)    handlers {
!(BX)        handlers statuslabelnewHandlers;
!(BX)    };
};

object restart_frame_textfield : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 275;
        XmNy = 20;
        XmNwidth = 30;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_restart_frame_textfield);
        XmNactivateCallback = procedure newline_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object strategy_restart_Pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Restart");
        XmNx = 167;
        XmNy = 60;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_restart_Pushbutton);
        XmNactivateCallback = procedure restart_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object strategy_close_Pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNx = 247;
        XmNy = 60;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_restart_Pushbutton1);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell16 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX - Version";
!(BX)        XmNx = 320;
!(BX)        XmNy = 192;
!(BX)        XmNwidth = 336;
!(BX)        XmNheight = 178;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog versionDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object versionDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 320;
        XmNy = 192;
        XmNwidth = 336;
        XmNheight = 178;
    };
    controls {
         managed XmLabel label39;
         managed XmPushButton version_close_pushButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_versionDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object version_close_pushButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNx = 269;
        XmNy = 134;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure versionclose_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label39 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNshadowThickness = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("", separate=true) &
 compound_string(#character_set("BOLD_FONT")"ADX") &
 compound_string("", separate=true) &
 compound_string("", separate=true) &
 compound_string("Version 2.4 (4/6/99)", separate=true) &
 compound_string("Copyright (C)  1994-1999", separate=true) &
 compound_string(" Area Detector Systems Corp. ", separate=true) &
 compound_string("", separate=true) &
 compound_string("619-486-0444");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 313;
        XmNheight = 115;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell30 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Optimize";
!(BX)        XmNx = 423;
!(BX)        XmNy = 32;
!(BX)        XmNwidth = 520;
!(BX)        XmNheight = 785;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog optimize_dialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object optimize_dialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_NONE;
        XmNx = 423;
        XmNy = 32;
        XmNwidth = 520;
        XmNheight = 785;
    };
    controls {
         managed XmPushButton optimize_apply_Pushbutton1;
         managed XmLabel label48;
         managed XmScrolledWindow scrolledWindow8;
         managed XmTextField optimize_maxrunsize_textField;
         managed XmLabel label60;
         managed XmRadioBox optimize_radiobox1;
         managed XmLabel label61;
         managed XmTextField optimize_resmax_textField;
         managed XmLabel label62;
         managed XmPushButton optimize_apply_Pushbutton;
         managed XmLabel label65;
         managed XmLabel label64;
         managed XmTextField optimize_res2_textField;
         managed XmTextField optimize_res1_textField;
         managed XmList optimize_param_file_list;
         managed XmMenuBar menuBar5;
         managed XmTextField optimize_param_file_textField;
         managed XmLabel label63;
         managed XmLabel label78;
         managed XmPushButton optimize_close_Pushbutton;
         managed XmLabel label79;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_dialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label79 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Previous Parameter Files (if any" &
 "):");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 40;
        XmNwidth = 231;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object optimize_close_Pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNx = 429;
        XmNy = 720;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure optimize_close_callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label78 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Resolution Range (for calculatio" &
 "n):");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 338;
        XmNwidth = 242;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object label63 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Current Parameter File:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 230;
        XmNwidth = 160;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object optimize_param_file_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 10;
        XmNy = 260;
        XmNwidth = 500;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_param_file_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object menuBar5 : XmMenuBar widget {
    arguments {
        arguments newstatustextfield;
        XmNbackground = color('Papaya Whip');
        XmNshadowThickness = 2;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton5;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 520;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton cascadeButton5;
    };
    callbacks {
        callbacks newstatustextfieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers newstatustextfieldHandlers;
!(BX)    };
};

object cascadeButton5 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNbackground = color('Papaya Whip');
        XmNmarginHeight = 0;
        XmNlabelString = compound_string("Help");
        XmNx = 470;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu9;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object pulldownMenu9 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton pushButton158;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object pushButton158 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure optimize_help_Callback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object optimize_param_file_list : XmList widget {
    arguments {
        XmNbackground = color('White');
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlistSizePolicy = XmCONSTANT;
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 500;
        XmNheight = 155;
    };
    controls {
         unmanaged XmPopupMenu popupMenu20;
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_param_file_list);
        XmNsingleSelectionCallback = procedure optimize_list_ss_cb();
        XmNmultipleSelectionCallback = procedure optimize_list_ms_cb();
        XmNbrowseSelectionCallback = procedure optimize_list_bs_cb();
    };
};

object popupMenu20 : XmPopupMenu widget {
    arguments {
        arguments MenuButtonStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 125;
        XmNheight = 54;
    };
    controls {
         managed XmPushButton pushButton159;
         managed XmPushButton pushButton160;
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton159 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Delete Selection");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure optimize_delete_list_cb();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object pushButton160 : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Add...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure optimize_add_list_cb();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object optimize_res1_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 258;
        XmNy = 338;
        XmNwidth = 46;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_res1_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object optimize_res2_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 345;
        XmNy = 338;
        XmNwidth = 46;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_res2_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label64 : XmLabel widget {
    arguments {
        arguments newstatustextfield;
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("to");
        XmNrecomputeSize = false;
        XmNx = 311;
        XmNy = 338;
        XmNwidth = 20;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks newstatustextfieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers newstatustextfieldHandlers;
!(BX)    };
};

object label65 : XmLabel widget {
    arguments {
        arguments newstatustextfield;
        XmNalignment = XmALIGNMENT_END;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("(Angstroms)");
        XmNrecomputeSize = false;
        XmNx = 309;
        XmNy = 303;
        XmNwidth = 85;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks newstatustextfieldReasons;
    };
!(BX)    handlers {
!(BX)        handlers newstatustextfieldHandlers;
!(BX)    };
};

object optimize_apply_Pushbutton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNuserData = OPTIMIZE_INDEX;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Index Working Image");
        XmNx = 33;
        XmNy = 720;
        XmNwidth = 171;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure optimize_apply_callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object label62 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Maximum Resolution:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 303;
        XmNwidth = 242;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object optimize_resmax_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 258;
        XmNy = 303;
        XmNwidth = 46;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_resmax_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label61 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Merge Bijvoets:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 408;
        XmNwidth = 242;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object optimize_radiobox1 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 3;
        XmNmarginHeight = 0;
        XmNorientation = XmHORIZONTAL;
        XmNisAligned = false;
        XmNadjustMargin = true;
        XmNisHomogeneous = false;
        XmNx = 258;
        XmNy = 408;
        XmNwidth = 105;
        XmNheight = 23;
    };
    controls {
         managed XmToggleButton optimize_merge_yes;
         managed XmToggleButton optimize_merge_no;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object optimize_merge_yes : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 22;
        XmNmarginTop = 5;
        XmNmarginBottom = 7;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNindicatorSize = 18;
        XmNindicatorOn = true;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 47;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_merge_yes);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object optimize_merge_no : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNborderWidth = 0;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 22;
        XmNmarginTop = 5;
        XmNmarginBottom = 7;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNindicatorSize = 18;
        XmNindicatorOn = true;
        XmNselectColor = rgb(29184, 40704, 65280);
        XmNwidth = 47;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_merge_no);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label60 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Max Run Size (degrees):");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 373;
        XmNwidth = 242;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object optimize_maxrunsize_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNx = 258;
        XmNy = 373;
        XmNwidth = 46;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_maxrunsize_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyAlphaNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object scrolledWindow8 : XmScrolledWindow widget {
    arguments {
        XmNbackground = color('Papaya Whip');
        XmNforeground = color('Peach Puff');
        XmNtopShadowColor = color('Grey65');
        XmNbottomShadowColor = color('Black');
        XmNscrollingPolicy = XmAPPLICATION_DEFINED;
        XmNx = 33;
        XmNy = 473;
        XmNwidth = 457;
        XmNheight = 232;
    };
    controls {
         managed XmText optimimal_runs_text;
    };
    callbacks {
    };
};

object optimimal_runs_text : XmText widget {
    arguments {
        XmNbackground = color('White');
        XmNeditMode = XmMULTI_LINE_EDIT;
        XmNfontList = font_table(
		font('-*-lucidatypewriter-medium-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNcolumns = 60;
        XmNrows = 15;
    };
    controls {
    };
    callbacks {
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimimal_runs_text);
    };
};

object label48 : XmLabel widget {
    arguments {
        arguments nwstatuslabel;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Optimal Runs:");
        XmNrecomputeSize = false;
        XmNx = 42;
        XmNy = 441;
        XmNwidth = 160;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks nwstatuslabelReasons;
    };
!(BX)    handlers {
!(BX)        handlers nwstatuslabelHandlers;
!(BX)    };
};

object optimize_apply_Pushbutton1 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNuserData = OPTIMIZE_CALCULATE;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Calculate Best Strategy");
        XmNx = 235;
        XmNy = 720;
        XmNwidth = 169;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_apply_Pushbutton1);
        XmNactivateCallback = procedure optimize_apply_callback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell19 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 782;
!(BX)        XmNy = 409;
!(BX)        XmNwidth = 486;
!(BX)        XmNheight = 466;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog adx_helpDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object adx_helpDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNmarginWidth = 10;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNdialogTitle = compound_string("Adx - Help");
        XmNx = 782;
        XmNy = 409;
        XmNwidth = 486;
        XmNheight = 466;
    };
    controls {
         unmanaged XmScrolledWindow config_site_helpWindow;
         unmanaged XmScrolledWindow mad_helpWindow;
         unmanaged XmScrolledWindow options_helpWindow;
         unmanaged XmScrolledWindow project_helpWindow;
         unmanaged XmScrolledWindow status_helpWindow;
         unmanaged XmScrolledWindow snapshot_helpWindow;
         unmanaged XmScrolledWindow strategy_helpWindow;
         unmanaged XmScrolledWindow optimize_helpWindow;
         unmanaged XmScrolledWindow manualcontrol_helpWindow;
         managed XmPushButton pushButton23;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_adx_helpDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton23 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNx = 385;
        XmNy = 419;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure adx_closehelpCB();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object manualcontrol_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 461;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label20;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_manualcontrol_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label20 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"M" &
 "anual Control") &
 compound_string(#character_set("H" &
 "ELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"At the top of the Manual Control popup window is a  ") &
 compound_string(#character_set("BOLD_HELP_FONT")"menu-bar") &
 compound_string(#character_set("HELP_FONT")".", separate=true) &
 compound_string(#character_set("HELP_FONT")"Pressing the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"LEFT") &
 compound_string(#character_set("HELP_FONT")" mouse button on one of the  labels in the", separate=true) &
 compound_string(#character_set("HELP_FONT")"menu-bar will bring down a ") &
 compound_string(#character_set("BOLD_HELP_FONT")"pull-down menu ") &
 compound_string(#character_set("HELP_FONT")"for that label.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Shutter:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This pull-down menu has two choices - ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Open") &
 compound_string(#character_set("HELP_FONT")" and ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Close") &
 compound_string(#character_set("HELP_FONT")".", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Selecting open will open the X-ray shutter. Similarly selecting"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    close will close the shutter.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Help:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Help will display this popup window.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"Distance, Offset, Phi, Kappa and Omega may each be ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Driven") &
 compound_string(#character_set("HELP_FONT")" or", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Defined") &
 compound_string(#character_set("HELP_FONT")" to a value. The distinction is ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Very Important") &
 compound_string(#character_set("HELP_FONT")".", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"When the scanner is ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Driven") &
 compound_string(#character_set("HELP_FONT")" then it is physically moved to the", separate=true) &
 compound_string(#character_set("HELP_FONT")"specified value. For example if the current distance is 120.0 and"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"the scanner is Driven to 150.0, the scanner will physically move"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"to a distance of 150.0.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"When the scanner is ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Defined,") &
 compound_string(#character_set("HELP_FONT")" then the current parameter is", separate=true) &
 compound_string(#character_set("HELP_FONT")"redefined to have the specified value. The scanner does not"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"move. For example if the current distance is 120.0 and the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"scanner is Defined to have a distance of 150.0, then the current"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"distance will be defined as 150.0. ") &
 compound_string("The scanner ") &
 compound_string(#character_set("BOLD_HELP_FONT")"will not move") &
 compound_string(#character_set("HELP_FONT")".", separate=true) &
 compound_string(#character_set("HELP_FONT")"If now the scanner is Driven to a distance of  150.0, it will not"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"move since it thinks it is already at 150.0.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"Defining Distance and Offset can be ") &
 compound_string(#character_set("BOLD_HELP_FONT")"dangerous.") &
 compound_string(#character_set("HELP_FONT")" For example if", separate=true) &
 compound_string(#character_set("HELP_FONT")"the currrent  Distance is 100.0 and it is now Defined to be 200.0,"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"the scanner will think it is at a distance of 200.0 where as it is "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"really at 100.0. If the scanner is now Driven to 100.0 the scanner "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"will crash into the beam stop since it will effectively be trying"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"to move to a distance of 0.0 even though it thinks it is moving"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"to 100.0. Be Careful.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"Depending upon the hardware configuration not all these settings"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"may be available. For example if your scanner has no kappa or"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"omega, then these values can not be driven. However they may"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"be ") &
 compound_string(#character_set("BOLD_HELP_FONT")"defined") &
 compound_string(#character_set("HELP_FONT")" to a certain value. This value will then be written to "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"the image header.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Distance:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Drive (or define)  the distance.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("SYMBOL_FONT")"2q") &
 compound_string(#character_set("BOLD_HELP_FONT")"-Offset") &
 compound_string(#character_set("HELP_FONT")":", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Drive (or define) the offset (lift). This option is"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    not available on all scanners.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Phi:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Drive (or define) the phi angle.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Kappa:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Omage:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Drive (or define) kappa or omega. This option is not"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    available on all scanners.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"To cause any of the above actions to take effect either a ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Carriage ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Return") &
 compound_string(#character_set("HELP_FONT")" must be typed in the respective text field or the  ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Apply") &
 compound_string(#character_set("HELP_FONT")" ", separate=true) &
 compound_string(#character_set("HELP_FONT")"button must be pressed.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Goniostat Control:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    When this is set to ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Manual") &
 compound_string(#character_set("HELP_FONT")", the goniostat may be moved by", separate=true) &
 compound_string(#character_set("HELP_FONT")"    hand. When set to ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Compute") &
 compound_string(#character_set("HELP_FONT")"r, the computer controls the goniostat.", separate=true) &
 compound_string(#character_set("HELP_FONT")"   ") &
 compound_string(#character_set("BOLD_HELP_FONT")" Zero Angles") &
 compound_string(#character_set("HELP_FONT")" will set all goniostat angles to 0.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Close:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This will close this help window. It has no effect on any scanner"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    operations which may be in progress.");
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 1080;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object optimize_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 0;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNscrollBarPlacement = XmBOTTOM_RIGHT;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 4;
        XmNwidth = 461;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label112;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optimize_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label112 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"O" &
 "ptimize") &
 compound_string(#character_set("H" &
 "ELP_FONT")"  will try to maximize data completeness while ", separate=true) &
 compound_string(#character_set("HELP_FONT")"minimizing the number of frames collected. The ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Project") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"window should be completed before optimize is used.", separate=true) &
 compound_string("", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Previous Parameter Files:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    If previous data has been collected then that should be"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    specified here. This data will be used to determine which "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    region(s) of data are missing. Pressing the right mouse "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    button in this window will will bring up a popup menu. "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Selecting  \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"Delete Selection") &
 compound_string(#character_set("HELP_FONT")"\" will delete any selected item. ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Selecting \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"Add..") &
 compound_string(#character_set("HELP_FONT")".\" will bring up a dialog window which can ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    be used to add additional parameter files.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Current Parameter File:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This is the parameter file for the crystal for which data is now"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    going to be collected.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Maximum Resolution:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The maximum resolution to which data will be collected."
 , separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Resolution Range: ", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This is the resolution range over which data completeness"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    will be optimized.", separate=true) &
 compound_string(#character_set("HELP_FONT")"               ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Maximum Run Size:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This is the maximum number of degrees of data which will"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    be calculated to optimize completeness.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Merge Bijvoets") &
 compound_string(#character_set("HELP_FONT")":", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Should Bijvoets be merged?") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"The ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Optimal Runs") &
 compound_string(#character_set("HELP_FONT")" text window will show the results of the", separate=true) &
 compound_string(#character_set("HELP_FONT")"optimal  runs calculation.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Index Working Image:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This will start a DENZO process to index the current image."
 , separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Calculate Best Strategy:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"    ") &
 compound_string(#character_set("HELP_FONT")"This will cause the program to calculate an optimal data"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    collection strategy. This calculation will take a few minutes."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Results will be displayed in the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Optimal Runs") &
 compound_string(#character_set("HELP_FONT")" text window.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Close:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"    ") &
 compound_string(#character_set("HELP_FONT")"Pressing this button will close the Optimize popup window."
 , separate=true);
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 760;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object strategy_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 4;
        XmNwidth = 461;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label66;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label66 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 2;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"R" &
 "un(s)") &
 compound_string(#character_set("H" &
 "ELP_FONT")"  is used to collect one or more \"Runs\" of data. It can", separate=true) &
 compound_string(#character_set("HELP_FONT")"also be used to expose a single image, however this may be"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"done more conveniently with ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Snapshot.") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string("", separate=true) &
 compound_string("Directo") &
 compound_string(#character_set("BOLD_HELP_FONT")"ry:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The directory where images will be written.", separate=true) &
 compound_string(#character_set("HELP_FONT")"    ") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Image Prefix: ", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The prefix of all the images which will be written. "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Compression:") &
 compound_string(#character_set("HELP_FONT")" ", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Images may be directly stored in a compressed format to"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    minimize disk usage. If ") &
 compound_string(#character_set("BOLD_HELP_FONT")"None") &
 compound_string(#character_set("HELP_FONT")" is selected then no compression", separate=true) &
 compound_string(#character_set("HELP_FONT")"    is done. Selecting ") &
 compound_string(#character_set("BOLD_HELP_FONT")".Z") &
 compound_string(#character_set("HELP_FONT")" will implement the standard Unix compress.", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This should reduce data size by about a factor of 2."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"   ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Mode:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Images may be collected in either ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Time") &
 compound_string(#character_set("HELP_FONT")" or ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Dose") &
 compound_string(#character_set("HELP_FONT")" mode.       ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    In ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Time") &
 compound_string(#character_set("HELP_FONT")" mode images are exposed to the X-Ray beam for", separate=true) &
 compound_string(#character_set("HELP_FONT")"    a fixed number of seconds. In ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Dose") &
 compound_string(#character_set("HELP_FONT")" mode images are ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    exposed  to the beam for a fixed X-Ray dose.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Anomalous:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Setting this to true will cause anomalous data to be collected."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    After every ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Wedge") &
 compound_string(#character_set("HELP_FONT")" frames, the corresponding anomalous data", separate=true) &
 compound_string(#character_set("HELP_FONT")"    will be collected. If a Run in the Runs Text window is:"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"            ", separate=true) &
 compound_string(#character_set("HELP_FONT")"                        Frames", separate=true) &
 compound_string(#character_set("HELP_FONT")"          Run#   Start Total    . . .   Phi  . . .  Step"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"             1        1      100          240          1.0"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    and Wedge is set to 5 frames, then the data collection will be:"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"                        Frames", separate=true) &
 compound_string(#character_set("HELP_FONT")"          Run#   Start  Total   . . .   Phi  . . .", separate=true) &
 compound_string(#character_set("HELP_FONT")"             1        1         5            240", separate=true) &
 compound_string(#character_set("HELP_FONT")"         101        1         5              60", separate=true) &
 compound_string(#character_set("HELP_FONT")"             1        6         5            245", separate=true) &
 compound_string(#character_set("HELP_FONT")"         101        6         5              65", separate=true) &
 compound_string(#character_set("HELP_FONT")"              .", separate=true) &
 compound_string(#character_set("HELP_FONT")"              .", separate=true) &
 compound_string(#character_set("HELP_FONT")"              . ", separate=true) &
 compound_string(#character_set("HELP_FONT")"             1      96         5            335", separate=true) &
 compound_string(#character_set("HELP_FONT")"         101      96         5            155", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The data can then be processed as two runs. The second run"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    number will be the first run number + 100.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Comment:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This line (along with other information about this set of runs)"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    will be written to the file \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"LOGFILE") &
 compound_string(#character_set("HELP_FONT")"\", in the image directory.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Run(s) Text Window:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"   ") &
 compound_string(#character_set("HELP_FONT")" This window may be edited to set up one or more runs. There"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    are (12) fields which are described below.", separate=true) &
 compound_string(#character_set("HELP_FONT")"  ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Run#:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The number of this run. This value is encoded in the image"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    file names, so file names will be unique across runs.  The"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    format of image file names is ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Prefix") &
 compound_string(#character_set("HELP_FONT")"_") &
 compound_string(#character_set("BOLD_HELP_FONT")"Run#") &
 compound_string(#character_set("HELP_FONT")"_") &
 compound_string(#character_set("BOLD_HELP_FONT")"Frame#") &
 compound_string(#character_set("HELP_FONT")".image. ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    For example if the image prefix is lyso12 then for run"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    number ") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")" images will be named as:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"                  lyso12_") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")"_001.image", separate=true) &
 compound_string(#character_set("HELP_FONT")"                  lyso12_") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")"_002.image", separate=true) &
 compound_string(#character_set("HELP_FONT")"                  .", separate=true) &
 compound_string(#character_set("HELP_FONT")"                  .", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Similarly for run number ") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")" images will be named:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"                  lyso12_") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")"_001.image", separate=true) &
 compound_string(#character_set("HELP_FONT")"                  lyso12_") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")"_002.image", separate=true) &
 compound_string(#character_set("HELP_FONT")"                  .", separate=true) &
 compound_string(#character_set("HELP_FONT")"                  .", separate=true) &
 compound_string(#character_set("HELP_FONT")"  ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Starting Frame:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The frame number of the first image. This is normally 001. "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Total Number of Frames:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The total number of individual frames to collect.", separate=true) &
 compound_string(#character_set("HELP_FONT")"             ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Distance:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The crystal to ccd distance to be used for this run.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("SYMBOL_FONT")"2q") &
 compound_string(#character_set("BOLD_HELP_FONT")"-offset:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The vertical offset (or lift) to be used for this run.  Not all"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    scanners are  equipped with this hardware option.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Phi:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The value of phi where this run will begin.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Kappa:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The value of kappa where this run will begin", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Omega:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The value of omega where this run will begin.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Axis:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The axis through which to collect data (phi or omega)") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Width:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The number of degrees that the \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"Axis") &
 compound_string(#character_set("HELP_FONT")"\" angle  will rotate over", separate=true) &
 compound_string(#character_set("HELP_FONT")"    the course of each exposure.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Time (Dose):") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The number of seconds (X-Ray doses) that the crystal will be"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    exposed to the X-Ray beam.  Whether this field is Time or"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Dose is dependent upon the setting of the Mode toggle button."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"De-Zinger:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"   ") &
 compound_string(#character_set("HELP_FONT")" During the course of an exposure radioactive particles from"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    the glass taper may excite the detector and leave small but"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    intense spots (zingers). To de-zinger an image two exposures"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    are taken and these two images are compared to determine "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    which spots are zingers. A final image is written with the "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    zingers removed. The exposure time (or dose) for the first of"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    a pair of images is specified in the Run(s) window. By default"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    the second image has the same exposure time. The second"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    image may have a shorter exposure time. This has the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    advantage of increasing the dynamic range of the detector. For"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    example if the exposure time is 60 seconds, and De-Zinger is "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    set to 1/4 then the second exposure will be for 15 seconds."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Any overflowed pixels in the first image will be replaced"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    with scaled pixels from the second image. Some possible"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    values for De-Zinger:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"                 N      (no de-zingering)", separate=true) &
 compound_string(#character_set("HELP_FONT")"                 Y      (de-zinger, exposure time ratio\'s are 1 : 1)"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"               1/16   (de-zinger, exposure time ratio\'s are 1 : 1/16)"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    If the exposure time for the shorter image becomes too small,"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    there will be very few counts in this image and it becomes"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    more difficult to compare images to identify zingers."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Beam Center:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This is used to perform an obliqueness correction of the angle"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    of the x-ray beam on the phosphor. It is also written to the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    header of each image.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Collect:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Pressing this button will cause the data collection to begin."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    The status of the data collection may be viewed in the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Status") &
 compound_string(#character_set("HELP_FONT")" ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    window. Data collection may be stopped by pressing the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"LEFT") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    mouse button in the main Adx window on the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Collect") &
 compound_string(#character_set("HELP_FONT")" button.", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This will bring down a pull-down menu. Data collection may be"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    stopped Immediately by selecting \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"Stop Immediately") &
 compound_string(#character_set("HELP_FONT")"\". To stop", separate=true) &
 compound_string(#character_set("HELP_FONT")"    after the currently exposing image is written select \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"Stop After") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Current Image") &
 compound_string(#character_set("HELP_FONT")"\".") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Close:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"    ") &
 compound_string(#character_set("HELP_FONT")"Pressing this button will close the Strategy popup window."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    It will not stop any data collection which is in progress") &
 compound_string(#character_set("BOLD_HELP_FONT")".", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Editing in the Run(s) Text Window", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"This text window is divided into individual \"fields\". To move"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"from one field to the next hit the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"<space>") &
 compound_string(#character_set("HELP_FONT")" or ") &
 compound_string(#character_set("BOLD_HELP_FONT")"<tab>") &
 compound_string(#character_set("HELP_FONT")" key.", separate=true) &
 compound_string(#character_set("HELP_FONT")"If a value in a field is blank, then as you hit <space> or <tab>"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"to move to the next field, this field will be filled in with a"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"default value. For the 1\'st run the default values are based"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"upon the current physical state of the detector. For example"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"the distance will default to the current distance. For other"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"than the 1\'st run the default value will be the value from the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"field immediately above.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"One can select a new insertion point by clicking once with the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"left mouse button. Typing a ") &
 compound_string(#character_set("BOLD_HELP_FONT")"cariage return") &
 compound_string(#character_set("HELP_FONT")" will  move to the", separate=true) &
 compound_string(#character_set("HELP_FONT")"next line. If the current line is the last line then it will create "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"another line.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"To delete the current line type \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"dd") &
 compound_string(#character_set("HELP_FONT")"\" or \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"D") &
 compound_string(#character_set("HELP_FONT")"\" (don\'t type the quotes). ", separate=true) &
 compound_string(#character_set("HELP_FONT")"To open a line below the current line type \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"o") &
 compound_string(#character_set("HELP_FONT")"\". Similarly to open", separate=true) &
 compound_string(#character_set("HELP_FONT")"a line above the current line type \"") &
 compound_string(#character_set("BOLD_HELP_FONT")"O") &
 compound_string(#character_set("HELP_FONT")"\".", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"To delete ALL the runs quadruple click with the mouse (to"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"select all the text) and then hit the <delete> key. Similarly"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"double and triple click may be used to delete fields or lines,"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"respectively.");
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 2670;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object snapshot_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 0;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNscrollBarPlacement = XmBOTTOM_RIGHT;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 4;
        XmNwidth = 461;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label56;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_snapshot_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label56 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"S" &
 "napshot") &
 compound_string(#character_set("H" &
 "ELP_FONT")"  is used to take a single image. To collect multiple", separate=true) &
 compound_string(#character_set("HELP_FONT")"images (or Runs) use the  ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Run(s)") &
 compound_string(#character_set("HELP_FONT")" popup-window.", separate=true) &
 compound_string("", separate=true) &
 compound_string("", separate=true) &
 compound_string("Directo") &
 compound_string(#character_set("BOLD_HELP_FONT")"ry:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The directory where the image will be written.", separate=true) &
 compound_string(#character_set("HELP_FONT")"   ") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Image Prefix: ", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The prefix of the image which will be written. For example"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    if the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Directory  ") &
 compound_string(#character_set("HELP_FONT")"is") &
 compound_string(#character_set("BOLD_HELP_FONT")" /tmp") &
 compound_string(#character_set("HELP_FONT")" and the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Prefix  ") &
 compound_string(#character_set("HELP_FONT")"is ") &
 compound_string(#character_set("BOLD_HELP_FONT")"test_001") &
 compound_string(#character_set("HELP_FONT")", then", separate=true) &
 compound_string(#character_set("HELP_FONT")"    an image called ") &
 compound_string(#character_set("BOLD_HELP_FONT")"/tmp/test_001.image ") &
 compound_string(#character_set("HELP_FONT")"will be created.", separate=true) &
 compound_string(#character_set("HELP_FONT")"               ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Distance:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The crystal to ccd distance to be used for the snapshot.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("SYMBOL_FONT")"2q") &
 compound_string(#character_set("BOLD_HELP_FONT")"-offset:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The vertical offset (or lift) to be used for the snapshot. "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Not all detectors are  equipped with this option.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Starting Omega/Phi:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The value of omega (or phi) where the exposure will begin."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    This may be set to Omega or Phi with the ") &
 compound_string("Axis") &
 compound_string(#character_set("HELP_FONT")" toggle button.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("SYMBOL_FONT")"D") &
 compound_string(#character_set("BOLD_HELP_FONT")"-Omega/Phi:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The number of degrees that omega will rotate over the course"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    of the exposure. For example if the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Starting Omega") &
 compound_string(#character_set("HELP_FONT")" is ") &
 compound_string(#character_set("BOLD_HELP_FONT")"90.0") &
 compound_string(#character_set("HELP_FONT")" and ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    ") &
 compound_string(#character_set("SYMBOL_FONT")"D") &
 compound_string(#character_set("BOLD_HELP_FONT")"-Omega") &
 compound_string(#character_set("HELP_FONT")" is ") &
 compound_string(#character_set("BOLD_HELP_FONT")"1.0") &
 compound_string(#character_set("HELP_FONT")" then at the start of the exposure omega will be", separate=true) &
 compound_string(#character_set("HELP_FONT")"    90.0 and at the end of the exposure omega will be 91.0.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Exposure Time:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The number of seconds that the crystal will be exposed to the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    X-Ray beam.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Axis:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The axis about which to perform an oscillation.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"ADC:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The speed and accuracy of the ccd readout.  ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Slow") &
 compound_string(#character_set("HELP_FONT")" will", separate=true) &
 compound_string(#character_set("HELP_FONT")"    be more accurate, but it is slower.", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Binning:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Every 2x2 array of pixels may be averaged (binned)"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    to form 1 pixel. There will be fewer total pixels saved"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    in the image file.", separate=true) &
 compound_string(#character_set("HELP_FONT")" ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Collect New", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Dark Current:") &
 compound_string(#character_set("HELP_FONT")" ", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    A new dark current image may be collected before", separate=true) &
 compound_string(#character_set("HELP_FONT")"    performing the snapshot. This is usually not needed.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Snap:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Pressing this button will cause the scanner to set up the specified"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    parameters and begin the exposure. To stop the exposure before"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    it is done, select ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Abort Immediately") &
 compound_string(#character_set("HELP_FONT")" from the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Collect") &
 compound_string(#character_set("HELP_FONT")" pulldown", separate=true) &
 compound_string(#character_set("HELP_FONT")"    menu on the main window.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Close:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"    ") &
 compound_string(#character_set("HELP_FONT")"Pressing this button will close the Snapshot popup window."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    It will not stop a snapshot if one is in progress") &
 compound_string(#character_set("BOLD_HELP_FONT")".", separate=true);
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 1000;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object status_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 4;
        XmNwidth = 458;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label1;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_status_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label1 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 2;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"S" &
 "tatus") &
 compound_string(#character_set("H" &
 "ELP_FONT")" displays the current status of the CCD as well as the ", separate=true) &
 compound_string(#character_set("HELP_FONT")"status of  data collection. The first line gives a short  description "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"of the current status. Immediately below this is a ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Scale") &
 compound_string(#character_set("HELP_FONT")" which ", separate=true) &
 compound_string(#character_set("HELP_FONT")"graphically displays the percent completeness of the current "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"operation.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Shutter (Open or Closed):") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    State of the X-Ray shutter") &
 compound_string(#character_set("BOLD_HELP_FONT")".") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("SYMBOL_FONT")"2q, w, k, f") &
 compound_string(#character_set("HELP_FONT")":", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The current state of the goniometer. If data is being"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    collected, the axis through which data is being collected"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    will be highlighted in ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Red.") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Distance:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The crystal to ccd distance in mm.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Beam:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The X-Ray beam intensity.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("SYMBOL_FONT")"Df") &
 compound_string(#character_set("BOLD_HELP_FONT")" / ") &
 compound_string(#character_set("SYMBOL_FONT")"Dw") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The oscillation step size in degrees.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Time (Dose):") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The exposure time for each image. If the data collection mode is"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Time, then this label will be ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Time") &
 compound_string(#character_set("HELP_FONT")" and will display the exposure", separate=true) &
 compound_string(#character_set("HELP_FONT")"    in ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Seconds.") &
 compound_string(#character_set("HELP_FONT")"  If the data collection mode is Dose, then this label"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    will be ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Dose") &
 compound_string(#character_set("HELP_FONT")" and will display the exposure  in  ") &
 compound_string(#character_set("BOLD_HELP_FONT")"X-Ray counts") &
 compound_string(#character_set("HELP_FONT")".", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Binning:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The binning of the ccd.  Either ") &
 compound_string(#character_set("BOLD_HELP_FONT")"None") &
 compound_string(#character_set("HELP_FONT")" or") &
 compound_string(#character_set("BOLD_HELP_FONT")" 2x2") &
 compound_string(#character_set("HELP_FONT")". When in 2x2 mode", separate=true) &
 compound_string(#character_set("HELP_FONT")"     every 2x2 array of pixels will be averaged into 1 pixel."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"ADC:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"   The readout mode of the CCD can be ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Slow") &
 compound_string(#character_set("HELP_FONT")" or ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Fast") &
 compound_string(#character_set("HELP_FONT")". Slow mode", separate=true) &
 compound_string(#character_set("HELP_FONT")"    is more accurate, however it is slower.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Run completion Time:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The estimated remaining time until completion for the Current"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    run and also for All remaining runs (including the Current run)."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    The time is displayed as ") &
 compound_string(#character_set("BOLD_HELP_FONT")"hours:minutes") &
 compound_string(#character_set("HELP_FONT")".", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Disk Space Free") &
 compound_string(#character_set("HELP_FONT")":", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The amount of space available in the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Data Directory") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    is displayed as the number of images which would", separate=true) &
 compound_string(#character_set("HELP_FONT")"    fit in the remaining space as well as the number of"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Megabytes free.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Current Image:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The image which is being currently exposed.");
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 860;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object project_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 0;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNscrollBarPlacement = XmBOTTOM_RIGHT;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 4;
        XmNwidth = 461;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label59;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_project_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label59 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"P" &
 "roject") &
 compound_string(#character_set("H" &
 "ELP_FONT")"  will set up an environment for a specific crystal", separate=true) &
 compound_string(#character_set("HELP_FONT")"or project.", separate=true) &
 compound_string("", separate=true) &
 compound_string("", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Data Directory:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The directory where the image data will be written."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Processing Directory:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This is the directory where the images will be processed "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    (with either denzo, mosflm or xds).", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Image Prefix: ", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The prefix of the image which will be written. For example"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    if the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Directory  ") &
 compound_string(#character_set("HELP_FONT")"is") &
 compound_string(#character_set("BOLD_HELP_FONT")" /tmp") &
 compound_string(#character_set("HELP_FONT")" and the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Prefix  ") &
 compound_string(#character_set("HELP_FONT")"is ") &
 compound_string(#character_set("BOLD_HELP_FONT")"test") &
 compound_string(#character_set("HELP_FONT")", then an", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image called ") &
 compound_string(#character_set("BOLD_HELP_FONT")"/tmp/test_N_001.image ") &
 compound_string(#character_set("HELP_FONT")"will be created, where", separate=true) &
 compound_string(#character_set("HELP_FONT")"    ") &
 compound_string(#character_set("BOLD_HELP_FONT")"N") &
 compound_string(#character_set("HELP_FONT")" is the run number.", separate=true) &
 compound_string(#character_set("HELP_FONT")"               ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Project") &
 compound_string(#character_set("HELP_FONT")" ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Parameter File:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This file stores the various attributes describing the results"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    of the indexing and data processing. This is an ASCII file which"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    may be edited by hand.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Space Group:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The space group of the crystal (if known).", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Get Previous Project:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Read a previous parameter file.") &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Create New Project:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"   ") &
 compound_string(#character_set("HELP_FONT")" Create a new parameter file", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Close:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Close the Project popup window.", separate=true);
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 600;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object options_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 4;
        XmNwidth = 461;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label47;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label47 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 2;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"O" &
 "ptions") &
 compound_string(#character_set("H" &
 "ELP_FONT")" allows the following to be set:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"ADC:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    CCD images may be digitized using either a Fast or Slow"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Analog to Digital Converter. The Slow Analog to Digital"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    converter is more accurate, however it is slower.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Binning:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Every 2x2 array of pixels may be averaged (binned) to form"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    1 pixel. Images will contain 1/4 as many pixels when binned."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Output Format:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    SMV - Super Marty View", separate=true) &
 compound_string(#character_set("HELP_FONT")"    CBF - Crystallographic Binary File", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Output Type:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    16 Bits - Unsigned Short values are written. Values larger "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"                   than 65535 are set to 65535", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    32 Bits ") &
 compound_string(#character_set("BOLD_HELP_FONT")"- ") &
 compound_string(#character_set("HELP_FONT")" Signed 32 bit Integers are written.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Collect New Dark Each:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    How frequently a new Dark Current image will be collected. If"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Run") &
 compound_string(#character_set("HELP_FONT")" is checked then a new dark current image is collected at"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    the start of each new run. If ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Interval") &
 compound_string(#character_set("HELP_FONT")" is checked then a new", separate=true) &
 compound_string(#character_set("HELP_FONT")"    dark current image is collected every xxx seconds, where xxx"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    is specified in the textfield below. Both may be checked to"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    collect a dark image every run and also every xxx seconds. "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    Dark Current images are always de-zingered", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Maximum # of Degrees / Step:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    This sets the maximum coarseness of the micro-stepping in the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    goniometer used during data collection. This is site dependent."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Unless you know what you are doing, do not modify this."
 , separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Degrees / Dose:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    When in ") &
 compound_string(#character_set("BOLD_HELP_FONT")"Dose Mode") &
 compound_string(#character_set("HELP_FONT")", the dose is repeatedly integrated over this", separate=true) &
 compound_string(#character_set("HELP_FONT")"    many degrees and the rate of oscillation is adjusted so that the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    total requested dose is accumulated over the entire oscillation."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    This is only used in Dose mode and does not normally need to"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    be changed.", separate=true) &
 compound_string(#character_set("HELP_FONT")"    ", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Xform Images:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Whether or not to perform image correction on-line. If this is set"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    to No, then raw images are stored and they may be corrected "
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    later with \"ccd_dc_api -sa\"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Save Raw Data:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Normally the  original raw uncorrected images are deleted to save"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    disk space. If this is set to \"Yes\", then all raw data will be saved."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Close:", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"    ") &
 compound_string(#character_set("HELP_FONT")"Pressing this button will close the Options popup window."
 , separate=true);
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 870;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object mad_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 4;
        XmNwidth = 461;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label86;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mad_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label86 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"M" &
 "AD / Wavelength") &
 compound_string(#character_set("H" &
 "ELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"To enable an energy click with the LEFT mouse button on the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"toggle button to the left of the energy. Clicking on the toggle"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"button will alternately select and de-select this energy."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"Either Energy (in Electron Volts) or Wavelength (in Angstroms)"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"may be entered. ", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"Each run in the Run(s) window will be automatically duplicated"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"for each selected energy. For example, if you have 2 runs in the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"Run(s) window and have selected 3 energies you will end up"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"with the following data:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_00") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #1, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")")", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_10") &
 compound_string("1") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #1, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")", Friedel)", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_20") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #2, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")") ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_30") &
 compound_string("1") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #2, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")", Friedel)", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_40") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #3, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")")", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_50") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #3, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"1") &
 compound_string(#character_set("HELP_FONT")", Friedel)", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_00") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #1, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")")", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_10") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #1, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")", Friedel)", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_20") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #2, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")") ", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_30") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #2, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")", Friedel)", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_40") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #3, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")")", separate=true) &
 compound_string(#character_set("HELP_FONT")"    image_50") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")"_XXX.img (Energy #3, Run #") &
 compound_string(#character_set("BOLD_HELP_FONT")"2") &
 compound_string(#character_set("HELP_FONT")", Friedel)", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Note:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"   The ") &
 compound_string(#character_set("BOLD_HELP_FONT")"\"Friedel\"") &
 compound_string(#character_set("HELP_FONT")" run is only generated if the ") &
 compound_string(#character_set("BOLD_HELP_FONT")"\"Anomalous\"") &
 compound_string(#character_set("HELP_FONT")" button", separate=true) &
 compound_string(#character_set("HELP_FONT")"    in the Run(s) window is set to \"Yes\".", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"You can also select when to change the energy:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Never:") &
 compound_string(#character_set("HELP_FONT")" ", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Perform all runs with one energy.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Each Run:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The energy is changed at the start of each run.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Each Anomalous Wedge:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    The energy is changed for each \"Wedge\" of anomalous data."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"    The Wedge Size is specified in the Run(s) window.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"Every N Frames:") &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"    Change the energy every N Frames.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"Regardless which of the last 3 options are selected, you will end"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"up with the exact same number of images. The same data will be"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"collected, but in a different order. For example you may only want"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"to change the wavelength every run if changing the wavelength"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"is relatively time consuming.");
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 750;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object config_site_helpWindow : XmScrolledWindow widget {
    arguments {
        arguments BackGround;
        XmNborderWidth = 2;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Gray50');
        XmNbottomShadowColor = color('White');
        XmNscrollingPolicy = XmAUTOMATIC;
        XmNspacing = 4;
        XmNx = 10;
        XmNy = 4;
        XmNwidth = 461;
        XmNheight = 400;
    };
    controls {
         managed XmLabel label114;
    };
    callbacks {
        callbacks BackGroundReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_config_site_helpWindow);
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object label114 : XmLabel widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('White');
        XmNborderColor = color('Black');
        XmNhighlightThickness = 0;
        XmNhighlightColor = color('Black');
        XmNshadowThickness = 1;
        XmNtopShadowColor = color('Peach Puff');
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmarginLeft = 2;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('BOLD_HELP_FONT')),
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1',character_set=character_set('HELP_FONT')),
		font('-*-symbol-medium-r-*-*-*-180-75-75-p-*-*-*',character_set=character_set('SYMBOL_FONT')));
        XmNlabelString = compound_string(#character_set("BOLD_HELP_FONT")"S" &
 "ite Config") &
 compound_string(#character_set("H" &
 "ELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"Certain site specific parameters may be adjusted here.  Normally"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"the user will not need to modify any of these parameters."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"There are ten pairs of text fields. The text field on the left is the "
 , separate=true) &
 compound_string(#character_set("BOLD_HELP_FONT")"parameter") &
 compound_string(#character_set("HELP_FONT")" and the text field on the right is it\'s associated ") &
 compound_string(#character_set("BOLD_HELP_FONT")"value") &
 compound_string(#character_set("HELP_FONT")".", separate=true) &
 compound_string(#character_set("HELP_FONT")"The text field on the left is not editable, however the value"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"of each parameter is editable. If any changes are made, the"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"\"") &
 compound_string(#character_set("BOLD_HELP_FONT")"Reconfigure Now") &
 compound_string(#character_set("HELP_FONT")"\" button may be pressed to cause the new", separate=true) &
 compound_string(#character_set("HELP_FONT")"parameters to take effect.", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"For example one pair of text fields may be:", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"wavelength            1.08", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"Changing this text field will change the value of the wavelength"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"written to the image header, not necessarily the wavelength"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"of the beamline. Other text fields may specify minimum and"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"maximum distances to which the detector may be moved.", separate=true) &
 compound_string(#character_set("HELP_FONT")"Setting these to incorrect values could be disastrous. Please"
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"consult local beamline personel if you have any questions."
 , separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true) &
 compound_string(#character_set("HELP_FONT")"", separate=true);
        XmNrecomputeSize = false;
        XmNwidth = 435;
        XmNheight = 400;
    };
    controls {
    };
    callbacks {
        callbacks BackGroundReasons;
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

!(BX)object xmDialogShell35 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNtitle = "ADX - Alert";
!(BX)        XmNx = 723;
!(BX)        XmNy = 170;
!(BX)        XmNwidth = 450;
!(BX)        XmNheight = 240;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog alertDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object alertDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogStyle = XmDIALOG_MODELESS;
        XmNx = 723;
        XmNy = 170;
        XmNwidth = 450;
        XmNheight = 240;
    };
    controls {
         managed XmLabel alert_label;
         managed XmPushButton pushButton84;
         managed XmLabel alert_label1;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_alertDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object alert_label1 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginHeight = 0;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("***** ALERT *****", separate=true) &
 compound_string("Important Message");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 10;
        XmNwidth = 427;
        XmNheight = 75;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object pushButton84 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNhighlightThickness = 0;
        XmNuserData = STOP_NO;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNfontList = font_table(
		font('-*-lucida-bold-r-*-*-*-120-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("OK");
        XmNrecomputeSize = false;
        XmNx = 382;
        XmNy = 191;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure alert_OK_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object alert_label : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 2;
        XmNbackground = color('White');
        XmNborderColor = rgb(65280, 12800, 12800);
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginHeight = 0;
        XmNmarginTop = 0;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-120-75-75-*-*-iso8859-1'),
		font('-*-lucida-bold-r-*-*-*-180-75-75-*-*-iso8859-1',character_set=character_set('BOLD_FONT')));
        XmNlabelString = compound_string("This is a Message from Beamline " &
 "Control");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 101;
        XmNwidth = 427;
        XmNheight = 75;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_alert_label);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell36 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 136;
!(BX)        XmNy = 54;
!(BX)        XmNwidth = 487;
!(BX)        XmNheight = 391;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog optionsDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object optionsDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogTitle = compound_string("ADX - Config CCD");
        XmNx = 136;
        XmNy = 54;
        XmNwidth = 487;
        XmNheight = 391;
    };
    controls {
         managed XmTextField options_darkinterval_textField;
         managed XmTextField options_deg_dose_textField;
         managed XmLabel label113;
         managed XmRadioBox strategy_time_dose_mode10;
         managed XmLabel label93;
         managed XmRadioBox strategy_time_dose_mode7;
         managed XmRadioBox strategy_time_dose_mode8;
         managed XmLabel label92;
         managed XmLabel label91;
         managed XmLabel label90;
         managed XmTextField options_step_textField;
         managed XmLabel label32;
         managed XmRadioBox strategy_time_dose_mode6;
         managed XmLabel label70;
         managed XmRadioBox strategy_time_dose_mode4;
         managed XmLabel label12;
         managed XmRadioBox strategy_time_dose_mode1;
         managed XmRadioBox strategy_time_dose_mode9;
         managed XmLabel label6;
         managed XmLabel label3;
         managed XmMenuBar menuBar6;
         managed XmPushButton strategy_close_pushbutton1;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_optionsDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_close_pushbutton1 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNrecomputeSize = false;
        XmNx = 380;
        XmNy = 334;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure options_close_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object menuBar6 : XmMenuBar widget {
    arguments {
        arguments Labellook;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton14;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 486;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton cascadeButton14;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object cascadeButton14 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Help");
        XmNx = 436;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu help_pulldownMenu1;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object help_pulldownMenu1 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton options_help_PushButton;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object options_help_PushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure options_help_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object label3 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Collect New ", separate=true) &
 compound_string("Dark Each:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 223;
        XmNwidth = 104;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label6 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Output Type:");
        XmNrecomputeSize = false;
        XmNx = 270;
        XmNy = 142;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode9 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmVERTICAL;
        XmNx = 380;
        XmNy = 139;
        XmNwidth = 90;
        XmNheight = 50;
    };
    controls {
         managed XmToggleButton options_output16_toggleButton;
         managed XmToggleButton options_output32_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object options_output16_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("16 Bits");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 84;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_output16_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object options_output32_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("32 Bits");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 84;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_output32_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_time_dose_mode1 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNx = 117;
        XmNy = 67;
        XmNwidth = 130;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton strategy_slow_toggleButton;
         managed XmToggleButton strategy_fast_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_slow_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("Slow");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_slow_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_fast_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("Fast");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_fast_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label12 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("ADC:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 70;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode4 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNx = 117;
        XmNy = 103;
        XmNwidth = 130;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton strategy_bin1_toggleButton;
         managed XmToggleButton strategy_bin2_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_bin1_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("None");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_bin1_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_bin2_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("2x2");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_strategy_bin2_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label70 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_END;
        XmNlabelString = compound_string("Binning:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 106;
        XmNwidth = 104;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode6 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmVERTICAL;
        XmNradioBehavior = false;
        XmNradioAlwaysOne = false;
        XmNx = 117;
        XmNy = 212;
        XmNwidth = 210;
        XmNheight = 75;
    };
    controls {
         managed XmToggleButton options_darkrun_toggleButton;
         managed XmToggleButton options_darkinterval_toggleButton;
         managed XmToggleButton options_darkstored_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object options_darkrun_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("Run");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 204;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_darkrun_toggleButton);
        XmNvalueChangedCallback = procedure options_darkrun_valueChangedCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object options_darkinterval_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("Interval:");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 204;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_darkinterval_toggleButton);
        XmNvalueChangedCallback = procedure options_darkinterval_valueChangedCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object options_darkstored_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNsensitive = false;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("Use Pre-Stored");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 204;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_darkstored_toggleButton);
        XmNvalueChangedCallback = procedure options_darkstored_valueChangedCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label32 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("(Sec)");
        XmNrecomputeSize = false;
        XmNx = 270;
        XmNy = 239;
        XmNwidth = 40;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label32);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object options_step_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "0.015";
        XmNcursorPosition = 0;
        XmNx = 117;
        XmNy = 310;
        XmNwidth = 60;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_step_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label90 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Max. Deg./Step ", separate=true) &
 compound_string("(within frame):");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 300;
        XmNwidth = 104;
        XmNheight = 40;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label91 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Xform Images:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 142;
        XmNwidth = 104;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label92 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Save Raw Data:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 178;
        XmNwidth = 104;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode8 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNx = 117;
        XmNy = 175;
        XmNwidth = 130;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton options_saveraw_yes;
         managed XmToggleButton options_saveraw_no;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object options_saveraw_yes : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_saveraw_yes);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object options_saveraw_no : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_saveraw_no);
        XmNarmCallback = procedure saveraw_no_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object strategy_time_dose_mode7 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmHORIZONTAL;
        XmNx = 117;
        XmNy = 139;
        XmNwidth = 130;
        XmNheight = 25;
    };
    controls {
         managed XmToggleButton options_xform_yes;
         managed XmToggleButton options_xform_no;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object options_xform_yes : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Yes");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_xform_yes);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object options_xform_no : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("No");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 58;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_xform_no);
        XmNarmCallback = procedure xform_no_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label93 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Output Format:");
        XmNrecomputeSize = false;
        XmNx = 270;
        XmNy = 70;
        XmNwidth = 104;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode10 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 1;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginHeight = 2;
        XmNorientation = XmVERTICAL;
        XmNx = 380;
        XmNy = 67;
        XmNwidth = 90;
        XmNheight = 50;
    };
    controls {
         managed XmToggleButton options_outputsmv_toggleButton;
         managed XmToggleButton options_outputcbf_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object options_outputsmv_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("SMV");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 84;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_outputsmv_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object options_outputcbf_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNsensitive = false;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("CBF");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 84;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_outputcbf_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label113 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNlabelString = compound_string("Deg. / Dose:");
        XmNrecomputeSize = false;
        XmNx = 10;
        XmNy = 346;
        XmNwidth = 104;
        XmNheight = 21;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object options_deg_dose_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "0.01";
        XmNcursorPosition = 0;
        XmNx = 117;
        XmNy = 346;
        XmNwidth = 60;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_deg_dose_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object options_darkinterval_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 220;
        XmNy = 237;
        XmNwidth = 48;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_options_darkinterval_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

!(BX)object xmDialogShell22 : XmDialogShell widget {
!(BX)    arguments {
!(BX)        XmNx = 924;
!(BX)        XmNy = 227;
!(BX)        XmNwidth = 311;
!(BX)        XmNheight = 641;
!(BX)    };
!(BX)    controls {
!(BX)         unmanaged XmBulletinBoardDialog madDialog;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object madDialog : XmBulletinBoardDialog widget {
    arguments {
        arguments Labellook;
        XmNbackground = color('Papaya Whip');
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNautoUnmanage = false;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_GROW;
        XmNdialogTitle = compound_string("ADX - MAD / Wavelength");
        XmNx = 924;
        XmNy = 227;
        XmNwidth = 311;
        XmNheight = 641;
    };
    controls {
         managed XmLabel label111;
         managed XmLabel label110;
         managed XmBulletinBoard bulletinBoard2;
         managed XmLabel label95;
         managed XmBulletinBoard bulletinBoard1;
         managed XmMenuBar menuBar7;
         managed XmPushButton strategy_close_pushbutton2;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_madDialog);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_close_pushbutton2 : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNtraversalOn = false;
        XmNhighlightThickness = 0;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Close");
        XmNrecomputeSize = false;
        XmNx = 230;
        XmNy = 590;
        XmNwidth = 58;
        XmNheight = 37;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        XmNactivateCallback = procedure mad_close_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object menuBar7 : XmMenuBar widget {
    arguments {
        arguments Labellook;
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNmarginWidth = 0;
        XmNmarginHeight = 0;
        XmNmenuHelpWidget = XmCascadeButton cascadeButton12;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 310;
        XmNheight = 25;
    };
    controls {
         managed XmCascadeButton cascadeButton12;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object cascadeButton12 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNlabelString = compound_string("Help");
        XmNx = 260;
        XmNy = 2;
        XmNwidth = 48;
        XmNheight = 21;
    };
    controls {
         unmanaged XmPulldownMenu help_pulldownMenu2;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object help_pulldownMenu2 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 27;
    };
    controls {
         managed XmPushButton mad_help_PushButton;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object mad_help_PushButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Help...");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure mad_help_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object bulletinBoard1 : XmBulletinBoard widget {
    arguments {
        XmNborderWidth = 1;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 20;
        XmNy = 60;
        XmNwidth = 270;
        XmNheight = 234;
    };
    controls {
         managed XmLabel label107;
         managed XmTextField energy5_textField;
         managed XmLabel label106;
         managed XmTextField wavelength5_textField;
         managed XmLabel label105;
         managed XmTextField energy4_textField;
         managed XmLabel label104;
         managed XmTextField wavelength4_textField;
         managed XmLabel label102;
         managed XmTextField energy3_textField;
         managed XmLabel label101;
         managed XmTextField wavelength3_textField;
         managed XmLabel label100;
         managed XmTextField energy2_textField;
         managed XmLabel label99;
         managed XmTextField wavelength2_textField;
         managed XmLabel label94;
         managed XmTextField energy1_textField;
         managed XmLabel label98;
         managed XmTextField wavelength1_textField;
         managed XmRadioBox strategy_time_dose_mode13;
    };
    callbacks {
    };
};

object strategy_time_dose_mode13 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNadjustLast = false;
        XmNmarginHeight = 2;
        XmNorientation = XmVERTICAL;
        XmNspacing = 10;
        XmNadjustMargin = false;
        XmNradioBehavior = false;
        XmNradioAlwaysOne = false;
        XmNx = 10;
        XmNy = 33;
        XmNwidth = 25;
        XmNheight = 190;
    };
    controls {
         managed XmToggleButton enable_wavelength1_toggleButton;
         managed XmToggleButton enable_wavelength2_toggleButton;
         managed XmToggleButton enable_wavelength3_toggleButton;
         managed XmToggleButton enable_wavelength4_toggleButton;
         managed XmToggleButton enable_wavelength5_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object enable_wavelength1_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNuserData = 1;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_enable_wavelength1_toggleButton);
        XmNarmCallback = procedure mad_energy_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object enable_wavelength2_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNuserData = 2;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_enable_wavelength2_toggleButton);
        XmNarmCallback = procedure mad_energy_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object enable_wavelength3_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNuserData = 3;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_enable_wavelength3_toggleButton);
        XmNarmCallback = procedure mad_energy_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object enable_wavelength4_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNuserData = 4;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_enable_wavelength4_toggleButton);
        XmNarmCallback = procedure mad_energy_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object enable_wavelength5_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNuserData = 5;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_enable_wavelength5_toggleButton);
        XmNarmCallback = procedure mad_energy_armCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object wavelength1_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 1;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 150;
        XmNy = 36;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_wavelength1_textField);
        XmNactivateCallback = procedure mad_wavelength_activateCallback();
        XmNlosingFocusCallback = procedure mad_wavelength_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label98 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("eV");
        XmNrecomputeSize = false;
        XmNx = 120;
        XmNy = 36;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object energy1_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 1;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 40;
        XmNy = 36;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_energy1_textField);
        XmNactivateCallback = procedure mad_energy_activateCallback();
        XmNlosingFocusCallback = procedure mad_energy_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label94 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("A");
        XmNrecomputeSize = false;
        XmNx = 230;
        XmNy = 36;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object wavelength2_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 2;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 150;
        XmNy = 74;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_wavelength2_textField);
        XmNactivateCallback = procedure mad_wavelength_activateCallback();
        XmNlosingFocusCallback = procedure mad_wavelength_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label99 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("eV");
        XmNrecomputeSize = false;
        XmNx = 120;
        XmNy = 74;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object energy2_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 2;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 40;
        XmNy = 74;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_energy2_textField);
        XmNactivateCallback = procedure mad_energy_activateCallback();
        XmNlosingFocusCallback = procedure mad_energy_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label100 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("A");
        XmNrecomputeSize = false;
        XmNx = 230;
        XmNy = 74;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object wavelength3_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 3;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 150;
        XmNy = 112;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_wavelength3_textField);
        XmNactivateCallback = procedure mad_wavelength_activateCallback();
        XmNlosingFocusCallback = procedure mad_wavelength_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label101 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("eV");
        XmNrecomputeSize = false;
        XmNx = 120;
        XmNy = 112;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object energy3_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 3;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 40;
        XmNy = 112;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_energy3_textField);
        XmNactivateCallback = procedure mad_energy_activateCallback();
        XmNlosingFocusCallback = procedure mad_energy_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label102 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("A");
        XmNrecomputeSize = false;
        XmNx = 230;
        XmNy = 112;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object wavelength4_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 4;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 150;
        XmNy = 150;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_wavelength4_textField);
        XmNactivateCallback = procedure mad_wavelength_activateCallback();
        XmNlosingFocusCallback = procedure mad_wavelength_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label104 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("eV");
        XmNrecomputeSize = false;
        XmNx = 120;
        XmNy = 150;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object energy4_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 4;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 40;
        XmNy = 150;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_energy4_textField);
        XmNactivateCallback = procedure mad_energy_activateCallback();
        XmNlosingFocusCallback = procedure mad_energy_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label105 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("A");
        XmNrecomputeSize = false;
        XmNx = 230;
        XmNy = 150;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object wavelength5_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 5;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 150;
        XmNy = 188;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_wavelength5_textField);
        XmNactivateCallback = procedure mad_wavelength_activateCallback();
        XmNlosingFocusCallback = procedure mad_wavelength_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label106 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("eV");
        XmNrecomputeSize = false;
        XmNx = 120;
        XmNy = 188;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object energy5_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNuserData = 5;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 40;
        XmNy = 188;
        XmNwidth = 76;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_energy5_textField);
        XmNactivateCallback = procedure mad_energy_activateCallback();
        XmNlosingFocusCallback = procedure mad_energy_losingFocusCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label107 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("A");
        XmNrecomputeSize = false;
        XmNx = 230;
        XmNy = 188;
        XmNwidth = 20;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label95 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Energy to Use");
        XmNrecomputeSize = false;
        XmNx = 100;
        XmNy = 48;
        XmNwidth = 100;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object bulletinBoard2 : XmBulletinBoard widget {
    arguments {
        XmNborderWidth = 1;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNresizePolicy = XmRESIZE_GROW;
        XmNx = 20;
        XmNy = 390;
        XmNwidth = 270;
        XmNheight = 190;
    };
    controls {
         managed XmLabel label109;
         managed XmTextField mad_nframes_textField;
         managed XmLabel label108;
         managed XmRadioBox strategy_time_dose_mode14;
         managed XmLabel label103;
         managed XmLabel label97;
         managed XmLabel label96;
    };
    callbacks {
    };
};

object label96 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Never");
        XmNrecomputeSize = false;
        XmNx = 40;
        XmNy = 27;
        XmNwidth = 80;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label97 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Each Anomalous Wedge");
        XmNrecomputeSize = false;
        XmNx = 40;
        XmNy = 103;
        XmNwidth = 220;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label97);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label103 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Each Run");
        XmNrecomputeSize = false;
        XmNx = 40;
        XmNy = 65;
        XmNwidth = 130;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object strategy_time_dose_mode14 : XmRadioBox widget {
    arguments {
        arguments Labellook;
        XmNborderWidth = 0;
        XmNborderColor = color('Black');
        XmNnavigationType = XmNONE;
        XmNtraversalOn = false;
        XmNresizeWidth = false;
        XmNresizeHeight = false;
        XmNadjustLast = false;
        XmNmarginHeight = 2;
        XmNorientation = XmVERTICAL;
        XmNspacing = 10;
        XmNadjustMargin = false;
        XmNradioBehavior = true;
        XmNradioAlwaysOne = true;
        XmNx = 10;
        XmNy = 21;
        XmNwidth = 30;
        XmNheight = 155;
    };
    controls {
         managed XmToggleButton mad_option1_toggleButton;
         managed XmToggleButton mad_option2_toggleButton;
         managed XmToggleButton mad_option3_toggleButton;
         managed XmToggleButton mad_option4_toggleButton;
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mad_option1_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mad_option1_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object mad_option2_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mad_option2_toggleButton);
        XmNvalueChangedCallback = procedure options_darkinterval_valueChangedCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object mad_option3_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNsensitive = true;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mad_option3_toggleButton);
        XmNvalueChangedCallback = procedure mad_anom_wedge_valueChangedCallback();
        XmNarmCallback = procedure mad_anom_wedge_armCallback();
        XmNdisarmCallback = procedure mad_anom_wedge_disarmCallback();
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object mad_option4_toggleButton : XmToggleButton widget {
    arguments {
        arguments togglestyle;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNlabelString = compound_string("");
        XmNrecomputeSize = false;
        XmNindicatorSize = 15;
        XmNwidth = 23;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
        callbacks togglestyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mad_option4_toggleButton);
    };
!(BX)    handlers {
!(BX)        handlers togglestyleHandlers;
!(BX)    };
};

object label108 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Every");
        XmNrecomputeSize = false;
        XmNx = 40;
        XmNy = 141;
        XmNwidth = 43;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label108);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object mad_nframes_textField : XmTextField widget {
    arguments {
        arguments textFieldlook;
        XmNborderWidth = 0;
        XmNvalue = "";
        XmNcursorPosition = 0;
        XmNx = 85;
        XmNy = 141;
        XmNwidth = 35;
        XmNheight = 23;
    };
    controls {
    };
    callbacks {
        callbacks textFieldlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mad_nframes_textField);
        XmNactivateCallback = procedure newline_activateCallback();
        XmNmodifyVerifyCallback = procedure AdxVerifyNumericCB();
    };
!(BX)    handlers {
!(BX)        handlers textFieldlookHandlers;
!(BX)    };
};

object label109 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("Frames");
        XmNrecomputeSize = false;
        XmNx = 123;
        XmNy = 141;
        XmNwidth = 60;
        XmNheight = 25;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_label109);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label110 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_CENTER;
        XmNlabelString = compound_string("Change Energy");
        XmNrecomputeSize = false;
        XmNx = 100;
        XmNy = 380;
        XmNwidth = 100;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object label111 : XmLabel widget {
    arguments {
        arguments Labellook;
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelString = compound_string("For Each run in the Run(s) Windo" &
 "w,", separate=true) &
 compound_string("cycle through each of the above ", separate=true) &
 compound_string("energies. Specify when to change", separate=true) &
 compound_string("the energy below.");
        XmNrecomputeSize = false;
        XmNx = 20;
        XmNy = 310;
        XmNwidth = 280;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        callbacks LabellookReasons;
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        arguments Labellook;
!(BX)        XmNtitle = "ADX";
!(BX)        XmNx = 873;
!(BX)        XmNy = 4;
!(BX)        XmNwidth = 132;
!(BX)        XmNheight = 272;
!(BX)    };
!(BX)    controls {
!(BX)         managed XmForm bulletinBoard;
!(BX)    };
!(BX)    callbacks {
!(BX)        callbacks LabellookReasons;
!(BX)    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
!(BX)};

object bulletinBoard : XmForm widget {
    arguments {
        arguments BackGround;
        XmNbackground = color('Peach Puff');
        XmNmarginWidth = 5;
        XmNmarginHeight = 5;
        XmNdefaultPosition = false;
        XmNresizePolicy = XmRESIZE_ANY;
        XmNdialogTitle = compound_string("ADX");
        XmNfractionBase = 330;
        XmNx = 873;
        XmNy = 32;
        XmNwidth = 132;
        XmNheight = 272;
    };
    controls {
         managed XmArrowButton process_arrowButton;
         managed XmArrowButton display_arrowButton;
         managed XmArrowButton stop_arrowButton;
         managed XmArrowButton setup_arrowButton;
         managed XmPushButton exitButton;
         managed XmPushButton processButton;
         managed XmPushButton displayButton;
         managed XmPushButton stopButton;
         managed XmPushButton setupButton;
    };
    callbacks {
        callbacks BackGroundReasons;
       MrmNcreateCallback = procedures {
                 main_createCallback();
                 BxGlobalWidgetId(BXG_bulletinBoard);
        };
        XmNdestroyCallback = procedure main_destroyCallback();
        XmNmapCallback = procedure main_mapCallback();
    };
!(BX)    handlers {
!(BX)        handlers BackGroundHandlers;
!(BX)    };
};

object setupButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNborderWidth = 1;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightOnEnter = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 3;
        XmNbottomShadowColor = color('Grey65');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginWidth = 2;
        XmNmarginRight = 10;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("SETUP");
        XmNrecomputeSize = false;
        XmNfillOnArm = false;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopPosition = 5;
        XmNbottomPosition = 65;
        XmNtopOffset = 0;
        XmNleftOffset = 3;
        XmNrightOffset = 3;
        XmNx = 3;
        XmNy = 4;
        XmNwidth = 124;
        XmNheight = 48;
    };
    controls {
         unmanaged XmPopupMenu setup_popupMenu;
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setupButton);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object setup_popupMenu : XmPopupMenu widget {
    arguments {
        arguments Labellook;
        XmNwhichButton = 1;
        XmNmarginHeight = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 132;
        XmNheight = 150;
    };
    controls {
         managed XmPushButton projectButton;
         managed XmPushButton manualcontrolButton;
         managed XmPushButton snapshotButton;
         managed XmPushButton optstratButton;
         managed XmPushButton strategyButton;
         managed XmPushButton loaclSiteButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setup_popupMenu);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object projectButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Project");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure project_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object manualcontrolButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Manual Control");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure manualcontrol_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object snapshotButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Snapshot");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure snapshot_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object optstratButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Optimal Strategy");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure optstrat_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object strategyButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Run(s)");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure strategy_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object loaclSiteButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Local");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure localsite_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object stopButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNborderWidth = 1;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightOnEnter = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 3;
        XmNbottomShadowColor = color('Grey65');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginRight = 10;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("STOP");
        XmNrecomputeSize = false;
        XmNfillOnArm = false;
        XmNdefaultButtonShadowThickness = 0;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopPosition = 70;
        XmNbottomPosition = 130;
        XmNtopOffset = 0;
        XmNleftOffset = 3;
        XmNrightOffset = 3;
        XmNx = 3;
        XmNy = 58;
        XmNwidth = 124;
        XmNheight = 47;
    };
    controls {
         unmanaged XmPopupMenu popupMenu;
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_stopButton);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object popupMenu : XmPopupMenu widget {
    arguments {
        arguments Labellook;
        XmNwhichButton = 1;
        XmNmarginHeight = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 150;
        XmNheight = 50;
    };
    controls {
         managed XmPushButton stopnowButton;
         managed XmPushButton stopnextiButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_popupMenu);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object stopnowButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNsensitive = false;
        XmNlabelString = compound_string("Immediately");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure stopnow_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object stopnextiButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("After Current Image");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure stopnexti_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object displayButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNborderWidth = 1;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightOnEnter = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 3;
        XmNbottomShadowColor = color('Grey65');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginWidth = 2;
        XmNmarginLeft = 0;
        XmNmarginRight = 10;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string(" DISPLAY");
        XmNrecomputeSize = false;
        XmNfillOnArm = false;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopPosition = 135;
        XmNbottomPosition = 195;
        XmNtopOffset = 0;
        XmNleftOffset = 3;
        XmNrightOffset = 3;
        XmNx = 3;
        XmNy = 111;
        XmNwidth = 124;
        XmNheight = 48;
    };
    controls {
         unmanaged XmPopupMenu display_popupMenu;
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_displayButton);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object display_popupMenu : XmPopupMenu widget {
    arguments {
        arguments Labellook;
        XmNwhichButton = 1;
        XmNmarginHeight = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 83;
        XmNheight = 71;
    };
    controls {
         managed XmPushButton statusButton;
         managed XmCascadeButton cascadeButton3;
         managed XmPushButton versionButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_display_popupMenu);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object statusButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Status");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure status_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object cascadeButton3 : XmCascadeButton widget {
    arguments {
        arguments CascadeButtonStyle;
        XmNbackground = color('Peach Puff');
        XmNtopShadowColor = color('White');
        XmNbottomShadowColor = color('Grey40');
        XmNmarginHeight = 2;
        XmNlabelString = compound_string("Image...");
    };
    controls {
         unmanaged XmPulldownMenu pulldownMenu3;
    };
    callbacks {
        callbacks CascadeButtonStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers CascadeButtonStyleHandlers;
!(BX)    };
};

object pulldownMenu3 : XmPulldownMenu widget {
    arguments {
        arguments PullDownMenuStyle;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 114;
        XmNheight = 77;
    };
    controls {
         managed XmPushButton currentimageButton;
         managed XmPushButton followimageButton;
         managed XmPushButton imageButton;
    };
    callbacks {
        callbacks PullDownMenuStyleReasons;
    };
!(BX)    handlers {
!(BX)        handlers PullDownMenuStyleHandlers;
!(BX)    };
};

object currentimageButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = CURRENT_IMAGE;
        XmNlabelString = compound_string("Current Image");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure display_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object followimageButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = FOLLOW_IMAGES;
        XmNlabelString = compound_string("Follow Images");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure display_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object imageButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = SELECT_IMAGE;
        XmNlabelString = compound_string("Image...");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure display_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object versionButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNlabelString = compound_string("Version");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        XmNactivateCallback = procedure version_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object processButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNborderWidth = 1;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightOnEnter = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 3;
        XmNbottomShadowColor = color('Grey65');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginRight = 10;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string(" PROCESS");
        XmNrecomputeSize = false;
        XmNfillOnArm = false;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopPosition = 200;
        XmNbottomPosition = 260;
        XmNtopOffset = 0;
        XmNleftOffset = 3;
        XmNrightOffset = 3;
        XmNx = 3;
        XmNy = 165;
        XmNwidth = 124;
        XmNheight = 47;
    };
    controls {
         unmanaged XmPopupMenu process_popupMenu;
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_processButton);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object process_popupMenu : XmPopupMenu widget {
    arguments {
        arguments Labellook;
        XmNwhichButton = 1;
        XmNmarginHeight = 0;
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 82;
        XmNheight = 52;
    };
    controls {
         managed XmPushButton autoindexButton;
         unmanaged XmPushButton xdsButton;
         unmanaged XmPushButton denzoButton;
         managed XmPushButton mosflmButton;
    };
    callbacks {
        callbacks LabellookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_process_popupMenu);
    };
!(BX)    handlers {
!(BX)        handlers LabellookHandlers;
!(BX)    };
};

object autoindexButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = PROCESS_AUTOINDEX;
        XmNlabelString = compound_string("AutoIndex");
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_autoindexButton);
        XmNactivateCallback = procedure process_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object xdsButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = PROCESS_XDS;
        XmNlabelString = compound_string("XDS");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_xdsButton);
        XmNactivateCallback = procedure process_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object denzoButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = PROCESS_DENZO;
        XmNlabelString = compound_string("Denzo");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_denzoButton);
        XmNactivateCallback = procedure process_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object mosflmButton : XmPushButton widget {
    arguments {
        arguments MenuButtonStyle;
        XmNuserData = PROCESS_MOSFLM;
        XmNlabelString = compound_string("Mosflm");
        XmNrecomputeSize = false;
    };
    controls {
    };
    callbacks {
        callbacks MenuButtonStyleReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_mosflmButton);
        XmNactivateCallback = procedure process_activateCallback();
    };
!(BX)    handlers {
!(BX)        handlers MenuButtonStyleHandlers;
!(BX)    };
};

object exitButton : XmPushButton widget {
    arguments {
        arguments Buttonlook;
        XmNborderWidth = 1;
        XmNbackground = color('Papaya Whip');
        XmNborderColor = color('Black');
        XmNhighlightOnEnter = false;
        XmNhighlightThickness = 0;
        XmNshadowThickness = 3;
        XmNbottomShadowColor = color('Grey65');
        XmNalignment = XmALIGNMENT_CENTER;
        XmNmarginRight = 10;
        XmNfontList = font_table(
		font('-*-lucida-medium-r-*-*-*-180-75-75-*-*-iso8859-1'));
        XmNlabelString = compound_string("EXIT");
        XmNrecomputeSize = false;
        XmNfillOnArm = false;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_FORM;
        XmNrightAttachment = XmATTACH_FORM;
        XmNtopPosition = 265;
        XmNbottomPosition = 325;
        XmNtopOffset = 0;
        XmNleftOffset = 3;
        XmNrightOffset = 3;
        XmNresizable = true;
        XmNx = 3;
        XmNy = 218;
        XmNwidth = 124;
        XmNheight = 48;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_exitButton);
        XmNactivateCallback = procedure BxExitCB(0);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object setup_arrowButton : XmArrowButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNarrowDirection = XmARROW_DOWN;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNtopPosition = 16;
        XmNbottomPosition = 52;
        XmNleftPosition = 263;
        XmNrightPosition = 306;
        XmNtopOffset = 0;
        XmNleftOffset = 0;
        XmNx = 105;
        XmNy = 13;
        XmNwidth = 17;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_setup_arrowButton);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object stop_arrowButton : XmArrowButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNarrowDirection = XmARROW_DOWN;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNtopPosition = 82;
        XmNbottomPosition = 117;
        XmNleftPosition = 263;
        XmNrightPosition = 306;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNx = 105;
        XmNy = 68;
        XmNwidth = 17;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_stop_arrowButton);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object display_arrowButton : XmArrowButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNarrowDirection = XmARROW_DOWN;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNtopPosition = 147;
        XmNbottomPosition = 182;
        XmNleftPosition = 263;
        XmNrightPosition = 306;
        XmNtopOffset = 0;
        XmNrightOffset = 0;
        XmNx = 105;
        XmNy = 121;
        XmNwidth = 17;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_display_arrowButton);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};

object process_arrowButton : XmArrowButton widget {
    arguments {
        arguments Buttonlook;
        XmNbackground = color('Papaya Whip');
        XmNhighlightThickness = 0;
        XmNshadowThickness = 0;
        XmNarrowDirection = XmARROW_DOWN;
        XmNtopAttachment = XmATTACH_POSITION;
        XmNbottomAttachment = XmATTACH_POSITION;
        XmNleftAttachment = XmATTACH_POSITION;
        XmNrightAttachment = XmATTACH_POSITION;
        XmNtopPosition = 212;
        XmNbottomPosition = 249;
        XmNleftPosition = 263;
        XmNrightPosition = 306;
        XmNbottomOffset = 0;
        XmNleftOffset = 0;
        XmNx = 105;
        XmNy = 175;
        XmNwidth = 17;
    };
    controls {
    };
    callbacks {
        callbacks ButtonlookReasons;
        MrmNcreateCallback = procedure BxGlobalWidgetId(BXG_process_arrowButton);
    };
!(BX)    handlers {
!(BX)        handlers ButtonlookHandlers;
!(BX)    };
};
end module;
