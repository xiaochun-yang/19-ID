#
#                        Copyright 2001
#                              by
#                 The Board of Trustees of the 
#               Leland Stanford Junior University
#                      All rights reserved.
#
#                       Disclaimer Notice
#
#     The items furnished herewith were developed under the sponsorship
# of the U.S. Government.  Neither the U.S., nor the U.S. D.O.E., nor the
# Leland Stanford Junior University, nor their employees, makes any war-
# ranty, express or implied, or assumes any liability or responsibility
# for accuracy, completeness or usefulness of any information, apparatus,
# product or process disclosed, or represents that its use will not in-
# fringe privately-owned rights.  Mention of any product, its manufactur-
# er, or suppliers shall not, nor is it intended to, imply approval, dis-
# approval, or fitness for any particular use.  The U.S. and the Univer-
# sity at all times retain the right to use and disseminate the furnished
# items for any purpose whatsoever.                       Notice 91 02 01
#
#   Work supported by the U.S. Department of Energy under contract
#   DE-AC03-76SF00515; and the National Institutes of Health, National
#   Center for Research Resources, grant 2P41RR01209. 
#

package require DCSRunField
package require DCSSpreadsheet

proc STRING_initialize {} {
    variable ::nScripts::STRING
	#reset the status on startup

    set localCopy $STRING

    if {[::DCS::RunField::getField localCopy status] == "collecting"} {
        ::DCS::RunField::setField localCopy status "paused"

        set STRING $localCopy
    }
}


#### integrity checking
proc STRING_configure { args } {
    variable ::nScripts::STRING

    set ll [llength $args]
    if {$ll != [::DCS::RunField::getNumField]} {
        log_error "wrong length ($ll != [::DCS::RunField::getNumField]) of run definition {$args}"
        return $STRING
    }


    set contents $args
    set anyChange 0

    foreach {fileRoot directory startAngle endAngle delta wedgeSize \
    motorName exposureTime attenuation} [::DCS::RunField::getList contents \
    file_root directory start_angle end_angle delta wedge_size \
    axis_motor exposure_time attenuation] break

    set newValue [TrimStringForCrystalID $fileRoot]
    if {$newValue != $fileRoot} {
        log_warning file root changed from $fileRoot to $newValue
        incr anyChange
        set fileRoot $newValue
    }

    set newValue [TrimStringForRootDirectoryName $directory]
    if {$newValue != $directory} {
        log_warning direcotry changed from $directory to $newValue
        incr anyChange
        set directory $newValue
    }

    set newDelta $delta
    if {$delta > 179.99} {
        set newDelta 179.99
    }
    if {$delta <= 0.0} {
        set newDelta 0.01
    }
    if {abs($newDelta - $delta) > 0.001} {
        log_warning delta changed from $delta to $newDelta
        incr anyChange
        set delta $newDelta
    }

    
    if {$delta > $wedgeSize} {
        set newWedgeSize $delta
    } else {
        set newWedgeSize [expr int($wedgeSize / $delta) * $delta]
    }

    if {abs($newWedgeSize - $wedgeSize) > 0.001} {
        log_warning wedge size changed from $wedgeSize to $newWedgeSize
        incr anyChange
        set wedgeSize $newWedgeSize
    }

    set numFrames [expr int(($endAngle - $startAngle) / $delta - 0.01) + 1]
    set newEndAngle [expr $numFrames * $delta + $startAngle]
    if {abs($newEndAngle - $endAngle) > 0.001} {
        log_warning end angle changed from $endAngle to $newEndAngle
        incr anyChange
        set endAngle $newEndAngle
    }

    set newMotorName $motorName
    if {$newMotorName != "Phi" && $newMotorName != "Omega"} {
        set newMotorName "Phi"
        log_warning axis_motor changed from $motorName to $newMotorName
        incr anyChange
        set motorName $newMotorName
    }

    ### get default, min and max from collect_default
    variable collect_default

    ### string collect_default has its own integraty check
    if {[info exists collect_default]} {
        foreach {dummy1 timeDefault attDefault timeMin timeMax attMin attMax} \
        $collect_default break
        puts "time default: $timeDefault min: $timeMin max: $timeMax"
        puts "attenuation default: $attDefault min: $attMin max: $attMax"
    } else {
        ### hardcode value
        set timeDefault 1.0
        set timeMin 1
        set timeMax 2000
        set attDefault 0
        set attMin 0
        set attMax 100
    }

    if {$exposureTime < $timeMin} {
        log_warning exposure time must not be less than min $timeMin
        set exposureTime $timeMin
        log_warning exposure time resetted to $exposureTime
        incr anyChange
    } elseif {$exposureTime > $timeMax} {
        log_warning exposure time must not be bigger than max $timeMax
        set exposureTime $timeMax
        log_warning exposure time resetted to $exposureTime
        incr anyChange
    }

    if {$attenuation < $attMin} {
        log_warning attenuation must not be less than min $attMin
        set attenuation $attMin
        log_warning attenuation resetted to $attenuation
        incr anyChange
    } elseif {$attenuation > $attMax} {
        log_warning attenuation must not be bigger than max $attMax
        set attenuation $attMax
        log_warning attenuation resetted to $attenuation
        incr anyChange
    }
    

    runDefinitionCheckEnergyAndDistance STRING $contents
    
    set result $args
    if {$anyChange} {
        ::DCS::RunField::setList contents \
        file_root       $fileRoot \
        directory       $directory \
        end_angle       $endAngle \
        delta           $delta \
        wedge_size      $wedgeSize \
        axis_motor      $motorName \
        exposure_time   $exposureTime \
        attenuation     $attenuation

        set result $contents
    }
    runDefinitionUpdateTimer STRING $result
	return $result
}
####################################
# this part is not template
####################################
proc runDefinitionUpdateTimer { runName_ contents_ } {
    variable collect_config
    set runTimerEnabled [lindex $collect_config 7]

    if {$runTimerEnabled == "1"} {
        if {[catch {
            foreach {next runLabel first startAngle endAngle delta wedgeSize \
            exposureTime attenuation numE e1 e2 e3 e4 e5 inv mode } [::DCS::RunField::getList contents_ \
            next_frame run_label start_frame start_angle end_angle delta wedge_size \
            exposure_time attenuation num_energy energy1 energy2 energy3 energy4 energy5 inverse_on \
            detector_mode ] break

            set run [string range $runName_ 3 end]

            variable beamlineID
            runTimer_start $next $run $runLabel $first $startAngle $endAngle $delta $wedgeSize $exposureTime \
            $attenuation $numE $e1 $e2 $e3 $e4 $e5 $inv $mode $beamlineID
        } errMsg]} {
            log_severe runTimer update failed: $errMsg
            variable run_time_estimates
            set run [string range $runName_ 3 end]
            set run_time_estimates \
            [setStringFieldWithPadding $run_time_estimates $run ""]
        }
    }
}

proc runDefinitionCheckEnergyAndDistance { runName_ contents_ {inString 1}} {
    if {$contents_ == "NULL" || $contents_ == ""} {
        variable $runName_
        set localCopy [set $runName_]
    } else {
        set localCopy $contents_
    }

    foreach { \
    runStatus \
    numEnergy e1 e2 e3 e4 e5 \
    detectorDistance \
    } [::DCS::RunField::getList localCopy \
    status \
    num_energy energy1 energy2 energy3 energy4 energy5 \
    distance \
    ] break

    if {$runStatus == "disabled" || $runStatus == "complete"} {
        return 1
    }

    ###here we should not use gMotorEnergy to be consistent with hutch tab
    ### energy, only give warnings, no auto-correction
    ### the collecting will not run with wrong settings.
    ### this way to prevent user from running with a bad auto-corrected value.
    set allOK 1
    if {[isMotor energy]} {
        foreach {lowerLimit upperLimit} [getGoodLimits energy] break

        for {set i 1} {$i <= $numEnergy} {incr i} {
            set eName e$i
            set e [set $eName]
            if {$e < $lowerLimit || $e > $upperLimit} {
                set allOK 0
                log_error $runName_ energy$i $e exceeds limits: \
                $lowerLimit to $upperLimit
            }
        }
    }

    ### distance, only warning, no auto-correction
    global gMotorDistance
    if {[isMotor $gMotorDistance]} {
        foreach {lowerLimit upperLimit} [getGoodLimits $gMotorDistance] break
        if {$detectorDistance < $lowerLimit \
        || $detectorDistance > $upperLimit} {
            set allOK 0
            log_error $runName_ distance $detectorDistance \
            exceeds limits: \
            $lowerLimit to $upperLimit

        }
    }
    if {$allOK && $inString} {
        log_note $runName_ changed
    }
    return $allOK
}
