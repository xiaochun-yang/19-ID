########################################################
#
# This makefile should work with gmake 3.8
# Downloaded from http://ftp.gnu.org/pub/gnu/make/
#
########################################################

# Set the default target for this makefile. Put it 
# way up here to make sure that it's the first target
# defined in this makefile.


####################################3
# undefine this if you plan to use old cbf without PILATUS detector support
#yangx SUPPORT_MINICBF=TRUE
SUPPORT_MINICBF=TRUE

ifeq ($(OS),Windows_NT)
default:
	@echo diffimage library is not supprted on Windows platform
else
default: diffimage test getImgHeader
endif

PROJ_NAME = diffimage
PROJ_VERSION	 = head
DEBUG=TRUE
########################################################
#
# DEBUG or RELEASE
# Set DEBUG to TRUE by setting env variable DEBUG=TRUE
#
########################################################

ifeq ($(DEBUG),TRUE)
DEBUG = TRUE
else
DEBUG = FALSE
endif 

########################################################
#
# PURIFY
# Set PURIFY to TRUE by setting env variable PURIFY=TRUE
#
########################################################

ifeq ($(PURIFY),TRUE)
PURIFY = TRUE
DEBUG=TRUE
else
PURIFY = FALSE
endif 

########################################################
#
# Figuring out the platform on which gmake is executed.
# From this point onwards, we will rely on the variable 
# MACHINE for platform specific stuff.
#
########################################################

ifeq ($(OS),Windows_NT)
MACHINE = nt
else

# Assuming that we now must be using some UNIX/Linux flavour
os := $(shell uname)

ifeq ($(os),OSF1)
MACHINE = decunix
else
ifeq ($(os),IRIX64)
MACHINE = irix
else
ifeq ($(os),Linux)

# Check what flavour of hardware we are running Linux on
mach := $(shell uname -m)

ifeq ($(mach),i686)
MACHINE = linux
else
ifeq ($(mach),x86_64)
MACHINE = linux64
else
ifeq ($(mach),ia64)
MACHINE = ia64
endif
endif
endif
endif
endif
endif
endif


########################################################
# NT 
# Note that by default the library will be build with 
# the multi-threaded or debug multi-threaded option 
# (-MT or -MTd).
########################################################

ifeq ($(MACHINE),nt)

SLASH	= /
CC      = cl
CXX     = cl
LINK    = link
LDFLAGS	=
EXEFLAGS = -nologo -subsystem:console -incremental:no -machine:I386
RM	= rm -rf
MKDIR	= mkdir
CP 	= copy
CFLAGS	= -nologo -W3 -GR -GX -DWIN32 -D_MBCS -D_LIB -Fd"$(MACHINE)$(SLASH)" -FD -c -Fo"$*.o"
CPPFLAGS =
LIBEXT	= .lib
EXEEXT  = .exe

ifeq ($(DEBUG),TRUE)
CFLAGS += -MTd -Gm -ZI -Od -GZ -D_DEBUG
else
CFLAGS += -MT -O2 -DXOS_PRODUCTION_CODE -DNDEBUG
endif


INC		+=
STD_LIBS 	+= wsock32.lib user32.lib

# JPEG directory
JPEG_DIR =
JPEG_INCLUDE =
JPEG_LIB = 

ifeq ($(SUPPORT_MINICBF),TRUE)
# CBF directory
CBF_DIR = ../cbflib
else
CBF_DIR = ../cbf
endif
CBF_INCLUDE = -I$(CBF_DIR)/include
CBF_LIB = $(CBF_DIR)/lib/$(MACHINE)/libcbf.a

else

########################################################
#
# Any Unix
#
########################################################

SLASH = /
RM	= rm -rf
MKDIR	= mkdir -p
CP 	= cp -R
CFLAGS += -o $@
CPPFLAGS =
LIBEXT	= .a
EXEEXT  =

DOXYGEN_EXE = /home/penjitk/software/doxygen/$(MACHINE)/doxygen-1.3/bin/doxygen
DOT_EXE = /home/penjitk/software/graphviz/$(MACHINE)/graphviz_1.8/bin/dot
WWW_DOC_DIR = /home/webserverroot/secure/staff_pages/projects/packages/$(PROJ_NAME)


# CBF directory
ifeq ($(SUPPORT_MINICBF),TRUE)
CBF_DIR = ../cbflib
else
CBF_DIR = ../cbf
endif

CBF_INCLUDE = -I$(CBF_DIR)/include
CBF_LIB = $(CBF_DIR)/lib/$(MACHINE)/libcbf.a

ifeq ($(DEBUG),TRUE)
CFLAGS += -g
else
CFLAGS += -DNDEBUG -O -DXOS_PRODUCTION_CODE
endif



ifeq ($(MACHINE),decunix)

########################################################
# decunix 
########################################################

CC = cxx
CXX = cxx
LINK = cxx
TEMPLATES_DIR = ./$(MACHINE)/cxx_repository
TEMPLATES_OBJS = $(TEMPLATES_DIR)/*.o
CFLAGS += -c -ptr $(TEMPLATES_DIR) -w1 -pthread -DDEC_UNIX -DSEC_BASE -DSEC_NET
CPPFLAGS = -x cxx

# For building exe
LDFLAGS = -ptr $(TEMPLATES_DIR) \
		-ptr $(XOS_CPP_DIR)$(SLASH)$(MACHINE)$(SLASH)cxx_repository \
		-ptr $(MACHINE)$(SLASH)cxx_repository
		
STD_LIBS += -lm -lrt -lpthread -lc -lmach -lexc
STD_INC = -I/usr/include/cxx \
           -I/usr/local/include

# JPEG directory
JPEG_DIR = /home/code/jpeg-6b/release/$(MACHINE)
JPEG_INCLUDE = -I$(JPEG_DIR)
JPEG_LIB = $(JPEG_DIR)/libjpeg.a

# jpegsoc library
JPEGSOC_DIR = ../jpegsoc
JPEGSOC_INCLUDE = -I$(JPEGSOC_DIR)/src
JPEGSOC_LIB = $(JPEGSOC_DIR)/$(MACHINE)/jpegsoc_applack$(LIBEXT)

# Image Magick library
ifeq ($(IMAGEMAGICK_MARKUP),TRUE)
MAGICK_DIR = /data5/penjitk/download/nick_imgsrv/ImageMagick-6.3.2
MAGICK_INCLUDE = -I$(MAGICK_DIR) -I$(MAGICK_DIR)/Magick++/lib
MAGICK_LIB = $(MAGICK_DIR)/$(MACHINE)/libMagick++.a $(MAGICK_DIR)/$(MACHINE)/libWand.a $(MAGICK_DIR)/$(MACHINE)/libMagick.a
CFLAGS += -DIMAGEMAGICK_MARKUP -D__USE_STD_IOSTREAM
LDFLAGS += -ptr $(MAGICK_DIR)$(SLASH)$(MACHINE)$(SLASH)cxx_repository
endif

endif

########################################################
# irix 
########################################################

ifeq ($(MACHINE),irix)
ifeq ($(PURIFY),TRUE)
CC      = purify CC
CXX     = purify CC
LINK    = purify CC
else
CC      = CC
CXX     = CC
LINK    = CC
endif
CFLAGS += -c -DIRIX -DPTHREADS -DSEC_BASE -DSEC_NET -D__host_mips -xc++ -MP:dsm=off -LANG:std -LANG:exceptions -no_prelink -ptused
CPPFLAGS =
LDFLAGS =
STD_LIBS += -lC -lc -lm -lpthread
STD_INC  = -I/usr/include \
           -I/usr/local/include

# JPEG directory
JPEG_DIR = ../jpeg-6b
JPEG_INCLUDE = -I$(JPEG_DIR)
JPEG_LIB = $(JPEG_DIR)/libjpeg.a

# jpegsoc library
JPEGSOC_DIR = ../jpegsoc
JPEGSOC_INCLUDE = -I$(JPEGSOC_DIR)/src
JPEGSOC_LIB = ${JPEGSOC_DIR}/$(MACHINE)/jpegsoc_applack$(LIBEXT)

# Image Magick library
#MAGICK_DIR = /data5/penjitk/download/nick_imgsrv/ImageMagick-6.3.2
ifeq ($(IMAGEMAGICK_MARKUP),TRUE)
MAGICK_DIR = /data5/penjitk/download/nick_imgsrv/project_sources/ImageMagick-6.3.1
MAGICK_INCLUDE = -I$(MAGICK_DIR) -I$(MAGICK_DIR)/Magick++/lib
MAGICK_LIB = $(MAGICK_DIR)/$(MACHINE)/libMagick++.a $(MAGICK_DIR)/$(MACHINE)/libWand.a $(MAGICK_DIR)/$(MACHINE)/libMagick.a
CFLAGS += -DIMAGEMAGICK_MARKUP
endif

endif


ifeq ($(MACHINE),linux)

########################################################
# linux 
########################################################

ifeq ($(PURIFY),TRUE)
CC      = purify g++
CXX     = purify g++
LINK    = purify g++
else
CC      = g++
CXX     = g++
LINK    = g++
endif
CFLAGS  += -fexceptions -c -DLINUX -pthread -D_REENTRANT
CPPFLAGS =
LDFLAGS =
STD_LIBS += -lm -lrt -lpthread -lc

# JPEG directory
JPEG_DIR =
JPEG_INCLUDE =
JPEG_LIB = -ljpeg

# jpegsoc library
JPEGSOC_DIR = ../jpegsoc
JPEGSOC_INCLUDE = -I$(JPEGSOC_DIR)/src
JPEGSOC_LIB = ${JPEGSOC_DIR}/$(MACHINE)/jpegsoc_applack$(LIBEXT)

# Image Magick library
ifeq ($(IMAGEMAGICK_MARKUP),TRUE)
MAGICK_DIR =
MAGICK_INCLUDE =
MAGICK_LIB = -lMagick++ -lWand -lMagick
CFLAGS += -DIMAGEMAGICK_MARKUP
endif

# Support for PNG
ifeq ($(DIFFIMAGE_HAVE_PNG_Z),TRUE)
PNG_DIR =
PNG_INCLUDE =
PNG_LIB = -lpng
CFLAGS += -DDIFFIMAGE_HAVE_PNG_Z
endif

endif

ifeq ($(MACHINE),linux64)

########################################################
# linux x86_64
########################################################

ifeq ($(PURIFY),TRUE)
CC      = purify g++
CXX     = purify g++
LINK    = purify g++
else
CC      = g++
CXX     = g++
LINK    = g++
endif
CFLAGS  += -fexceptions -c -fPIC -DLINUX -pthread -D_REENTRANT
CPPFLAGS =
LDFLAGS =
STD_LIBS += -lm -lrt -lpthread -lc

# JPEG directory
JPEG_DIR =
JPEG_INCLUDE =
JPEG_LIB = -ljpeg

# jpegsoc library
JPEGSOC_DIR = ../jpegsoc
JPEGSOC_INCLUDE = -I$(JPEGSOC_DIR)/src
JPEGSOC_LIB = ${JPEGSOC_DIR}/$(MACHINE)/jpegsoc_applack$(LIBEXT)

endif

ifeq ($(MACHINE),ia64)

########################################################
# linux ia64
########################################################

ifeq ($(PURIFY),TRUE)
CC      = purify g++
CXX     = purify g++
LINK    = purify g++
else
CC      = g++
CXX     = g++
LINK    = g++
endif
CFLAGS  += -fexceptions -c -fPIC -DLINUX -pthread -D_REENTRANT
CPPFLAGS =
LDFLAGS =
STD_LIBS += -lm -lrt -lpthread -lc

# JPEG directory
JPEG_DIR =
JPEG_INCLUDE =
JPEG_LIB = -ljpeg

# jpegsoc library
JPEGSOC_DIR = ../jpegsoc
JPEGSOC_INCLUDE = -I$(JPEGSOC_DIR)/src
JPEGSOC_LIB = ${JPEGSOC_DIR}/$(MACHINE)/jpegsoc_applack$(LIBEXT)

endif


#endif any unix
endif


########################################################
# directory macros
########################################################

# source directory
SRC_DIR = .$(SLASH)src
TEST_DIR = .$(SLASH)src

DIFFIMAGE_LIB = diffimage$(LIBEXT)


########################################################
# Local liraries
########################################################

# XOS
XOS_DIR = ..$(SLASH)xos
XOS_INCLUDE = -I${XOS_DIR}$(SLASH)src
XOS_LIB = $(XOS_DIR)$(SLASH)$(MACHINE)$(SLASH)libxos$(LIBEXT)

# XOS
XOS_CPP_DIR = ..$(SLASH)xos_cpp
XOS__CPP_INCLUDE = -I${XOS_CPP_DIR}$(SLASH)src
XOS_CPP_LIB = $(XOS_CPP_DIR)$(SLASH)$(MACHINE)$(SLASH)libxos-cpp$(LIBEXT)

# logging
LOGGING_DIR = ..$(SLASH)logging
LOGGING_INCLUDE = -I${LOGGING_DIR}$(SLASH)src
LOGGING_LIB = $(LOGGING_DIR)$(SLASH)$(MACHINE)$(SLASH)liblogging$(LIBEXT)

# XOS_CPP
XOS_CPP_DIR = ..$(SLASH)xos_cpp
XOS_CPP_INCLUDE = -I${XOS_CPP_DIR}$(SLASH)src
XOS_CPP_LIB = $(XOS_CPP_DIR)$(SLASH)$(MACHINE)$(SLASH)libxos-cpp$(LIBEXT)

########################################################
# Include directories
########################################################


INC +=  -I$(SRC_DIR) \
	$(XOS_INCLUDE) \
	$(MAGICK_INCLUDE) \
	$(LOGGING_INCLUDE) \
	$(XOS_CPP_INCLUDE) \
	$(JPEGSOC_INCLUDE) \
	$(JPEG_INCLUDE) \
	$(PNG_INCLUDE) \
	$(CBF_INCLUDE) \
	$(STD_INC)
	



########################################################
# Libraries
########################################################

LIBS += $(XOS_CPP_LIB) \
	$(CBF_LIB) \
	$(JPEGSOC_LIB) \
	$(MAGICK_LIB)  \
	$(LOGGING_LIB) \
	$(XOS_LIB) \
	$(JPEG_LIB) \
	$(PNG_LIB) \
	$(STD_LIBS)


########################################################
# Object files
########################################################

ifeq ($(IMAGEMAGICK_MARKUP),TRUE)
test_objs =	  $(MACHINE)/test1.o
endif

objs =	  $(MACHINE)/diffimage.o \
		  $(MACHINE)/libimage.o \
		  $(MACHINE)/mar165.o \
		  $(MACHINE)/cbf.o \
		  $(MACHINE)/marheader.o \
		  $(MACHINE)/image_wrapper_polymorphic.o
		  
ifeq ($(SUPPORT_MINICBF),TRUE)
objs +=	$(MACHINE)/minicbf.o
endif
ifeq ($(IMAGEMAGICK_MARKUP),TRUE)
objs +=		  $(MACHINE)/markup_parse.o \
		  $(MACHINE)/markup_circleblock.o
endif


ifeq ($(DIFFIMAGE_HAVE_PNG_Z),TRUE)
objs +=		  $(MACHINE)/write_png.o
endif

getImgHeader_objs = $(MACHINE)/getImgHeader.o

########################################################
#
# Targets
#
########################################################


# Object files

$(MACHINE)/diffimage.o: $(SRC_DIR)$(SLASH)diffimage.c
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<
 
ifeq ($(SUPPORT_MINICBF),TRUE)
$(MACHINE)/libimage.o: $(SRC_DIR)$(SLASH)libimage.c $(SRC_DIR)$(SLASH)libimage.h
	$(CXX) -DSUPPORT_MINICBF $(CFLAGS) $(CPPFLAGS) $(INC) $<
else
$(MACHINE)/libimage.o: $(SRC_DIR)$(SLASH)libimage.c $(SRC_DIR)$(SLASH)libimage.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<
endif

$(MACHINE)/mar165.o: $(SRC_DIR)$(SLASH)mar165.c $(SRC_DIR)$(SLASH)mar165.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<

$(MACHINE)/cbf.o: $(SRC_DIR)$(SLASH)cbf.c $(SRC_DIR)$(SLASH)cbf.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<

$(MACHINE)/minicbf.o: $(SRC_DIR)$(SLASH)minicbf.c $(SRC_DIR)$(SLASH)minicbf.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<

$(MACHINE)/getImgHeader.o: $(SRC_DIR)$(SLASH)getImgHeader.cpp
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<

$(MACHINE)/marheader.o: $(SRC_DIR)$(SLASH)marheader.c $(SRC_DIR)$(SLASH)marheader.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<
	
$(MACHINE)/image_wrapper_polymorphic.o: $(SRC_DIR)$(SLASH)image_wrapper_polymorphic.cpp $(SRC_DIR)$(SLASH)image_wrapper_polymorphic.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<

$(MACHINE)/markup_parse.o: $(SRC_DIR)$(SLASH)markup_parse.cpp $(SRC_DIR)$(SLASH)markup.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<
	
$(MACHINE)/markup_circleblock.o: $(SRC_DIR)$(SLASH)markup_circleblock.cpp $(SRC_DIR)$(SLASH)markup.h $(SRC_DIR)$(SLASH)point_t.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<
	
ifeq ($(IMAGEMAGICK_MARKUP),TRUE)
$(MACHINE)/test1.o: $(SRC_DIR)$(SLASH)test1.cpp $(SRC_DIR)$(SLASH)markup.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<
endif	

ifeq ($(DIFFIMAGE_HAVE_PNG_Z),TRUE)
$(MACHINE)/write_png.o: $(SRC_DIR)$(SLASH)write_png.cpp $(SRC_DIR)$(SLASH)write_png.h
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(INC) $<
endif	

# Printing out gmake info
showinfo:
	@echo ...
	@echo ...
	@echo   
	-@gmake -version
	@echo To support markup with with IMAGEMAGICK_MARKUP=TRUE option
	@echo ...
	@echo ...  

# Create the target directory

makedir:
	-@$(MKDIR) $(MACHINE)



# Cleaning the output files. Can be used before re-build all.

clean: 
	-@$(RM) $(MACHINE)$(SLASH)*.o
	-@$(RM) $(MACHINE)$(SLASH)*.idb
	-@$(RM) $(MACHINE)$(SLASH)*.pdb
	-@$(RM) $(MACHINE)$(SLASH)*.d
	-@$(RM) $(MACHINE)$(SLASH)test
	-@$(RM) $(MACHINE)$(SLASH).pure.*
	-@$(RM) $(MACHINE)$(SLASH)*$(LIBEXT)
	-@$(RM) $(MACHINE)$(SLASH)ii_files
	-@$(RM) $(MACHINE)$(SLASH)cxx_repository


# exe target


diffimage: showinfo makedir $(objs)
	@echo ...
	@echo Making $(DIFFIMAGE_LIB)
	@echo ...
ifeq ($(MACHINE),nt)
	 $(LINK) -lib $(LDFLAGS) -out:"$(MACHINE)$(SLASH)$(DIFFIMAGE_LIB)" $(objs)
else
	ar -vr $(MACHINE)$(SLASH)$(DIFFIMAGE_LIB) $(objs)
	-ranlib $(MACHINE)$(SLASH)$(DIFFIMAGE_LIB) 
endif


test: $(test_objs)
ifeq ($(IMAGEMAGICK_MARKUP),TRUE)
ifeq ($(MACHINE),nt)
	 $(LINK) $(EXEFLAGS) -out:"$(MACHINE)$(SLASH)$@$(EXEEXT)" $(LDFLAGS) $(test_objs) $(MACHINE)$(SLASH)$(DIFFIMAGE_LIB) $(LIBS)  
else
	$(LINK) -o $(MACHINE)/$@$(EXEEXT) $(LDFLAGS) $(test_objs) $(MACHINE)$(SLASH)$(DIFFIMAGE_LIB) $(LIBS)
endif
endif


getImgHeader: $(getImgHeader_objs)
ifeq ($(MACHINE),nt)
	 $(LINK) $(EXEFLAGS) -out:"$(MACHINE)$(SLASH)$@$(EXEEXT)" $(LDFLAGS) $(getImgHeader_objs) $(LIBS)
else
	 $(LINK) -o $(MACHINE)$(SLASH)$@$(EXEEXT) $(LDFLAGS) $(getImgHeader_objs) $(MACHINE)$(SLASH)$(DIFFIMAGE_LIB) $(LIBS)
endif


# document target


cleandoc: 
	-@$(RM) doc$(SLASH)$(PROJ_VERSION)
	-@$(RM) doc$(SLASH)log.txt
	-@$(RM) doc$(SLASH)$(PROJ_NAME).tag

install: diffimage doc
	-$(RM) $(WWW_DOC_DIR)$(SLASH)html
	-$(MKDIR) $(WWW_DOC_DIR)$(SLASH)doc
	-$(MKDIR) $(WWW_DOC_DIR)$(SLASH)doc$(SLASH)$(PROJ_VERSION)
	-$(MKDIR) $(WWW_DOC_DIR)$(SLASH)doc$(SLASH)$(PROJ_VERSION)$(SLASH)html
	$(CP) .$(SLASH)doc$(SLASH)$(PROJ_VERSION)$(SLASH)html$(SLASH)* $(WWW_DOC_DIR)$(SLASH)doc$(SLASH)$(PROJ_VERSION)$(SLASH)html
	

./doc/$(PROJ_VERSION)/html/index.html: $(objs)
	-@$(MKDIR) .$(SLASH)doc$(SLASH)$(PROJ_VERSION)
	-$(DOXYGEN_EXE) .$(SLASH)doc$(SLASH)doxygen.cfg
	
doc: ./doc/$(PROJ_VERSION)/html/index.html
	


