Impersonation DHS
=================


1. Installation Guide
   ------------------

impdhs runs as part of the dcs system. It should be installed under the same 
parent directory as the dcss and dcsconfig directories.



2. Running Guide
   -------------

>cd impdhs/<machine>
>./impdhs <beamline>

where 
machine: Either irix, linux or decunix
beamline: Name of the beamline this dhs is connecting to. The dhs uses the beamline
          name to look up a config file to obtains the rest of the configuration
          data, including which machine and port number of the dcss. Note that it's
          important that you run it from impdhs/<machine> directory since the program
          searches for the config files using a relative path.
          
          
          
          
3. Configuration Guide
   -------------------

At Start up, impdhs reads a beamline name from the command-line argument.
It then loads config files <beamline name>.config and default.config
from ../../dcsconfig/data directory. For example, if the beamline name is blctlxxsim,
the config file will be ../../dcsconfig/datablctlxxsim.config. The section in the 
config file relevant to impdhs is as follows:

# imperson dhs
impdhs.name=imperson
impdhs.tmpDir=/tmp
impdhs.choochBinDir=/tmp/autochooch/bin
impdhs.choochDatDir=/tmp/autochooch/data
impdhs.cameraHost=smb.slac.stanford.edu
impdhs.cameraPort=80

where

impdhs.name: Name of the dhs that will be registered with the dcss.
impdhs.tmpDir: Directory to which autochooch scripts will write intermediate files.
impdhs.choochBinDir: Directory where autochooch scripts can be found, for example,
                     /<dcsdir>/autochooch/<machine>.
impdhs.choochDatDir: Directory where autochooch data can be found, for example,
                     /<dcsdir>/autochooch/data.
impdhs.cameraHost: Host name of the camera server. Used by the snap operation.
impdhs.cameraPort= Port number of the camera server. Used by the snap operation.


Because impdhs execute the operation via the impersonation server, it requires 
configuration data about the impersonation server. This data is in default.config
as shown below:

# impersoanation server
imperson.host=smb.slac.stanford.edu
imperson.port=61001

where
imperson.host: Host name of the impersonation server.
imperson.port: Port number for the impersonation server.



4. Programming Guide
   -----------------

The dhs supports the following operations:

runAutochooch
snap


4.1 runAutochooch
    -------------

This operation runs autochooch scripts on a remote computer on behalf of the user. Output files
are saved in the user's directory and also in dcss directory (readable by the dcss's scripting 
engine so that data can be shared among Blu-Ice conecting to the dcss). 

Request:

stoh_start_operation runAutochooch <operationHandle> <user> <sessionId> <userDir> <rootFileName> <dcssUser> <dcssSessionId> <dcssDir> <atom> <edge> <beamline> <datapoints>


where
operationId: unique id for the operation assigned by the dcss.
user: login name of the user
sessionId: sesion id for this user generated by the authentication server.
atom: two-letter name of the heavy atom
edge: the absorption edge such as K, L, M
beamline: name of the beam line. The autochooch script run by the impdhs will 
	load beamline parameters from file <beamline>.par in the directory
	defined by impdhs.choochDatDir config in the config file described 
	above.
datapoints: fluorescence scan datapoints. Each datapoint consists of x and y value. 
            Each x and y value is separated by a space and each datapoint is also
            separated by a space. The whole data set is enclosed by curly brackets.
            For example, {x1 y1 x2 y2 x3 y3 ... xn yn}
            
For example:
stoh_start_operation runAutochooch 1.4 joeuser 8DD55C62FAB174C8F5683C988AD2AC73 /data/joeuser/autochooch dataset4 penjitk 5ADF834A11E1BBA55BF88EAE484EFD0C /data/penjitk/dcss Se K blctlxxsim {12458.0 1204.14653412 12488.0 1134.92732047 12508.0 1304.57549481 12526.5 ...}

Response:

htos_operation_update runAutochooch <operationId> <scan file> <smooth_exp file> <smooth_norm file>

is sent after Benny_auto is run and before htos_operation_completed is sent,

where
scan file: scan data
smooth_exp file: smoothed scan data  generated by Benny_auto
smooth_norm file: smoothed normalised scan data generated by Benny_auto

For example,
htos_operation_update runAutochooch 1.4 /data/penjitk/dcss/scanblctlxxsim_1.40 /data/penjitk/dcss/smooth_expblctlxxsim_1.40.bip /data/penjitk/dcss/smooth_normblctlxxsim_1.40.bip


Respose: 

htos_operation_completed runAutochooch 1.0 normal <inflectionE> <inflectionFP> <inflectionFPP> <peakE> <peakFP> <peakFPP> <remoteE> <remoteFP> <remoteFPP> <scan file> <smooth_exp file> <smooth_norm file> 
where

inflectionEnergy: Inflection energy
inflectionFP: FP value at the inflection energy
inflectionFPP: FPP value at the inflection energy
peakEnergy: Peak energy
peakFP: FP value at the peak energy
peakFPP: FPP value at the peak energy
remoteEnergy: Remote energy
remoteFp: FP value at the remote energy
remoteFpp: FPP value at the remote energy
scan file: scan data
smooth_exp file: smoothed scan data  generated by Benny_auto
smooth_norm file: smoothed normalised scan data generated by Benny_auto
fp_fpp file: f' f'' file


Response:

htos_operation_completed <operation id> error <error string>

For example:

htos_operation_completed 1.0 error Missing choochBinDir in property file


4.2 snap
    ----
The snap operation takes a snap shot of the video stream of the given camera.
The image is saved as a jpeg and save in a file owned by the user.

Request

stoh_start_operation snap <operationHandle> <user> <sessionId> <cameraName> <outputfileName>

operationId: unique id for the operation assigned by the dcss.
user: login name of the user
sessionId: sesion id for this user generated by the authentication server.
cameraName: predefined camera name known to the camera server. See the configuration 
            section about the camera server host and port.
outputfileName: Name of output file to save the jpeg image.

Response


htos_operation_completed <operation id> normal
htos_operation_completed <operation id> error <error string>


4.3 writeExcitationScanFile
    -----------------------
    
This operation takes a list of excitation scan datapoints and writes them 
out to a file in bip format.

Request 

writeExcitationScanFile <operationId> <user> <sessionId> <fullPathName> <percentDeadTime> <referenceCounts> <delta> {num0 num1 num2 num3 ... numN}

where
operationId: unique id for the operation assigned by the dcss.
user: login name of the user
sessionId: sesion id for this user generated by the authentication server.
FullPathName: File path to save the bip file.
percentDeadTime: Not used at the moment
referenceCounts: Not used at the moment
delta Used to generate a series of x values where x starts from x[0]=delta/2.0, x[1]=x[0]+delta, ...x[n]=x[n-1]+delta
{num0 num1 num2 num3 ... numN}: Y values

For example

stoh_start_operation writeExcitationScanFile penjitk DE843E7709D490B1E7F6D9DD1E727200 /data/penjitk/impdhs/excitationScan.bip 8.0 1000 25.0 {1000.0 1001.0 1002.0 1003.0 1004.0 1005.0 1006.0 1007.0 1008.0 1009.0 1010.0}


Response

htos_operation_completed <operation id> normal
htos_operation_completed <operation id> error <error string>


4.4 getNextFileIndex
    ----------------
    
This operation returns the next index for the given file pattern. Filename 
is expected to be in <prefix><number>.<extension> format. For example, let's say a 
directory /data/penjitk/dataset/test1 contains the following files: 
infl_1_001.img
infl_1_002.img 
infl_1_003.img
infl_1_004.img
infl_1_005.img
peak_2_001.img
peak_2_002.img 
peak_2_003.img
peak_2_004.img
peak_2_005.img

The indexed number in the file name is replaced by a stary (*) in the file pattern.
For example, getNextFileIndex will return 6 for file pattern infl_1_*.img 
It will return 0 if there is no file in the directory with the given pattern.

Request

getNextFileIndex <operationId> <user> <sessionId> <dir> <pattern>

where
operationId: unique id for the operation assigned by the dcss.
user: login name of the user
sessionId: sesion id for this user generated by the authentication server.
dir: Directory name. Directory name that begins with "~/" will be replaced by "/home/". 
     For example, ~/joeuser will become /home/joeuser.
pattern: Filename pattern where the indexed number is replaced by a *.

For example,

getNextFileIndex 144 penjitk UYWKJSWQOW4564332WLWEUQ9759 /data/penjitk/dataset/test1 infl_1_*.img

Response

htos_operation_completed <operation id> normal <next index>
htos_operation_completed <operation id> error <error string>

where
filename is the last filename found for the given file filter

Note that if no file matches the prefix, the return index will be 0.

  
    
4.5 copyFile
    --------

Copies a file. Can copy file owned by one user to a file owned by another user.

Request:

copyFile <operationId> <user1> <sessionId1> <file1> <user2> <sessionId2> <file2>

where
user1: Name of the user who owns <file1>
sessionId1: Session id of user1
file1: Name of file to be copied
user2: Name of user who will own file2
sessionId2: Session id of user2
file2: Name of destination file.

Note: user1 must have read permission for file1 and user2 must have write permission 
for file2.

For example,
copyFile 144 penjitk UYWKJSWQOW4564332WLWEUQ975 /data/penjitk/file1.txt joeuser DGHJEREWWPPOKLDR32843ILFRT /data/joeuser/file2.txt
copyFile 144 penjitk UYWKJSWQOW4564332WLWEUQ975 /data/penjitk/file1.txt penjitk UYWKJSWQOW4564332WLWEUQ975 /data/penjitk/file2.txt

Response

htos_operation_completed <operation id> normal
htos_operation_completed <operation id> error <error string>



4.6 appendTextFile
	--------------
	
Appends a string to an existing text file. If the file does not exist, a new file 
will be created. 

Request:

appendTextFile <operationId> <user> <sessionId> <file> <string>

where
user: User login name
sessiondId: SMB session id
file: File path
string: arbitrary string to append to the file.

Note: The user must have a write permission for the file.

For example, 
appendTextFile 1.0 penjitk UYWKJSWQOW4564332WLWEUQ975 /data/penjitk/test1.log This is any string I want to add to the file.

Response

htos_operation_completed <operation id> normal
htos_operation_completed <operation id> error <error string>


For example,
htos_operation_completed appendTextFile 1.0 normal
htos_operation_completed appendTextFile 1.0 error Failed to open file for writing


4.7 readTextFile
    ------------
    
Reads a text file and sends each line as dcs update message. When a line longer
than 1000 character is encountered, the subsequent lines will not be ignored
and an operation complete with error will be sent. An empty line is ignored.

Request

readTextFile <operationId> <user> <sessionId> <file>

where
user: User login name
sessiondId: SMB session id
file: File path

Note: The user must have a read permission for the file.

For example,
readTextFile penjitk UYWKJSWQOW4564332WLWEUQ975 /data/penjitk/test1.log

Response

htos_operation_update <operation id> <line of text>
htos_operation_completed <operation id> normal
htos_operation_completed <operation id> error <error string>

For example,
htos_operation_update readTextFile 1.0 This is line 1 text
htos_operation_update readTextFile 1.0 This is line 2 text
htos_operation_update readTextFile 1.0 This is line 3 text
htos_operation_update readTextFile 1.0 This is line 4 text
htos_operation_completed readTextFile 1.0 normal

or
htos_operation_update readTextFile 1.0 This is line 1 text
htos_operation_update readTextFile 1.0 This is line 2 text
htos_operation_completed readTextFile 1.0 error line too long



5. Testing Guide
   -------------

Each operation can be tested by running DCSSServer java program in
java_dcss_sim directory. The input file for the program is provided
for each operation in impdhs/test directory. For example, 
impdhs/test/appendTextFile.txt can be used as an input file
for DCSSServer for testing appendTextFile operation. Modify the
input file and change the user name, session id and other 
parameters as needed before running the program.

The steps before describe how to setup a test for appendTextFile
operation:

1. Edit impdhs/test/appendText.txt. Modify the following line:

appendTextFile penjitk E45A14E73D777A6056CD164B7BE9725D /data/penjitk1/test1.txt This is a test line.

2. Run DCSSServer. This program is a simulated dcss.

> cd java_dcss_sim
> setenv CLASSPATH .:$CLASSPATH
> java DCSSServer 13342 ../impdhs/test/appendTextFile.txt

3. Modify dcs config. 

   3.1 Choose one of the config files in dcsconfig/data
	   directory, for example, blctlxxsim.config.
   3.2 Make the impdhs use the new impersonation server
   	   version 2.1 or above (as of 0622/04 it is installed
   	   on blcpu4).
       
		# imperson dhs
		impdhs.impHost=blcpu4.slac.stanford.edu
		impdhs.impPort=61001
		
		Note that in order to make sure you are using 
		the correct version of impersonation server,
		check the version number by using a web browser.
		Type in the following url:
		
		http://<host>:<port>/getVersion?impUser=penjitk&impSessionID=JDHSJDSHJHJ22482
		
		Change the user name and session id as appropriate.
		The version number will be displayed on the page.
		
	3.3 Make sure that the impdhs will connect to DCSSServer on 
		the machine and port number setup in step 2 above. This
		is by making sure that dcss.host config is set to the
		machine name where DCSSServer runs and dcss.hardwarePort
		is the same as the first command line argument for running
		DCSSServer.
	
		dcss.host=blctlxx.slac.stanford.edu
		dcss.hardwarePort=14342
		

4. Run impdhs using the above config file

> cd impdhs/linux
> ./impdhs blctlxxsim


impdhs will connect to the DCSSServer and will receive the appendTextFile
operation. The response will displayed in the message window of the
DCSSServer.


