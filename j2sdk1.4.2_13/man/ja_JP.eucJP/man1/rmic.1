'\" t
.\" @(#)rmic.1 1.3 00/06/13 SMI;
.\" Copyright 2003 Sun Microsystems, Inc. All rights reserved.
.\" Copyright 2003 Sun Microsystems, Inc. Tous droits r蜩erv蜩.
.\" 
.TH rmic 1 "2001 年 11 月 30 日"
.SH "名前"
rmic \- Java RMI スタブコンパイラ
.\" 
.\"  This document was created by saving an HTML file as text
.\"  from the JavaSoft web site:
.\" 
.\" http://java.sun.com/products/jdk/1.2/docs/tooldocs/tools.html
.\" 
.\"  and adding appropriate troff macros.  Because the JavaSoft web site 
.\"  man pages can change without notice, it may be helpful to diff
.\"  files to identify changes other than new functionality. 
.\" 
.SH "形式"
.B rmic 
[
.BI \-bootclasspath " path"
] [ 
.BI \-classpath " path" 
]
.if n .ti +5n
[ 
.BI \-d " directory" 
] [ 
.B \-depend 
]
.if t .ti +5n
[
.BI \-extdirs " path"
] [ 
.B \-g 
]
.if n .ti +5n
[
.B \-idl
] [
.B \-iiop
] [ 
.B \-keepgenerated 
] [
.B \-J 
]
.ti +5n
[ 
.B \-nowarn 
] [
.BI \-sourcepath " path"
] [
.B \-vcompat
]
.if n .ti +5n
[ 
.B \-verbose 
] [
.B \-v1.1
] [
.B \-v1.2
]
.ti +5n
.I package-qualified-class-names
.SH "機能説明"
.IX "Java RMI stub compiler" "" "Java RMI stub compiler \(em \fLrmic\fP"
.IX "rmic" "" "\fLrmic\fP \(em Java RMI stub compiler"
.B rmic
コンパイラは、リモートオブジェクトを含んだコンパイル後の
Java 
クラスの名前から、スタブとスケルトンクラスファイルを生成します。
リモートオブジェクトとは、インタフェース
.B java.rmi.Remote
を実装するオブジェクトです。
.B rmic
コマンドに指定するクラス名は、
.BR javac (1)
コマンドで正しくコンパイルされたクラスを表し、かつ
パッケージ名で完全に修飾されている必要があります。
次に示す例では、
.B HelloImpl
というクラスファイルに対して
.B rmic
を実行しています。
.LP
.nf
.B	example% rmic hello.HelloImpl
.fi
.LP
これにより、
.B HelloImpl_Skel.class
と
.B HelloImpl_Stub.class
の
2
つのファイルが生成されます。
.LP
リモートオブジェクト用のスケルトンはサーバ側のエンティティで、
実装されているリモートオブジェクトを呼び出すメソッドを含んでいます。
.LP
スタブとはリモートオブジェクトのプロキシで、
リモートオブジェクトのメソッド呼び出しを
実際のリモートオブジェクトが存在するサーバへ
転送する役目を果たします。
したがってクライアントによるリモートオブジェクトの参照は、
実際には局所スタブへの参照となります。
.LP
スタブはリモートインタフェースだけを実装していて、
リモートオブジェクトが実装している局所インタフェースは
扱いません。スタブが実装しているリモートインタフェースは、
リモートオブジェクトのものとまったく同一です。
したがってクライアントは、
キャストしたり型チェックしたりするのに
Java
言語の組み込み演算子を使うことができます。
.SH "オプション"
以下のオプションが使用できます。
.if t .TP 20
.if n .TP 15
.BI \-bootclasspath " path"
ブートストラップクラスファイルの位置をオーバーライドします。
.if t .TP 20
.if n .TP 15
.BI \-classpath " path"
.B rmic
がクラスを探すのに用いるパスを
.I path
で指定します。この指定値は、デフォルトおよび
.B CLASSPATH
環境変数の設定値をオーバーライドします。
複数のディレクトリを指定する場合はコロンで区切ります。
したがって
.I path
の通常の形式は次のようになります。
.sp 1n
.ti +5n
.BI .:< your_path >
.sp 1n
以下に例を示します。
.sp 1n
.ti +5n
.B .:/usr/local/java/classes
.if t .TP 20
.if n .TP 15
.BI \-d " directory"
クラス階層構造のルートディレクトリを指定します。
省略した場合、ルートディレクトリはデフォルトで現在のディレクトリ
になります。
.if t .TP 20
.if n .TP 15
.B \-depend
他のクラスファイルから参照されているクラスファイルを
再コンパイルさせます。
デフォルトでは、コンパイラが再コンパイルするのは、
ソースコードが参照しているクラスファイルのうち見つからないファイル
および以前のファイルだけです。
.TP
.BI \-extdirs " path"
インストールされる拡張機能の位置をオーバーライドします。 
.if t .TP 20
.if n .TP 15
.B \-g
デバッグ用テーブルの生成を行います。
このテーブルには行番号と局所変数に関する情報が含まれ、
この情報は
Java
のデバッグツールが使用します。
デフォルトでは、行番号だけが生成されます。
.if t .TP 20
.if n .TP 15
.B \-idl
.B rmic
によって、指定したクラスおよび参照されたクラスの
.SM OMG IDL
が生成されます。
.SM IDL
では、プログラミング言語に依存せずに、宣言するだけでオブジェクトの 
.SM API
を指定できます。
.SM IDL
は、
.SM CORBA
バインディングを提供する任意の言語 (Java、C++ など) を使用して、メソッドおよびデータの
書き込みおよび呼び出しを行うときの仕様として使われます。
.B \-idl
オプションは、合わせて以下のオプションも指定できます。
.RS
.TP 5
.BR \-always " または " \-alwaysgenerate
既存のスタブ、Tie、および \s-1IDL\s0 が入力クラスより新しいときでも、強制的に生成し直します。 
.PD 0
.TP
.B \-factory
生成された IDL で factory キーワードを使います。
.TP
.B \-idlModule fromJavaPackage[.class] toIDLModule
.B IDLEntity
パッケージのマッピングを指定します。次に例を示します。
.sp 1n
.in +5n
.ft 3
.nf
\-idlModule foo.bar
my::real::idlmod.
.fi
.ft 1
.in
.sp 1n
.TP
.B \-idlFile fromJavaPackage[.class] toIDLFile
.B IDLEntity
ファイルのマッピングを指定します。次に例を示します。
.sp 1n
.ti +5n
.B \-idlFile test.pkg.X TEST16.idl
.RE
.PD
.if t .TP 20
.if n .TP 15
.B \-iiop
.B rmic
は、
.SM JRMP
のスタブとスケルトンクラスの代わりに、
.SM IIOP
のスタブと Tie クラスを生成します。スタブクラスは、リモートオブジェクトの
ローカルプロキシで、クライアントがサーバに呼び出しを送信するときに
使われます。各リモートインタフェースにはスタブクラスが必要です。スタブクラス
によってリモートインタフェースが実装されます。クライアントでリモートオブジェクト
を参照すると、実際にはスタブを参照することになります。Tie クラスは、
サーバ側で受信した呼び出しを処理し、その呼び出しを適切な実装クラスにディスパッチ
するときに使われます。各実装クラスには、Tie クラスが必要です。 
.sp 1n
.B \-iiop
を指定して
.B rmic
を起動すると、次の命名規約に準拠したスタブと Tie が生成されます。 
.sp 1n
.in +5n
.ft 3
.nf
_<implementationName>_stub.class
.sp 1n
_<interfaceName>_tie.class
.ft 1
.fi
.in
.sp 1n
.B \-iiop
オプションは、合わせて以下のオプションも指定できます。
.sp 1n
.ne 1
.bp
.RS
.PD 0
.TP 5
.BR \-always " または " \-alwaysgenerate
既存のスタブ、Tie、および \s-1IDL\s0 が入力クラスより新しいときでも、強制的
に生成し直します。 
.TP
.B \-nolocalstubs
同じプロセスのクライアントとサーバに対して最適化されたスタブを作成しません。
.TP
.B \-noValueMethods
.B \-idl
オプションとともに使用する必要があります。発行された
.SM IDL\s0
に、valuetype メソッドおよび初期化子を追加しません。このメソッドおよび初期化子
は、valuetype のオプションです。
.B \-idl
オプションを使うときは、
.B \-noValueMethods
オプションを指定しない限り生成されます。 
.TP
.B \-poa 
.br
継承を
.BR org.omg.CORBA_2_3.portable.ObjectImpl から
.BR org.omg.PortableServer.Servant\. へ変更します。
.RS
.LP
Portable Object Adapter (POA) の
.BR PortableServer
モジュールは、ネイティブ の servant 型を定義します。
Java プログラミング言語では、servant 型は、Java の 
.BR org.omg.PortableServer.Servant
クラスにマップされます。これはすべての POA サーバント実装の基底クラスとして
機能し、アプリケーション開発者が呼び出せる多数のメソッドを提供します。また、
POA 自体が読み出したり、サーバント動作を制御するためにユーザが上書きした
りできるメソッドも提供します。CORBA V 2.3.1 の「OMG IDL to Java Language Mapping Specfication (ptc/00-01-08.pdf)」に基づいています。
.RE
.PD
.RE
.TP 20
.if t .TP 20
.if n .TP 15

.B \-J
.B  \-D
オプションと一緒に使用して、これに続く
オプションを java 
インタプリタに渡します。
.B \-J
と 
.B  \-D
の間に空白は入れません。
.if t .TP 20
.if n .TP 15
.B \-keepgenerated
スタブおよびスケルトン用に生成された
.B .java
ソースファイルを保持します。
.B \-d
オプションが指定されていれば、ソースファイルは
.B .class
ファイルと同じディレクトリに出力されます。
.if t .TP 20
.if n .TP 15
.B \-nowarn
警告を出力しません。
つまり、コンパイラは警告メッセージをいっさい出力しません。
.if t .TP 20
.if n .TP 15
.BI \-sourcepath " path"
ユーザのソースファイルを検索する場所を指定します。
.if t .TP 20
.if n .TP 15
.B \-vcompat
JDK 1.1 と 1.2 のスタブプロトコルバージョンと互換性の
あるスタブとスケルトンを作成します (デフォルト)。
.TP 15
.B \-verbose
コンパイラとリンカに詳細情報を出力させます。具体的には、
コンパイルされるクラスファイル、およびロードされる
クラスファイルに関する情報が出力されます。
.TP 15
.B  \-v1.1
JDK 1.1 スタブプロトコルバージョンのスタブとスケルトンを作成します。
.TP 15
.B  \-v1.2
JDK 1.2 スタブプロトコルバージョンのスタブだけを作成します。
.SH "環境"
.TP 15
.B CLASSPATH
ユーザ定義クラスへのパスをシステムに通知するために使用します。
複数のディレクトリを指定する場合はコロンで区切ります。
以下に例を示します。
.LP
.RS 20
.nf
.B .:/usr/local/java/classes
.fi
.RE
.LP
